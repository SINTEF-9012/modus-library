<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-hDIAYvmkm0y9doOluAV0RA" name="emf_tutorial,_m9vVgBz-Ed65QJax4GT0MQ" guid="-hDIAYvmkm0y9doOluAV0RA" changeDate="2010-10-19T13:41:11.153+0200">
  <mainDescription>&lt;h2 class=&quot;underlined_10&quot;>&#xD;
    Tutorial #1: Develop an information metamodel in EMF&#xD;
&lt;/h2>&#xD;
&lt;div class=&quot;section&quot;>&#xD;
    &lt;p>&#xD;
        In this tutorial we will describe how to develop an information metamodel in EMF. The objective of the tutorial is&#xD;
        to get familiar with the EMF technology that is used to describe and develop metamodels.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        For the tutorial we were searching for a visual editor that had the capability and the right options to create&#xD;
        metamodels graphically. EMF 2.2.0 together with some part of GMF features on top of it has this capability and&#xD;
        ofers a light editor based on Ecore. This MOF-like core meta-model makes it possible to create meta-models&#xD;
        graphically and also generates java api and classes for manipulating and persisting these meta-models.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10018&quot; name=&quot;N10018&quot;>&lt;/a>&lt;a id=&quot;1.+Create+an+EMF+project&quot; name=&quot;1.+Create+an+EMF+project&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        1. Create an EMF project&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/metamodelling/tutorials_files/metamodelling_create_an_emf_project.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        An EMF model is created from the file meny choosing new-&amp;gt;project -&amp;gt;empty emf project. It can also be created&#xD;
        directly by importing an ecore file, rose model, uml model or XML schema.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The newly created EMF project contains the src class which serve in code generation. We are not going to explore&#xD;
        the abilities of code generation in this example. The interes in this case is the ability of EMF to create&#xD;
        metamodels. Under the src folder are listed a number of jar files assisting the project.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10024&quot; name=&quot;N10024&quot;>&lt;/a>&lt;a id=&quot;2.+Create+a+model+folder&quot; name=&quot;2.+Create+a+model+folder&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        2. Create a model folder&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/metamodelling/tutorials_files/metamodelling_create_a_model_folder.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        We create a folder called model, which is going to contain the models we will create.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1002E&quot; name=&quot;N1002E&quot;>&lt;/a>&lt;a id=&quot;3.+Create+a+new+ecore+model&quot; name=&quot;3.+Create+a+new+ecore+model&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        3. Create a new ecore model&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/metamodelling/tutorials_files/metamodelling_create_a_new_ecore_model.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The feature for creating ecore files visualy, not as a tree structure editor is new in EMF 2.2.0. It is included as&#xD;
        a plugin example and is still experimental. This feature is i GMF.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10038&quot; name=&quot;N10038&quot;>&lt;/a>&lt;a id=&quot;4.+Develop+the+metamodel&quot; name=&quot;4.+Develop+the+metamodel&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        4. Develop the metamodel&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        Develop the metamodel using the language constructs EClass, Generalization, EAttribute, Aggregation and Association&#xD;
        defined in ecore (see the subsections below for details). The final metamodel should look like the figure below.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/metamodelling/tutorials_files/metamodelling_information_metamodel.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10042&quot; name=&quot;N10042&quot;>&lt;/a>&lt;a id=&quot;EClass&quot; name=&quot;EClass&quot;>&lt;/a> &#xD;
    &lt;h4>&#xD;
        EClass&#xD;
    &lt;/h4>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/metamodelling/tutorials_files/metamodelling_eclass.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1004A&quot; name=&quot;N1004A&quot;>&lt;/a>&lt;a id=&quot;Generalization&quot; name=&quot;Generalization&quot;>&lt;/a> &#xD;
    &lt;h4>&#xD;
        Generalization&#xD;
    &lt;/h4>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/metamodelling/tutorials_files/metamodelling_generalization.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10052&quot; name=&quot;N10052&quot;>&lt;/a>&lt;a id=&quot;EAttribute&quot; name=&quot;EAttribute&quot;>&lt;/a> &#xD;
    &lt;h4>&#xD;
        EAttribute&#xD;
    &lt;/h4>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/metamodelling/tutorials_files/metamodelling_eattribute.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1005A&quot; name=&quot;N1005A&quot;>&lt;/a>&lt;a id=&quot;Aggregation&quot; name=&quot;Aggregation&quot;>&lt;/a> &#xD;
    &lt;h4>&#xD;
        Aggregation&#xD;
    &lt;/h4>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/metamodelling/tutorials_files/metamodelling_aggregation.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10062&quot; name=&quot;N10062&quot;>&lt;/a>&lt;a id=&quot;Association&quot; name=&quot;Association&quot;>&lt;/a> &#xD;
    &lt;h4>&#xD;
        Association&#xD;
    &lt;/h4>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/metamodelling/tutorials_files/metamodelling_association.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1006A&quot; name=&quot;N1006A&quot;>&lt;/a>&lt;a id=&quot;5.+Create+the+EMF+model&quot; name=&quot;5.+Create+the+EMF+model&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        5. Create the EMF model&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/metamodelling/tutorials_files/metamodelling_create_the_emf_model.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        After creating the metamodel as an ecore file, the next step is to create the EMF model or called in another way&#xD;
        the generator model. This model will be used to create the java interfaces and other java code needed in&#xD;
        manipulating or persisting the instances of the metamodel.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        We have to be sure that the EMF model is created from the ecore model.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The next buton in the Ecore Import window is not active unless the ecore file is loaded.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        In the end we can see the genmodel which can look like an ecore file.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1007A&quot; name=&quot;N1007A&quot;>&lt;/a>&lt;a id=&quot;6.+Generate+model+and+edit+code&quot; name=&quot;6.+Generate+model+and+edit+code&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        6. Generate model and edit code&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/metamodelling/tutorials_files/metamodelling_generate_model_and_edit_code.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Through model code EMF generates java interfaces and classed for every element in the model.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        In most cases, the properites need not be changed from their default values, but these options can provide a great&#xD;
        deal of control over the code that gets generated.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        A fully functional Eclipse editor can also be generated for any model. By default, it is split between two&#xD;
        plug-ins: an &quot;edit&quot; plug-in includes adapters that provide a structured view and perform command-based editing of&#xD;
        the model objects; an &quot;editor&quot; plug-in provides the UI for the editor and wizard. In our example we will use only&#xD;
        the edit code. The editor for this example will be shown in another tutorial about GMF.&#xD;
    &lt;/p>&#xD;
&lt;/div></mainDescription>
</org.eclipse.epf.uma:ContentDescription>

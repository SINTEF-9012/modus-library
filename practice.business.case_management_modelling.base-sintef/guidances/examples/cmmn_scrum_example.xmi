<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:GuidanceDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-Mt_nTAHjOmXyXamgw4BrCg" name="new_example,_cYo_UJwFEeCxNIYmmT7D_A" guid="-Mt_nTAHjOmXyXamgw4BrCg" changeDate="2011-06-22T10:26:29.484+0200">
  <mainDescription>&lt;p>&#xD;
    We illustrate an example of CMMN being applied to engineering projects by modeling selected parts of the Scrum project&#xD;
    management practice. Scrum is an empirical agile project management framework used to deliver increments of high value&#xD;
    to the customer iteratively (called sprints).&lt;br />&#xD;
    Case management may be applied and support the highly creative, collaborative, human and team-oriented activities in&#xD;
    software development projects. An example of this is illustrated in chapter 10 of Mastering the Unpredictable which&#xD;
    demonstrates case management in the context of Scrum.&lt;br />&#xD;
    Below we show examples of the Scrum case model.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Case&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In this example we model a Scrum project as a single case. The figure below shows a closed folder view of the Scrum&#xD;
    Project case.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img style=&quot;WIDTH: 294px; HEIGHT: 163px&quot; alt=&quot;&quot; src=&quot;./resources/scrum1.png&quot; width=&quot;330&quot; height=&quot;192&quot; />&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Case file&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    &amp;nbsp;&lt;span lang=&quot;nb-NO&quot;>A case file can be shown as collapsed or open. Also the individual parts of a case file can be&#xD;
    shown collapsed or open. The figure below illustrates the five main work products of a Scrum practice modeled as case&#xD;
    file parts.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;span lang=&quot;nb-NO&quot;>&lt;img style=&quot;WIDTH: 669px; HEIGHT: 527px&quot; alt=&quot;&quot; src=&quot;./resources/case2.png&quot; width=&quot;600&quot;&#xD;
    height=&quot;600&quot; />&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;h4 lang=&quot;nb-NO&quot;>&#xD;
    &lt;a id=&quot;_Toc292607127&quot; name=&quot;_Toc292607127&quot;>&lt;/a>&lt;a id=&quot;_Toc293907471&quot; name=&quot;_Toc293907471&quot;>&lt;/a>Case life cycle&#xD;
&lt;/h4>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;span lang=&quot;nb-NO&quot;>Scrum defines a Sprint as an iteration that are time-boxed. Each Sprint consists of the Sprint&#xD;
    Planning Meeting which occurs when planning the iteration, a Sprint Review after the iteration, and a Sprint&#xD;
    Retrospective prior to the next Sprint Planning Meeting. During the Sprint itself each team meets up for daily standup&#xD;
    meetings called Daily Scrum.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;span lang=&quot;nb-NO&quot;>Prior to the Sprint Planning Meeting an optional Release Planning Meeting which established a plan&#xD;
    and goals that the Scrum teams may take place.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;span lang=&quot;nb-NO&quot;>In the figure below we have modeled the Release Planning Meeting as a separate (optional) phase at&#xD;
    the same level as the Sprint Phase which defines the main pattern for sprinting in Scrum. The Sprint Phase contains&#xD;
    planning, the actual sprint, review and retrospective as sub-phases. The Daily Scrum meetings will occur within the&#xD;
    Sprint sub-phase.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;span lang=&quot;nb-NO&quot;>&lt;img style=&quot;WIDTH: 790px; HEIGHT: 479px&quot; alt=&quot;&quot; src=&quot;./resources/case3.png&quot; width=&quot;600&quot;&#xD;
    height=&quot;600&quot; />&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
&lt;/p>&#xD;
&lt;h4 lang=&quot;nb-NO&quot;>&#xD;
    &lt;a id=&quot;_Toc293907472&quot; name=&quot;_Toc293907472&quot;>&lt;/a>Sprint sub-phase and tasks&#xD;
&lt;/h4>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;span lang=&quot;nb-NO&quot;>Daily standup meetings occur during the running of the Sprint. The Daily Scrum triggers updating of&#xD;
    the Sprint Backlog that contains the implementation tasks that are done by the members of the team, e.g. design, coding&#xD;
    and testing. The Team modifies the Sprint Backlog throughout the Sprint.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;span lang=&quot;nb-NO&quot;>&lt;img style=&quot;WIDTH: 746px; HEIGHT: 324px&quot; alt=&quot;&quot; src=&quot;./resources/case4.png&quot; width=&quot;600&quot;&#xD;
    height=&quot;465&quot; />&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;_Toc292607128&quot; name=&quot;_Toc292607128&quot;>&lt;/a>&lt;a id=&quot;_Toc293907473&quot; name=&quot;_Toc293907473&quot;>&lt;/a>Discussion&#xD;
&lt;/h4>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The models in the previous section allow us to assess how well CMMN meets the requirements put forward in section&#xD;
    Engineering Projects. In particular, we emphasize the added value that CMMN brings compared to more conventional&#xD;
    process modeling languages like BPMN, and the remaining challenges that should be solved by other means, e.g. by&#xD;
    incorporating related modeling standards.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Case Life-Cycles&#xD;
&lt;/h4>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    In CMMN, the modeling of different phases or stages of each project, is accomplished by a case life cycle consisting of&#xD;
    phases. There is no corresponding construct in BPMN, so life cycles would have to be modeled using standard activities&#xD;
    for phases, decomposed into sub-processes. Given the flexibility required for a case, the sub-processes would need to&#xD;
    be ad-hoc. (The difference between ad-hoc sub-processes and the planning palette of CMMN will be discussed below).&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The Phase construct is more precise than general activities, in that it defines a sequential course, one phase at a&#xD;
    time. This pattern is common in engineering projects, where the transition from one phase to the next is often&#xD;
    controlled by a decision gate, which is subject to well-defined procedures, often involving decision gate reviews to&#xD;
    ensure the level of quality of the results produced. Phase and transitions are often included in the legal contractual&#xD;
    framework of the project.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    In addition to case lifecycles, engineering projects need the ability to model the lifecycle of a the product&#xD;
    components of the case. Often the transition from one phase to the next requires that the work products have reached a&#xD;
    certain state or quality level. In CMMN the work products are case file elements. By supporting user-defined properties&#xD;
    of case file elements, CMMN facilitates the modeling of product life cycles. Constraints on case file elements further&#xD;
    allow the specification of rules for e.g. how product lifecycles and case phases are related.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    In order to further improve the support for product lifecycle modeling, UML state transition diagrams for the case file&#xD;
    parts may be applied in combination with CMMN.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Iterations&#xD;
&lt;/h4>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The Scrum approach to software engineering is iterative, with repeating cycles at different levels The figure below&#xD;
    shows the main pattern of the Scrum time-boxes. The different time-boxes of Scrum can be modeled in different ways&#xD;
    using CMMN, either modeling a time-box as a phase or sub-phase, or as a task. In the example above we decided to model&#xD;
    some of these as phases, while other such as The Daily Scrum as a task within a Sprint sub-phase.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;span lang=&quot;nb-NO&quot;>&lt;img style=&quot;WIDTH: 931px; HEIGHT: 522px&quot; alt=&quot;&quot; src=&quot;./resources/case5.png&quot; width=&quot;600&quot;&#xD;
    height=&quot;600&quot; />&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    While we so far have implicitly treated the whole project as a single case, these iterative processes may be better&#xD;
    supported by treating each iteration, each sprint, as a separate case. Composition of cases is not supported in the&#xD;
    current CMMN, and each case may only have one life cycle. Composition of phases is however supported, so we may model&#xD;
    each spring as a phase in the project case, with a standard set of subphases for each sprint phase. For some cases,&#xD;
    however, this solutions may be too simple and rigid, because CMMN phases are modeled like business processes, and the&#xD;
    case lifecycle does not possess the same flexibility as a case plan, e.g. for dynamic planning.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Extending CMMN in this area will be explored for the final version of the proposal. As an alternative to composite&#xD;
    cases, a higher level management structure may be applied on top of the CMMN to handle a project consisting of multiple&#xD;
    cases. For software engineering, the OMG Software &amp;amp; Systems Process Engineering Metamodel [SPEM2] could be applied.&#xD;
&lt;/p>&#xD;
&lt;h4 lang=&quot;nb-NO&quot;>&#xD;
    &lt;a id=&quot;_Toc293907476&quot; name=&quot;_Toc293907476&quot;>&lt;/a>Case Planning&#xD;
&lt;/h4>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The modeling of a case as a palette of available tasks for planning, rather than as a predefined process, fits well&#xD;
    with the requirements of engineering projects. In BPMN a case may be represented as an ad-hoc sub-process, but this&#xD;
    solution does not facilitate the further planning of the case as well as CMMN planning palettes. By defining different&#xD;
    sets of planable tasks for each case type and each phase, a case model will offer the planners more guidance. By&#xD;
    defining different kinds of planning tasks, CMMN brings structure to the planning process.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The notion that different tasks belong in different phases of the case fits well with the engineering context, e,g,&#xD;
    placing specification tasks in the specification phase, design tasks in the design phase, programming tasks in the&#xD;
    implementation phase etc.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    An engineering project typically involves many different technical and non-technical disciplines. Each discipline will&#xD;
    have its own methods, represented as a set of tasks, and the overall project plan will integrate the tasks from&#xD;
    different disciplines into a coherent whole. The conventional way of supporting this is to define separate&#xD;
    sub-processes or complex tasks for each discipline. This often leads to a fragmented rather than integrated plan, where&#xD;
    each discipline is isolated in its own sub-process, and important dependencies between disciplines are left implicit&#xD;
    and not captured. The plan fragments of CMMN offers a more powerful mechanism for such method engineering. It allows a&#xD;
    more flexible merging of task patterns from different disciplines, where the resulting work breakdown structure need&#xD;
    not reflect the organizational breakdown structure of disciplines. At the same time, each discipline can still define&#xD;
    its own methods a separate plan fragment.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    CMMN is a design time notation for defining case types in a case management system. It should be complemented with&#xD;
    notations for runtime case planning, i.e. modeling of case instances. For now, the proposal leaves this up to each tool&#xD;
    vendor, but extending the CMMN to also cover instance modeling may be included in the final proposal.&#xD;
&lt;/p>&#xD;
&lt;h4 lang=&quot;nb-NO&quot;>&#xD;
    &lt;a id=&quot;_Toc293907477&quot; name=&quot;_Toc293907477&quot;>&lt;/a>&lt;span lang=&quot;en-US&quot;>Data and Event-Driven Processes&lt;/span>&#xD;
&lt;/h4>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The ability to define constraints and operational rules that specify how the case should react to different&#xD;
    environmental situations, is crucial for engineering projects. Although each project is unique, we would like to manage&#xD;
    a set of similar projects as a case type, and rules are an important means for controlling this variation. Typically,&#xD;
    case file events and data values will influence which tasks are available, which tasks must be performed, the&#xD;
    scheduling of tasks, and the assignment of participants to case roles. To meet these requirements, CMMN provides&#xD;
    constraints, dependencies, action and state change conditions.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    For engineering projects, the combination of case file events and dynamic planning is especially powerful. It allows&#xD;
    e.g. the addition of a document of another case file element to cause changes to the case planning palette.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:GuidanceDescription>

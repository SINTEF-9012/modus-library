<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-jPjxM3l1D2yzL7NKVI3iNQ" name="dependecy,_7gnRwJymEeCb2cFFaexWpQ" guid="-jPjxM3l1D2yzL7NKVI3iNQ" changeDate="2011-08-12T16:09:29.802+0200">
  <mainDescription>&lt;p>&#xD;
    A dependency represents a requirement for an event (e.g., completion of a task) to occur before the dependent element&#xD;
    is enabled.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Dependencies are only expressed within containers and thus only between plan nodes because containers are templates for&#xD;
    runtime instances. At runtime, dependencies can be placed instances of on other elements that are placed in the plan.&#xD;
    Dependencies are typically drawn as connectors between a source component and a target component. Dependencies define a&#xD;
    trigger at the source and an enabling action at the target.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Phase nodes and transition nodes can only serve as the source of dependencies. Not at the target.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note that dependencies do not (!) denote “token flows” as in BPMN, but rather define a restriction on when a dependent&#xD;
    element is enabled.&lt;br />&#xD;
    &lt;br />&#xD;
    Examples:&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The completion of a task enables the start of another task (known as FS in MS Project).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The start of a task enables the start of another task (known as SS in MS Project).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
            The completion of task enables the completion of another task (known as FF in MS Project)&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
            The completion (or “occurrence”) of a planned event enables the start of a task&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
            The entry of a phase enables the start of a task&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The insertion of a document in the case file of a case enables the start of a task that requires the document&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A time out of a task enables the start of another task&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Dependencies can only be expressed in plan fragments and complex tasks during case type modeling. Dependencies&#xD;
        between other plan elements are inserted in the plan as required at runtime.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Dependencies may be enabled by “intrinsic” events, events that are implicit in the execution of plan elements. For&#xD;
    example:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Task events, such as start and completion of a task (instance).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Case life cycle events, such as entry or exit of a phase (instance).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Case events, such as start and completion of a case (instance). These can also be considered events of the “root”&#xD;
        or “outer” phase of the case life cycle.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Event element events, such as the start or completion of the event (instance), whereby the start can be interpreted&#xD;
        the moment on which the system starts listening to an event occurrence, and the completion as the moment of actual&#xD;
        occurrence of the event.&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>

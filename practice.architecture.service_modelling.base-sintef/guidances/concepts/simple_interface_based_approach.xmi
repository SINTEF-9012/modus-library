<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-sJNF2L8ckNMgI1mH8LfL8w" name="new_concept,_W6pcQDf5Ed-Uc_4T-VlC6Q" guid="-sJNF2L8ckNMgI1mH8LfL8w" changeDate="2011-06-30T13:28:16.018+0200">
  <mainDescription>&lt;p>&#xD;
    The simple interface based approach focuses attention on a one-way interaction provided by a participant on a port&#xD;
    represented as a UML interface. The participant receives operations on this port and may provide results to the caller.&#xD;
    This approach can be used with “anonymous” callers and the participant makes no assumptions about the caller or the&#xD;
    choreography of the service.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../practice.architecture.service_modelling.base-sintef/guidances/examples/dna_example_9FC5444.html&quot;&#xD;
    guid=&quot;_J7G0AKMLEeCs2vaY4B2J3g&quot;>DNA: Example&lt;/a> there are three services identified (as service contracts). Some of&#xD;
    these may in fact be simple one-way interactions and could thus be modelled using the simple interface based approach.&#xD;
    Let us consider the Ship Status service as a simple one-way interaction. Figure 3 shows the specification of this&#xD;
    service, consisting of the provider interface ShippingStatus (modelled as a «Provider» UML interface) and the two&#xD;
    message types ShipmentStatusRequest and ShipmentStatus (modelled as «MessageType» UML classes). The message types&#xD;
    represent the types of the input parameter and the return type of the operation queryShippingStatus defined in the&#xD;
    provider interface.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;br />&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/dna_simple_interface_figure_3_example.png&quot; width=&quot;461&quot; height=&quot;219&quot; />&lt;br />&#xD;
    &lt;strong>Figure 3:&lt;/strong>&amp;nbsp;&amp;nbsp;Specification of the Ship Status service using the simple interface based&#xD;
    approach, consisting of a simple provider interface, its operations and message types, and the corresponding port on a&#xD;
    participant&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    According to the services architecture Dealer Network Architecture the participant Shipper must realize the shipper&#xD;
    role, which means to provide the provider interface through a service port. Thus, to complete the specification, we add&#xD;
    the service port service (modelled as a «Service» UML port) to the participant Shipper (modelled as a «Participant» UML&#xD;
    class or a «Participant» UML component (a subclass of UML class)). The service port is typed with the provider&#xD;
    interface ShippingStatus and exposes its provided interface.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The simple interface based approach can be seen as a degenerate case of both the service contract and service interface&#xD;
    based approaches, only entailing one provider interface. Figure 4 shows how the simple interface can be specified as a&#xD;
    service contract Ship Status (modelled as a «ServiceContract» UML collaboration). Note that a contract involves at&#xD;
    least two roles, e.g. consumer and provider. In this case we use the role names receiver and shipper instead of the&#xD;
    generic consumer and provider role names. Since we model a one-way interaction only the provider side, i.e. the shipper&#xD;
    role, has a type, namely the provider interface ShippingStatus. In this case we have only introduced the UML&#xD;
    collaboration, all other elements from the simple interface based approach remain unaffected.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/dna_simple_interface_figure_4_example.png&quot; width=&quot;454&quot; height=&quot;321&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Figure 4:&lt;/strong> Specification of the Ship Status service using the service contract based approach&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Figure 5 shows how the simple interface can be modelled as a service interface. Here the service contract has been&#xD;
    replaced by the service interface ShipStatusService (modelled as a «ServiceInterface» UML class). The service interface&#xD;
    contains a part shipper that denotes the role which has the provider interface type ShippingStatus. Furthermore, the&#xD;
    service interface class also realizes the ShippingStatus interface. Note also, that in the case of using the service&#xD;
    interface based approach, the corresponding port on the participant Shipper has been typed by the service interface&#xD;
    ShipStatusService instead of the provider interface ShippingStatus.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Here we could also have added the receiver role to the service interface in order to completely resemble the service&#xD;
    contract, but this is not really needed in this case since we do not define any consumer interface type. A service&#xD;
    contract however needs to have a generic consumer role to be complete, even though we do not have a consumer interface,&#xD;
    to ensure that the roles of the two interacting participants can be linked using role binding in a services&#xD;
    architecture.&lt;br />&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/dna_simple_interface_figure_5_example.png&quot; width=&quot;454&quot; height=&quot;330&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Figure 5:&lt;/strong> Specification of the Ship Status service (here named ShipStatusService) using the service&#xD;
    interface based approach&#xD;
&lt;/p>&#xD;
From the examples above we see that modelling simple interfaces as either a service contract or a service interface&#xD;
requires additional modelling effort. Thus, the simple interface based approach is recommended for modelling one-way&#xD;
service interactions, since the addition of a service contract or a service interface is unnecessary. However, if you want&#xD;
to illustrate the particular use of a one-way interaction service in a services architecture, you will need to add a&#xD;
service contract modelled as a UML collaboration. As explained above, this fortunately does not affect any of the other&#xD;
elements already specified using the simple interface based approach.</mainDescription>
</org.eclipse.epf.uma:ContentDescription>

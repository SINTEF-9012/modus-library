<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-eYDL7fUm0GMKbszvGjNfXA" name="new_toolmentor,_udUQIJ2OEeCZu7rk2fFONg" guid="-eYDL7fUm0GMKbszvGjNfXA" changeDate="2011-06-23T14:15:06.463+0200">
  <mainDescription>For this tutorial we use MagicDraw version 16.6 as the service modelling tool. &#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Once MagicDraw is started, create a new project by choosing ‘File -&amp;gt; New Project’ and select ‘Cameo SOA+ Project’&#xD;
    (Figure 1).&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/1.png&quot; width=&quot;600&quot; height=&quot;503&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Before being able to create any SoaML diagrams, however, you need to switch to the SOA Engineer perspective. This is&#xD;
    done by going ‘Options -&amp;gt; Perspectives -&amp;gt; Perspectives’ (Figure&amp;nbsp;2 and Figure 3).&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/2.png&quot; width=&quot;424&quot; height=&quot;400&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure&amp;nbsp;2 - Remember to switch to the 'SOA Engineer'&#xD;
    perspective.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/3.png&quot; width=&quot;600&quot; height=&quot;390&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure&amp;nbsp;3 - Different SOA diagrams available in&#xD;
    MagicDraw.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Now we are ready to start modelling our services. For this example we will create a simple service that performs some&#xD;
    mathematical computations, and to perform this it will need to get information from a weather service as well.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Which parts and to what degree of SoaML that we suggest using in SiSaS has not yet been determined, as it is ongoing&#xD;
    work in work package 5 concerning methodology. The goal, however, is to be light-weight and catered to scientific&#xD;
    domains which may or may not include professional programmers. Due to this uncertainty we will only use the Service&#xD;
    Architecture and Service Structure (contracts) diagrams in this tutorial.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Figure&amp;nbsp;4 shows the Service Architecture diagram that contains participants and services, where a service defines a&#xD;
    Service Contract between Participants. In the figure we have the User who consumes the CalculationService provided by&#xD;
    the ModelicaServer, while the ModelicaServer consumes the WeatherService provided by the WeatherProvider.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Figure&amp;nbsp;5 and Figure&amp;nbsp;6 detail the Service Contracts in the Service Architecture. Each Service Contract&#xD;
    contains the Provider and Consumer interfaces that represents the roles played by the participants in the Service&#xD;
    Architecture.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/4.jpg&quot; width=&quot;600&quot; height=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure 4&amp;nbsp;- Service Architecture diagram for the math&#xD;
    service.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/5.jpg&quot; width=&quot;600&quot; height=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure&amp;nbsp;5 - Service Contract for the&#xD;
    CalculationService.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/6.jpg&quot; width=&quot;600&quot; height=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure&amp;nbsp;6 - Service Contract for the WeatherService.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The next step is to export the models into the Eclipse EMF format for use by the DiVA Studio. But first we start&#xD;
    Eclipse and create a new project, which is done by selecting ‘File -&amp;gt; New -&amp;gt; Dynamic Web Project’. This presents&#xD;
    a window where you need to give the project a name (we chose “SiSaS tutorial” in this example) and choose an&#xD;
    application server. See Figure 7. Now we can export the models from MagicDraw by selecting ‘File -&amp;gt; Export To (you&#xD;
    might need to expand to menu to actually see this option) -&amp;gt; EMF UML2 (v2.x) XMI’. Then choose to export the files&#xD;
    somewhere in your project folder, for example ‘/models/MagicDraw’. Refresh the project and the files will become&#xD;
    visible, see Figure 9. As can be seen, MagicDraw alot of extra profiles for the model, but the model itself is&#xD;
    contained within ‘SiSaSTutorial.uml’.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/7.png&quot; width=&quot;561&quot; height=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure7 - Creating a Dynamic Web Project&lt;/b>&lt;/font>&lt;/font>&lt;font&#xD;
    face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/8.png&quot; width=&quot;476&quot; height=&quot;542&quot; />&lt;br />&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure&amp;nbsp;8 - Exporting from MagicDraw to Eclipse.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br />&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/9.png&quot; width=&quot;367&quot; height=&quot;437&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure&amp;nbsp;9 - The export MagicDraw models.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Next, we copy the transformation scripts into the project. We create a new folder called ‘transformations’ and copy the&#xD;
    transformation scripts that were bundled with the SiSaS Studio examples into it. (NOTE: These scripts will be integated&#xD;
    into the SiSaS Studio in a future version.) There are two different scripts available; one that transforms the service&#xD;
    models into a WSDL descriptions and another that transforms them into annotated Java. In this example we apply the&#xD;
    latter. To set the output path of the script, right-click the file in the project view (‘SoaML2JEE.m2t’ in this&#xD;
    example) and choose ‘Preferences’. Under the ‘MOFScript properties’ menu we can set the output path as shown in Figure&#xD;
    10.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/10.png&quot; width=&quot;600&quot; height=&quot;310&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure 10 - Setting the output path of the transformation&#xD;
    script.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    To perform the transformation right-click SoaML2JEE -&amp;gt; ‘MOFScript -&amp;gt; Execute’ and select the ‘SiSaSTutorial.uml’&#xD;
    file. The ‘Console’ tab will show the output of the script, which creates two java files – one for each service – when&#xD;
    executed, see Figure 11. What happens is that the script searches the model for any “Provider” stereotype and creates a&#xD;
    java class when it does (how the script works may change in the future, as it is in particular dependent on the&#xD;
    modelling notation).&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    ‘MathProvider.java’ is shown in Figure 12. We will provide an implementation for this later in the tutorial, but first&#xD;
    we create a Modelica model.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/11.png&quot; width=&quot;600&quot; height=&quot;251&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure 11 - The output of the transformation script.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/12.png&quot; width=&quot;429&quot; height=&quot;306&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure 12 - Generated java file.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-TOP: 0.21cm&quot; align=&quot;center&quot; />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>

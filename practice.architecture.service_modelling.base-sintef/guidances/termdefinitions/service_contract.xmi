<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-dmdY_yEiLFA24H9B7u1yIQ" name="new_term_definition,_nJhxIJzYEeCjAYLMIp9ZDA" guid="-dmdY_yEiLFA24H9B7u1yIQ">
  <mainDescription>&lt;p>&#xD;
    A ServiceContract is the formalization of a binding exchange of information, goods, or obligations between parties&#xD;
    defining a service.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A ServiceContract is the specification of the agreement between providers and consumers of a service as to what&#xD;
    information, products, assets, value and obligations will flow between the providers and consumers of that service – it&#xD;
    specifies the service without regard for realization, capabilities or implementation. A ServiceContract does not&#xD;
    require the specification of who, how or why any party will fulfill their obligations under that ServiceContract, thus&#xD;
    providing for the loose coupling of the SOA paradigm. In most cases a ServiceContract will specify two roles (provider&#xD;
    and consumer) – but other service roles may be specified as well. The ServiceContract may also own a behavior that&#xD;
    specifies the sequencing of the exchanges between the parties as well as the resulting state and delivery of the&#xD;
    capability. The owned behavior is the choreography of the service and may use any of the standard UML behaviors such as&#xD;
    an interaction, timing, state or activity diagram.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Enterprise services are frequently complex and nested (e.g., placing an order within the context of a long-term&#xD;
    contract). A ServiceContract may use other nested ServiceContracts representing nested services as a CollaborationUse.&#xD;
    Such a nested service is performed and completed within the context of the larger grained service that uses it. A&#xD;
    ServiceContract using nested ServiceContracts is called a compound service contract.&lt;br />&#xD;
    One ServiceContract may specialize another service contract using UML generalization. A specialized contract must&#xD;
    comply with the more general contract but may restrict the behavior and/or operations used. A specialized contract may&#xD;
    be used as a general contract or as a specific agreement between specific parties for their use of that service.&lt;br />&#xD;
    A ServicesContract is used to model an agreement between two or more parties and may constrain the expected real world&#xD;
    effects of a service. ServiceContracts can cover requirements, service interactions, quality of service agreements,&#xD;
    interface and choreography agreements, and commercial agreements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Each service role in a service contract has a type, which must be a ServiceInterface or UML Interface or Class&#xD;
    stereotyped as «Provider» or «Consumer». The ServiceContract is a binding agreement on entities that implement the&#xD;
    service type. That is, any party that “plays a role” in a Service Contract is bound by the service agreement, exchange&#xD;
    patterns, behavior and MessageType formats. Note that there are various ways to bind to or fulfill such an agreement,&#xD;
    but compliance with the agreement is ultimately required to participate in the service. Due to the binding agreement,&#xD;
    where the types of a service contract are used in a Service or Request no collaboration use is required.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Service contract is at the middle of the SoaML set of SOA architecture constructs. The highest level is described&#xD;
    as a services architectures (at the community and participant levels) – were participants are working together using&#xD;
    services. These services are then described by a ServiceContract. The details of that contract, as it relates to each&#xD;
    participant, uses an Interface which in tern has operations that use the message data types that flow between&#xD;
    participants. The service contract provides an explicit but high-level view of the service where the underlying details&#xD;
    mat be hidden or exposed, based on the needs of stakeholders.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A ServiceContract can be used in support of multiple architectural goals, including:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        As part of the Service Oriented Architecture (SOA), including services architectures, participant architectures,&#xD;
        information models and business processes.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Multiple views of complex systems &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                A way of abstracting different aspects of services solutions&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Convey information to stakeholders and users of those services&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Highlight different subject areas of interest or concern&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Formalizing requirements and requirement fulfillment &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Without constraining the architecture for how those requirements might be realized&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Allowing for separation of concerns.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Bridge between business process models and SOA solutions &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Separates the what from the how&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Formal link between service implementation and the contracts it fulfills with more semantics than just&#xD;
                traceability&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Defining and using patterns of services&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Modeling the requirements for a service &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Modeling the roles the consumers and providers play, the interfaces they must provide and/or require, and&#xD;
                behavioral constraints on the protocol for using the service.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                The foundation for formal Service Level Agreements&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Modeling the requirements for a collection of services or service participants &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Specifying what roles other service participants are expected to play and their interaction choreography in&#xD;
                order to achieve some desired result including the implementation of a composite service&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Defining the choreography for a business process&#xD;
    &lt;/li>&#xD;
&lt;/ol></mainDescription>
</org.eclipse.epf.uma:ContentDescription>

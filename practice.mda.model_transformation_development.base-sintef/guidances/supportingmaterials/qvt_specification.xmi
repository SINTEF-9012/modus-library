<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-m1IzqeaRjtIzKzhfYwBurw" name="new_supporting_material,_xWM5kNuCEd-pTLmXJigeaQ" guid="-m1IzqeaRjtIzKzhfYwBurw">
  <mainDescription>&lt;h3 class=&quot;underlined_5&quot;>&#xD;
    MOF Query, Views and Transformations (QVT)&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Object Management Group (OMG) has defined a standard for model transformations in Model Driven Architecture (MDA).&#xD;
    This standard is called Query, Views, and Transformation (QVT). Queries are performed on input models to find specific&#xD;
    elements or transformation. An example of a query could be to find all classes in a model. Views are models derived&#xD;
    from other models. The result of the query is a kind of view. Transformations are, as explained above, the process of&#xD;
    transforming an input model to an output model. A more detailed description of QVT can be found at &lt;a&#xD;
    href=&quot;http://umt-qvt.sourceforge.net/&quot;>&lt;u>&lt;font color=&quot;#0066cc&quot;>http://umt-qvt.sourceforge.net/&lt;/font>&lt;/u>&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Queries are performed on input models for finding specific elements or information. Example: Return all classes. Views&#xD;
    are models derived from other models. The result of a query is a kind of view. Transformations takes a model as input&#xD;
    and creates a new model Example: PIM-&amp;gt;PSM. Mappings are defined in Relations language or Core language. Uses Queries&#xD;
    and Views.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To define a transformation the abstract syntax must be defined as a metamodel in MOF. Concrete syntax expressed as text&#xD;
    (program code) or models. Transformations are defined in two variations: Declarative or imperative.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/technologies_files/transformations_qvt.gif&quot; />&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Relations &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Declarative specification of the mapping between MOF models&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Equivalent with Java code (high-level)&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Relations to Core transformation &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Equivalent with compiling Java code into byte code&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Core &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Equivalent with Java byte code (low-level)&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Operational mappings &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Standard language for defining Relations (or Core) in an imperative way&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Black box &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Offers the possibility to plug-in code from any programming language with a MOF binding&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Given a defined metamodel for source and target, metamodels must be well-defined according to MOF (models on level M2).&#xD;
    One can define transformations between these two worlds in a general, standardized manner. The transformation can be&#xD;
    used on all instances of the source metamodel. The result will be an instance of the target metamodel.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>

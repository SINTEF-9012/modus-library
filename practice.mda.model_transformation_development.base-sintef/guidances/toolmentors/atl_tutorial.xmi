<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-eIUo5O1j91thd92IyvbegQ" name="new_toolmentor,_eoUBoNuDEd-pTLmXJigeaQ" guid="-eIUo5O1j91thd92IyvbegQ">
  <mainDescription>&lt;h2 class=&quot;underlined_10&quot;>&#xD;
    Tutorial #1: ATL - Book2Publish&#xD;
&lt;/h2>&#xD;
&lt;div class=&quot;section&quot;>&#xD;
    &lt;p>&#xD;
        This tutorial describes how to develop the &lt;a&#xD;
        href=&quot;http://www.modelbased.net/mdi/transformations/examples.html#ATL%20-%20Book2Publish&quot;>&lt;u>&lt;font&#xD;
        color=&quot;#0066cc&quot;>Book2Publish example&lt;/font>&lt;/u>&lt;/a> using Rational Software Modeler (RSM) and ATL.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1001A&quot; name=&quot;N1001A&quot;>&lt;/a>&lt;a id=&quot;Tutorial+steps&quot; name=&quot;Tutorial+steps&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Tutorial steps&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_tutorial_steps.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10022&quot; name=&quot;N10022&quot;>&lt;/a>&lt;a id=&quot;Step+1:+Create+an+ATL+project+Book2Publication&quot;&#xD;
    name=&quot;Step+1:+Create+an+ATL+project+Book2Publication&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 1: Create an ATL project Book2Publication&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_create_an_atl_project.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1002A&quot; name=&quot;N1002A&quot;>&lt;/a>&lt;a id=&quot;Step+2:+Create+the+Book.emx+metamodel+(UML+model)&quot;&#xD;
    name=&quot;Step+2:+Create+the+Book.emx+metamodel+(UML+model)&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 2: Create the Book.emx metamodel (UML model)&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_create_the_book_metamodel_a.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_create_the_book_metamodel_b.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_create_the_book_metamodel_c.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1003A&quot; name=&quot;N1003A&quot;>&lt;/a>&lt;a id=&quot;Step+3:+Export+and+import+the+Book.emx+metamodel+as+Book.ecore&quot;&#xD;
    name=&quot;Step+3:+Export+and+import+the+Book.emx+metamodel+as+Book.ecore&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 3: Export and import the Book.emx metamodel as Book.ecore&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step3a.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step3b.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step3c.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step3d.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step3e.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step3f.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10056&quot; name=&quot;N10056&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;Steps+4+&amp;amp;+5:+Create+the+Publication.emx+metamodel+(UML+model)+&amp;amp;+Export+and+import+the+Publication.emx+metamodel+as+Publication.ecore&quot;&#xD;
     name=&quot;Steps+4+&amp;amp;+5:+Create+the+Publication.emx+metamodel+(UML+model)+&amp;amp;+Export+and+import+the+Publication.emx+metamodel+as+Publication.ecore&quot;>&#xD;
    &lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Steps 4 &amp;amp; 5: Create the Publication.emx metamodel (UML model) &amp;amp; Export and import the Publication.emx&#xD;
        metamodel as Publication.ecore&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_steps45.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1005E&quot; name=&quot;N1005E&quot;>&lt;/a>&lt;a id=&quot;Step+6:+Create+an+ATL+file+Book2Publication.atl&quot;&#xD;
    name=&quot;Step+6:+Create+an+ATL+file+Book2Publication.atl&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 6: Create an ATL file Book2Publication.atl&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step6a.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step6b.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step6c.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1006E&quot; name=&quot;N1006E&quot;>&lt;/a>&lt;a id=&quot;Step+7:+Write+the+ATL+transformation&quot;&#xD;
    name=&quot;Step+7:+Write+the+ATL+transformation&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 7: Write the ATL transformation&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step7.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10076&quot; name=&quot;N10076&quot;>&lt;/a>&lt;a id=&quot;Step+8:+Create+a+source+model+theBooks.ecore+containing+book+instances&quot;&#xD;
    name=&quot;Step+8:+Create+a+source+model+theBooks.ecore+containing+book+instances&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 8: Create a source model theBooks.ecore containing book instances&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step8.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1007E&quot; name=&quot;N1007E&quot;>&lt;/a>&lt;a id=&quot;Step+9:+Configure+the+ATL+transformation&quot;&#xD;
    name=&quot;Step+9:+Configure+the+ATL+transformation&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 9: Configure the ATL transformation&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step9a.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step9b.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step9c.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1008E&quot; name=&quot;N1008E&quot;>&lt;/a>&lt;a id=&quot;Step+10:+Run+the+ATL+transformation&quot;&#xD;
    name=&quot;Step+10:+Run+the+ATL+transformation&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 10: Run the ATL transformation&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step10a.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut1_step10b.png&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/div>&#xD;
&lt;a id=&quot;N1009A&quot; name=&quot;N1009A&quot;>&lt;/a>&lt;a id=&quot;Tutorial+#2:+ATL+-+PIM4SOA+to+XSD&quot; name=&quot;Tutorial+#2:+ATL+-+PIM4SOA+to+XSD&quot;>&lt;/a> &#xD;
&lt;h2 class=&quot;underlined_10&quot;>&#xD;
    Tutorial #2: ATL - PIM4SOA to XSD&#xD;
&lt;/h2>&#xD;
&lt;div class=&quot;section&quot;>&#xD;
    &lt;a id=&quot;N1009E&quot; name=&quot;N1009E&quot;>&lt;/a>&lt;a id=&quot;0.+Tutorial+overview&quot; name=&quot;0.+Tutorial+overview&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        0. Tutorial overview&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        In the scope of model-driven engineering, model transformation aims to provide a mean to specify the way to produce&#xD;
        target models from a number of source models. In our example we choose to use a single input model.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        PIM4SOA to XSD transformation include mapping the elements of the pim4soa meta-model to some elements of XSD&#xD;
        meta-model. When the elements are mapped, artifacts from a model that conforms to the pim4soa metamodel( used as an&#xD;
        input) are transformed to artifacts in another model that conforms to the XSD metamodel.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut2_0_overview.gif&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N100AA&quot; name=&quot;N100AA&quot;>&lt;/a>&lt;a id=&quot;1.+PIM4SOA+information+metamodel+(source+metamodel)&quot;&#xD;
    name=&quot;1.+PIM4SOA+information+metamodel+(source+metamodel)&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        1. PIM4SOA information metamodel (source metamodel)&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut2_1_information.gif&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        PIM4SOA meta-model describes the concepts needed to model information at the platform indipendent model. In our&#xD;
        transformation we are going to use only a subpart of the elements from this meta-model. In here we describe the&#xD;
        elements that are used in the mapping.&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            &lt;strong>ItemTypes&lt;/strong> are the basic building block and they represend simple types like string, integer or&#xD;
            boolean&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            An &lt;strong>Association&lt;/strong> represent the association between two entities and is used to describe complex&#xD;
            types. Container contained and cardinality are the attributes neccessary to related elements.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            A &lt;strong>Document&lt;/strong> represents an object with a specific structure and composed by entities.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            An &lt;strong>Entity&lt;/strong> represents a structure element of information&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;a id=&quot;N100C8&quot; name=&quot;N100C8&quot;>&lt;/a>&lt;a id=&quot;2.+Simple+XSD+metamodel+(target+metamodel)&quot;&#xD;
    name=&quot;2.+Simple+XSD+metamodel+(target+metamodel)&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        2. Simple XSD metamodel (target metamodel)&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut2_2_xsd.gif&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        This is a conceptual and simplified XSD metamodel that is used only as an example. The elements of this meta-model&#xD;
        that will be used in the mapping are the XSDSchema, which includes XSDComplexTypes that are refered as complex&#xD;
        objects and XSDSimple types that are basic types. XSDElements and XSDAttributes are included in XSDComplexTypes.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N100D2&quot; name=&quot;N100D2&quot;>&lt;/a>&lt;a id=&quot;3.+Mapping&quot; name=&quot;3.+Mapping&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        3. Mapping&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut2_3_mapping.jpg&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        This figure shows the mapping:&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            Document from the PIM4SOA metamodel maps to XSDSchema.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Entity from the PIM4SOA metamodel maps to XSDComplexType.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Attribute from the PIM4SOA metamodel maps to XSDAttribute.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Association from the PIM4SOA metamodel maps to XSDElement.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            ItemType from the PIM4SOA metamodel maps to XSDSimpleType.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;a id=&quot;N100E7&quot; name=&quot;N100E7&quot;>&lt;/a>&lt;a id=&quot;4.+The+input+model&quot; name=&quot;4.+The+input+model&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        4. The input model&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut2_4_input.jpg&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        This is a simple Purchase Order modeled in a PIM4SOA editor. The editor is generated with GMF.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        In the model we can find a document order, three entities orderHeader, productInfo and productRecord, respectively&#xD;
        with their attributes, three associations and two itemtypes. This artifacts will be transformed into XSDSchema&#xD;
        artifacts as described in the mapping.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N100F3&quot; name=&quot;N100F3&quot;>&lt;/a>&lt;a id=&quot;5.+Create+an+ATL+project&quot; name=&quot;5.+Create+an+ATL+project&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        5. Create an ATL project&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut2_5_atl_project.jpg&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Before creating a new ATL project make sure to be in the ATL prospective.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Create the Atl project and than create two folders into it. The folders could be named for metamodels and models,&#xD;
        because PIM4SOA and XSDSchema metamodels will be placed in the metamodels folder, while the input model and the&#xD;
        generated one will be placed in the models folder.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N100FF&quot; name=&quot;N100FF&quot;>&lt;/a>&lt;a id=&quot;6.+Models+and+metamodels&quot; name=&quot;6.+Models+and+metamodels&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        6. Models and metamodels&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        Create:&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            Metamodel for PIM4SOA and XSDSchema using the ecore example diagram&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            the input Purchase Order model using the PIM4SOA_INFO diagram example from GMF&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;p>&#xD;
        If already created import the input models and metamodels to the specified folders&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut2_6_models_metamodels.jpg&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10110&quot; name=&quot;N10110&quot;>&lt;/a>&lt;a id=&quot;7.+Create+an+ATL+file&quot; name=&quot;7.+Create+an+ATL+file&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        7. Create an ATL file&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        In this part we create an Atl file that will contain the neccessary Atl code for transforming the Purchase Order&#xD;
        from a PIM4SOA model into a XSDSchema model.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The model and metamodel specifications required from the ATL File wizard are only referances. A path to the actuall&#xD;
        file must be given to these references before the transformation is run.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The ATL file created include has the specifications that we entered in the wizard as the header. The header section&#xD;
        defines the name of the transformation module and the name of the variables corresponding to the source and target&#xD;
        models.It also encodes the execution mode of the module.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut2_7_atl_file.jpg&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1011E&quot; name=&quot;N1011E&quot;>&lt;/a>&lt;a id=&quot;8.+ATL+rules+and+helpers&quot; name=&quot;8.+ATL+rules+and+helpers&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        8. ATL rules and helpers&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        In Atl there exist two kind of rules: the matched and called rules. In these example we are using only matched&#xD;
        rules. Matched rules constitute the core of an ATL transformation since they make it possible to specify for which&#xD;
        kind of source element targets elements must be generated and the way the generated target elements have to be&#xD;
        initialized.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The called rules provide ATL developers with convenient imperative programming facilities. Called rules can be seen&#xD;
        as a particular type of helpers: they have to be explicitly called to be executed and they can accept parameters.&#xD;
        However, as opposed to helpers, called rules can generate target model elements as matched rules do. A called rule&#xD;
        has to be called from an imperative code section, either from a match rule or another called rule.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        ATL helpers can be viewed as the ATL equivalent to Java methods. They make it possible to define factorized ATL&#xD;
        code that can be called from different points of an ATL transformation.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10128&quot; name=&quot;N10128&quot;>&lt;/a>&lt;a id=&quot;Document2Schema&quot; name=&quot;Document2Schema&quot;>&lt;/a> &#xD;
    &lt;h4>&#xD;
        Document2Schema&#xD;
    &lt;/h4>&#xD;
    &lt;p>&#xD;
        The first rule shown transforms a Document element into a Schema element. In these cases the schema takes the&#xD;
        document name and the targetNamespace is set to http://www.w3.org/2001/XMLSchema. We also have to make sure that&#xD;
        the Entity elements from the PIM4SOA model is put into the collection xsd_complexType, and that the ItemType&#xD;
        elements that are not Entity elements are put into the xsd_simpleType collection.&#xD;
    &lt;/p>&#xD;
    &lt;div&#xD;
    style=&quot;BORDER-BOTTOM: 1px solid; BORDER-LEFT: 1px solid; PADDING-BOTTOM: 1px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; PADDING-TOP: 1px&quot;>&#xD;
        rule Document2Schema{&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; from&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; doc : PIM4SOA ! Document&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; to&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; schema : XSD!XSDSchema(&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document &amp;lt;- doc.name,&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; targetNameSpace &amp;lt;-&#xD;
        'http://www.w3.org/2001/XMLSchema',&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xsd_complexType &amp;lt;-&#xD;
        Set{PIM4SOA!Entity.allInstances()},&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xsd_simpleType &amp;lt;-&#xD;
        Set{PIM4SOA!ItemType.allInstances() -&amp;gt; select(a|a.oclIsKindOf(PIM4SOA!Entity) = false)})&lt;br />&#xD;
        }&#xD;
    &lt;/div>&#xD;
    &lt;a id=&quot;N10143&quot; name=&quot;N10143&quot;>&lt;/a>&lt;a id=&quot;Entity2ComplexType&quot; name=&quot;Entity2ComplexType&quot;>&lt;/a> &#xD;
    &lt;h4>&#xD;
        Entity2ComplexType&#xD;
    &lt;/h4>&#xD;
    &lt;p>&#xD;
        The entity to complex type rule states that an entity is transformed into a complex type that will take the name of&#xD;
        the entity. Every attribute of the entity is transformed into an xsd_attribute and the associations from this&#xD;
        entity to other entities are transformed into xsd elements. In these cases we can se the use of a helper context&#xD;
        that is called from a rule to retrieve all the association coming from this entity. The helper context retrieves&#xD;
        all instances of an association and returns those that have the source entity as contained reference.&#xD;
    &lt;/p>&#xD;
    &lt;div&#xD;
    style=&quot;BORDER-BOTTOM: 1px solid; BORDER-LEFT: 1px solid; PADDING-BOTTOM: 1px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; PADDING-TOP: 1px&quot;>&#xD;
        helper context PIM4SOA ! Entity def : getAssociations():&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; PIM4SOA ! Entity = PIM4SOA ! Association.allInstances()&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; -&amp;gt; select(assoc | assoc.contained = self);&lt;br />&#xD;
        &lt;br />&#xD;
        rule Entity2ComplexType{&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; from&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ent : PIM4SOA!Entity&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; to&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ct : XSD ! XSDComplexType(&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; name &amp;lt;- ent.name,&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xsd_attribute &amp;lt;-&#xD;
        Sequence{ent.attribute},&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xsd_element &amp;lt;- ent.getAssociations())&lt;br />&#xD;
        }&#xD;
    &lt;/div>&#xD;
    &lt;a id=&quot;N10163&quot; name=&quot;N10163&quot;>&lt;/a>&lt;a id=&quot;Association2Element&quot; name=&quot;Association2Element&quot;>&lt;/a> &#xD;
    &lt;h4>&#xD;
        Association2Element&#xD;
    &lt;/h4>&#xD;
    &lt;p>&#xD;
        This rule maps associations between entities, to elements that are contained by the complexType that is referenced&#xD;
        by the container reference of the association. The associations that are not between two entities are not mapped,&#xD;
        as we do not need any links between the XSDSchema and the elements that comprises it. These relationships are&#xD;
        already specified by the xsd_element aggregation of the metamodel.&#xD;
    &lt;/p>&#xD;
    &lt;div&#xD;
    style=&quot;BORDER-BOTTOM: 1px solid; BORDER-LEFT: 1px solid; PADDING-BOTTOM: 1px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; PADDING-TOP: 1px&quot;>&#xD;
        rule Association2Element{&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; from&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; assoc : PIM4SOA !&#xD;
        Association(assoc.contained.oclIsKindOf(PIM4SOA!Entity))&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; to&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; el : XSD ! XSDElement(&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; name &amp;lt;- assoc.name,&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type &amp;lt;- assoc.container)&lt;br />&#xD;
        }&#xD;
    &lt;/div>&#xD;
    &lt;a id=&quot;N1017A&quot; name=&quot;N1017A&quot;>&lt;/a>&lt;a id=&quot;Attribute2Attribute&quot; name=&quot;Attribute2Attribute&quot;>&lt;/a> &#xD;
    &lt;h4>&#xD;
        Attribute2Attribute&#xD;
    &lt;/h4>&#xD;
    &lt;p>&#xD;
        This rule maps the attributes of the source model to attributes in the target model.&#xD;
    &lt;/p>&#xD;
    &lt;div&#xD;
    style=&quot;BORDER-BOTTOM: 1px solid; BORDER-LEFT: 1px solid; PADDING-BOTTOM: 1px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; PADDING-TOP: 1px&quot;>&#xD;
        rule Attribute2Attribute{&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; from&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; att : PIM4SOA!Attribute&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; to&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; el : XSD!XSDAttribute(&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; name &amp;lt;- att.name,&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type &amp;lt;- att.type )&lt;br />&#xD;
        }&#xD;
    &lt;/div>&#xD;
    &lt;a id=&quot;N10191&quot; name=&quot;N10191&quot;>&lt;/a>&lt;a id=&quot;ItemType2SimpleType&quot; name=&quot;ItemType2SimpleType&quot;>&lt;/a> &#xD;
    &lt;h4>&#xD;
        ItemType2SimpleType&#xD;
    &lt;/h4>&#xD;
    &lt;p>&#xD;
        Since an ItemType is a generalization of an Entity in these rules we needed some constrains in order to transform&#xD;
        only the ItemTypes and not the Entities. Atl makes use of OCL and provides some operations useful in the&#xD;
        constraining process. In this case a oclIsKindOf operation is used and it returns a boolean value stating whether&#xD;
        it is either an instance of an Entity or of one of its subtypes.&#xD;
    &lt;/p>&#xD;
    &lt;div&#xD;
    style=&quot;BORDER-BOTTOM: 1px solid; BORDER-LEFT: 1px solid; PADDING-BOTTOM: 1px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; PADDING-TOP: 1px&quot;>&#xD;
        rule ItemType2SimpleType{&lt;br />&#xD;
        from it : PIM4SOA!ItemType(&lt;br />&#xD;
        -- transform only ItemTypes and not Entities&lt;br />&#xD;
        it.oclIsKindOf(PIM4SOA!Entity)= false&lt;br />&#xD;
        )&lt;br />&#xD;
        &lt;br />&#xD;
        to st : XSD!XSDSimpleType(&lt;br />&#xD;
        name &amp;lt;- it.name)&lt;br />&#xD;
        }&#xD;
    &lt;/div>&#xD;
    &lt;a id=&quot;N101A9&quot; name=&quot;N101A9&quot;>&lt;/a>&lt;a id=&quot;9.+Run+the+file&quot; name=&quot;9.+Run+the+file&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        9. Run the file&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        On the run configuration window create a new Atl Transformation(dubble click in ATL Transformation) and set the&#xD;
        project name to be the atl project you are working on and the Atl file is the Atl file included in this project.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut2_step_9a.jpg&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        On the model choice specify the source and target models and metamodels. You need to set a path for these&#xD;
        specifications and remember:&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            IN -&amp;gt; input model(*.pim4soa)&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            PIM4SOA -&amp;gt; source metamodel(PIM4SOA Info.ecore)&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            OUT -&amp;gt; output model(choose your file name)&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            XSDSchema -&amp;gt; target metamodel(XSD metamodel.ecore)&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/tutorials_files/transformations_tut2_step_9b.jpg&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N101C2&quot; name=&quot;N101C2&quot;>&lt;/a>&lt;a id=&quot;10.+The+result&quot; name=&quot;10.+The+result&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        10. The result&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        This is the result of running the model transformation with the input model.&#xD;
    &lt;/p>&#xD;
    &lt;div&#xD;
    style=&quot;BORDER-BOTTOM: 1px solid; BORDER-LEFT: 1px solid; PADDING-BOTTOM: 1px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; PADDING-TOP: 1px&quot;>&#xD;
        &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt;&lt;br />&#xD;
        &amp;lt;xsdMetamodel:XSDSchema xmi:version=&quot;2.0&quot; xmlns:xmi=&quot;http://www.omg.org/XMI&quot;&#xD;
        xmlns:xsdMetamodel=&quot;http:///XSDMetamodel/model&quot; document=&quot;Order&quot;&#xD;
        targetNameSpace=&quot;http://www.w3.org/2001/XMLSchema&quot;&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_simpleType name=&quot;String&quot;/&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_simpleType name=&quot;Integer&quot;/&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_complexType name=&quot;OrderHeader&quot;&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_attribute name=&quot;orderID&quot; type=&quot;//@xsd_simpleType.0&quot;/&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_attribute name=&quot;issueDate&quot; type=&quot;//@xsd_simpleType.0&quot;/&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/xsd_complexType&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_complexType name=&quot;ProductInformation&quot;&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_element name=&quot;record&quot; type=&quot;//@xsd_complexType.2&quot;/&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_attribute name=&quot;name&quot; type=&quot;//@xsd_simpleType.0&quot;/&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_attribute name=&quot;code&quot; type=&quot;//@xsd_simpleType.0&quot;/&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/xsd_complexType&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_complexType name=&quot;ProductRecord&quot;&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_attribute name=&quot;supplierProductCode&quot;&#xD;
        type=&quot;//@xsd_simpleType.0&quot;/&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_attribute name=&quot;buyerProductCode&quot;&#xD;
        type=&quot;//@xsd_simpleType.0&quot;/&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_attribute name=&quot;quantity&quot; type=&quot;//@xsd_simpleType.1&quot;/&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_attribute name=&quot;description&quot;&#xD;
        type=&quot;//@xsd_simpleType.0&quot;/&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_attribute name=&quot;model&quot; type=&quot;//@xsd_simpleType.0&quot;/&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_attribute name=&quot;productPrice&quot;&#xD;
        type=&quot;//@xsd_simpleType.1&quot;/&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;xsd_attribute name=&quot;comments&quot; type=&quot;//@xsd_simpleType.0&quot;/&amp;gt;&lt;br />&#xD;
        &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/xsd_complexType&amp;gt;&lt;br />&#xD;
        &amp;lt;/xsdMetamodel:XSDSchema&amp;gt;&#xD;
    &lt;/div>&#xD;
&lt;/div></mainDescription>
</org.eclipse.epf.uma:ContentDescription>

<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-Pr-G91nyFFp6rTkr4jv6FQ" name="new_supporting_material,_Zdx3MFYpEeCmC7fuNTHhhQ" guid="-Pr-G91nyFFp6rTkr4jv6FQ">
  <mainDescription>&lt;h2 class=&quot;underlined_10&quot;>&#xD;
    Model mapping and transformation&#xD;
&lt;/h2>&#xD;
&lt;div class=&quot;section&quot;>&#xD;
    &lt;p>&#xD;
        An important aspect of Model Driven Development (MDD) is model transformations, which allows automatically&#xD;
        transformations of models. A model transformation is a transformation of one or more source models to one or more&#xD;
        target models, based on the meta models of each of these models. In other words the instances of one meta model is&#xD;
        transformed into instances of another meta model.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Such transformations are defined by mapping rules. Each mapping rule describes what one, or more elements in the&#xD;
        source model should be transformed to in the target model. When all mapping rules are applied, the mapping&#xD;
        describes the complete transformation from the source model to the target model.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Thus given a source model, and the metamodels of both the source and the target models, one can automatically&#xD;
        generate the target model by applying the correct mapping to the source model.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        A common use of transformations is the transformations of Platform Independent Model (PIM) to Platform Specific&#xD;
        Model(PSM), and PSM to code. The PIM should, as the name implies describe the system in a total platform&#xD;
        independent way. Thus, whether your system stores data in a database or not, or is implemented in C, C++ or Java is&#xD;
        in no interest here. The PIM simply captures what your system does, not how. After making a PIM of the system, one&#xD;
        should then make PSM’s for the different types of technologies used. The PSM should describe how the system is&#xD;
        implemented, using a specific technology. In other words, if your system is implemented using Java, WSDL, and BPEL,&#xD;
        you make one for each technology. When all the PSM’s are made, one should create mapping rules describing the&#xD;
        transformation from the PIM, to each of the PSM’s.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        As a last step, it’s now possible to describe mappings from each of the PSM’s to code. This code could be complete&#xD;
        code, but most times it would be more of a skeleton of the code, where parts of the code would have to be manually&#xD;
        entered.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1001E&quot; name=&quot;N1001E&quot;>&lt;/a>&lt;a id=&quot;Mapping&quot; name=&quot;Mapping&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Mapping&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        Mapping is performed by defining relations between two models. The relations can be 1-to-1, n-to-1, 1-to-n or&#xD;
        n-to-n. Mapping is performed in “design time”.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The mapping is defined with models one meta-level higher than the input and output of the transformation. The&#xD;
        mapping is used to perform transformation of instances of the mapped models. “The mapping describes the rules used&#xD;
        for the transformation”.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/guidelines_files/transformations_mapping1.gif&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        We can map between models that are on the “same” abstraction level illustrated with horizontal mapping, or we can&#xD;
        map between abstraction levels illustrated with vertical mapping in the figure below.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/transformations/guidelines_files/transformations_mapping2.gif&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10030&quot; name=&quot;N10030&quot;>&lt;/a>&lt;a id=&quot;Transformations&quot; name=&quot;Transformations&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Transformations&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        A transformations occur at &quot;run-time&quot; and takes input and produces output. A transformation is a one-way process&#xD;
        which transforms according to a predefined mapping. Two main categories of transformation:&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            Vertical transformation&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Horizontal transformation&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;p>&#xD;
        In a vertical transformation the source model has the same level of abstraction as target model. Not to be confused&#xD;
        with “meta-levels”. Examples of horizontal transformation:&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            Refactoring&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Merging&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;p>&#xD;
        In a horizontal transformation the source model is at a different level of abstraction than the target model.&#xD;
        Examples of vertical transformation:&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            Refinement (specialization) &#xD;
            &lt;ul>&#xD;
                &lt;li>&#xD;
                    PIM-&amp;gt;PSM transformations&#xD;
                &lt;/li>&#xD;
            &lt;/ul>&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Abstraction (generalization)&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/div></mainDescription>
</org.eclipse.epf.uma:ContentDescription>

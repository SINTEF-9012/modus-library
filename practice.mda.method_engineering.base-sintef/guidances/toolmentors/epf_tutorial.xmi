<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-OT5susgv-lXusxn07dlVfQ" name="new_toolmentor,_aIfK4NuEEd-pTLmXJigeaQ" guid="-OT5susgv-lXusxn07dlVfQ">
  <mainDescription>&lt;h2 class=&quot;underlined_10&quot;>&#xD;
    Tutorial #1: EPF - Requirements modelling&#xD;
&lt;/h2>&#xD;
&lt;div class=&quot;section&quot;>&#xD;
    &lt;p>&#xD;
        EPF is still a very young release but at the same time very promising. We have to wait until september for the&#xD;
        first official release. For EPF I made a tutorial that gives an overview on EPF and the tool implementing it that&#xD;
        is called EPF Composer. The first part of the tutorial guides the user step by step in creating method contents&#xD;
        like roles, tasks and work products. The second part is concerned with processes and here I was showing an example&#xD;
        how to extend the OpenUP process with some activities from &lt;a&#xD;
        href=&quot;http://modelbased.net/comet/requirements_modelling/index.html&quot;>&lt;u>&lt;font color=&quot;#0066cc&quot;>COMET requirements&#xD;
        modelling&lt;/font>&lt;/u>&lt;/a>.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1001A&quot; name=&quot;N1001A&quot;>&lt;/a>&lt;a id=&quot;COMET+requirements+modelling&quot; name=&quot;COMET+requirements+modelling&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        COMET requirements modelling&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        The Use Case Model describes the Product in terms of actors, use cases and scenario descriptions. The Use Case&#xD;
        Model consist of two main parts:&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            The System Boundary Model, which identifies the Product under consideration (area of concern) and describes the&#xD;
            Product boundaries as well as the main services offered by the Product.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            The Use Case Scenario model, which includes more detailed descriptions of the Product resulting from further&#xD;
            analysis using the common use case detailing technique, by diving into a use case discovering new use cases and&#xD;
            actors. Use case scenarios are also described in this work product.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;p>&#xD;
        In EPF Composer we are going to create a Requirement Model Library which is going to include the configuration and&#xD;
        the plug-in. As described before the method content are locatet in the plug-in and it they describe what is to be&#xD;
        produced, the necessary skills required and the step-by-step explanations describing how specific development goals&#xD;
        are achieved. These method content descriptions are independent of a development lifecycle. This lifecycle is&#xD;
        described in the process. Processes take the method content elements and relate them into semi-ordered sequences&#xD;
        that are customized to specific types of projects.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10027&quot; name=&quot;N10027&quot;>&lt;/a>&lt;a id=&quot;Step+1:+Create+method+content&quot; name=&quot;Step+1:+Create+method+content&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 1: Create method content&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_create_method_content_a.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        To create a method content for requirement modeling in Comet, we are not creating a method from scratch, but&#xD;
        extending the OpenUP/Basic iterative development process.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Before starting, an important issue in EMF Composer is the viewing perspective. EMF composer proposes two viewing&#xD;
        perspectives:&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            The Authoring Perspective provides views and functions to navigate and author method content and processes. You&#xD;
            must be in the Authoring Perspective to create or modify any element types. The Authoring Perspective contains&#xD;
            two Views: the Library View and the Configuration View.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            The Browsing Perspective allows you to preview and navigate through a Method Configuration without making any&#xD;
            changes&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;p>&#xD;
        Make sure that the right configuration is chosen in the drop down box above the library view.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The first step is to create a method plug-in which we are going to name for comet_requirement. Make sure that you&#xD;
        are in the Authoring Perspective.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The plug-must be included in the configuration and this is done by dubbel clicking on the configuration and&#xD;
        selecting the Plug-in and Package selection window above properties.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        In the new created plug-in you can find the method contents and the processes. In the method content choose Content&#xD;
        Packages and by right clicking on it choose to create a new content package. The new content packages we created in&#xD;
        this example is called use case models and from the figure you can see that it automatically includes roles, tasks,&#xD;
        work products and guidance.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_create_method_content_b.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10044&quot; name=&quot;N10044&quot;>&lt;/a>&lt;a id=&quot;Step+2:+Create+work+products&quot; name=&quot;Step+2:+Create+work+products&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 2: Create work products&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_create_work_product_a.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Work product is a general term for task inputs and outputs, descriptions of content elements that are used to&#xD;
        define anything used, produced, or modified by a task. The three types of work product are artifacts, deliverables&#xD;
        and outcomes. A short description for these work products will be that:&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            an artifact is a tangible work product that is consumed, produced, or modified by tasks&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            a deliverable is a collection of work products, usually artifacts&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            and an outcome is an intangible work product that may be a result or state&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;p>&#xD;
        In this example we are going to create an artifact (1).&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            (2) After a new artifact is selected by rightclicking on the work products under use case models, the artifact&#xD;
            editor is displayed. In the editor we can see the name and presentation name field, which can be seen as the&#xD;
            name of the file and the name in the publishing presentation. Here we can also see fields for purpose or&#xD;
            description.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            (3) In a browsing prespective this artifact is published as an html page. As seen in the picture in this&#xD;
            example we created two work products that are the System Boundary Model and the Use Case Scenario Model&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_create_work_product_b.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10060&quot; name=&quot;N10060&quot;>&lt;/a>&lt;a id=&quot;Step+3:+Create+roles&quot; name=&quot;Step+3:+Create+roles&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 3: Create roles&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_create_role_a.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            (1) A Role defines a set of related skills, competencies, and responsibilities of an individual or individuals.&#xD;
            Under roles in the use case models package we are going to create a role named ifi_student .&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            (2)In the same way as for the creation of a work product a name, presentation name and description must be&#xD;
            writen. In the role editor we can also specify the skills for this role or its assignment approaches.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_create_role_b.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            (3) Now we can assign the work products to this role by changing to the Work Producs window above the&#xD;
            Properties view. The task that we created can be added here.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            (4) And here we can see a preview of the role ifi_student.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;a id=&quot;N10076&quot; name=&quot;N10076&quot;>&lt;/a>&lt;a id=&quot;Step+4:+Create+tasks&quot; name=&quot;Step+4:+Create+tasks&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 4: Create tasks&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_create_task_a.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            (1) A task is an assignable unit of work. Every task is assigned to a specific role. The granularity of a task&#xD;
            is generally a few hours to a few days and usually affects one or only a small umber of work products.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            (2) Like the work product and role editor, the task editor has the standard fields for namem presentation name,&#xD;
            description and purpose.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            (3) A task can have a series of steps that detail how to perform that task. The Step Editor allows you to: &#xD;
            &lt;ul>&#xD;
                &lt;li>&#xD;
                    Create a new step&#xD;
                &lt;/li>&#xD;
                &lt;li>&#xD;
                    Remove a step&#xD;
                &lt;/li>&#xD;
                &lt;li>&#xD;
                    Move a step up the list&#xD;
                &lt;/li>&#xD;
                &lt;li>&#xD;
                    Move a step down the list&#xD;
                &lt;/li>&#xD;
                &lt;li>&#xD;
                    In our example we created four possible steps in creating a system boundary model.&#xD;
                &lt;/li>&#xD;
            &lt;/ul>&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_create_task_b.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            (4) This part of the editor allows you to define the roles that perform the task. You should select a role as&#xD;
            the Performing Role for this task. You can also add one or more roles as Additional Performers. We created&#xD;
            another role in here that is called ifi_assistent_teacher and this should be an additional performer in this&#xD;
            task.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            (5) This part of the editor allows you to define the work products that are inputs and outputs for this task.&#xD;
            You can select any number of work products as Mandatory Inputs, Optional Inputs, and Outputs. To add a work&#xD;
            product, click the appropriate add button, select the work products you want to add, and then click ok.We&#xD;
            defined the context statement from bussiness modeling to be an optional input for this task.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_create_task_c.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            (6) And the total picture of the task is shown in the preview tab.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;a id=&quot;N100A0&quot; name=&quot;N100A0&quot;>&lt;/a>&lt;a id=&quot;Step+5:+The+method+contents&quot; name=&quot;Step+5:+The+method+contents&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 5: The method contents&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_the_method_contents.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        After creating the task for making the scenario models, here is the result of using EMF Composer for defining the&#xD;
        method content in the Comet Requirement Modeling. In the screen we can see the definition of the role Ifi Student&#xD;
        with the tasks he/she performs, the work products that is responsible for and the skills needed to fullfill this&#xD;
        role.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N100AA&quot; name=&quot;N100AA&quot;>&lt;/a>&lt;a id=&quot;Step+6:+Working+with+processes&quot; name=&quot;Step+6:+Working+with+processes&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 6: Working with processes&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        In Process Authoring the process engineer defines additional lifecycle elements such as Activities (summary tasks),&#xD;
        Phases , Iterations and Milestones , that can then be used to compose the core elements into processes. A complete&#xD;
        process corresponding to a project plan or a phase we call a Delivery Process . We can also create smaller more&#xD;
        granular sections of process, termed Capability Patterns that can be used as building blocks to more easily compose&#xD;
        delivery processes.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The COMET metodology describes four phases in its lifecycle. The first is the Inception Phase in which bussiness&#xD;
        model contents are created and the developers start working on the requirement modeling. In the second phase,&#xD;
        Elaboration phase the developers continue in refining the bussiness model, but the center of attention in this&#xD;
        phase is requirements modeling. The definition of architecture is also started in this phase. The&#xD;
        Specification&amp;amp;Construction phase include refining of the requirements, full definition of the architecture and&#xD;
        modeling the product in PSM level. The last phase, the Transition is defined as a smothly deployment of the robust&#xD;
        system.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_processes_a.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        A process can be created from scratch or extend another predefined process in a standard method. Since COMET is&#xD;
        inspired from RUP(and many other methodologies) we decided to use the predefined processes in a basic OpenUP&#xD;
        library that is shiped together with EMF Composer. In our example we are going to create to activities that will&#xD;
        extend the Manage Requirements activity in the Elaboration phase.&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            (1) As seen in the picture the new activities are Identify System Boundaries and Detail scenarios. In the&#xD;
            property view it is shown that they are an extend to OpenUP_basic/elaboration_phase&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;p>&#xD;
        Now as you can see in the screenshot of EMF Composer the Process editor is more complex than the method content&#xD;
        editors. The first tab, description is standard like the others with name, presentation name and description. In&#xD;
        this example we are more interesting in the work breakdown structure that is a hierarchical breakdown of work, such&#xD;
        as activities, tasks, and steps, defining a process.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The other tabs above the properties view are:&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            (2) Team Allocation tab shows the activities in the capability pattern and the roles that are the performers of&#xD;
            the tasks in the activities. In the Manage Requirements activity there are four role descriptors (links to&#xD;
            roles). The analyst and stakeholder are roles defined in OpenUP while Ifi Student and Ifi Asistent Teacher are&#xD;
            performers of the tasks created in this example.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_processes_b.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            (3) Work Product Usage tab shows the activities in the capability pattern and the work products that are input&#xD;
            and outputs of the tasks in the activities. Here we can find the System Boundary Model and Use Case Scenario&#xD;
            Model that are artifact descriptors linked to the artifacts created and other artifacts descriptors from&#xD;
            OpenUP.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            (4) Consolidated View shows the full set of information for each activity in the Capability Pattern. It shows&#xD;
            the tasks, work products and roles within each activity.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;a id=&quot;N100CB&quot; name=&quot;N100CB&quot;>&lt;/a>&lt;a id=&quot;Step+7:+Create+a+delivery+process&quot;&#xD;
    name=&quot;Step+7:+Create+a+delivery+process&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 7: Create a delivery process&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_create_process.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            (1) Under processes in comet_requirement plug-in right click on the delivery process and then new-&amp;gt; delivery&#xD;
            process.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            (2) A new window will appear and request the name of the delivery process and the configuration which should be&#xD;
            the same as the one we were working on, in this case the OpenUP.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;a id=&quot;N100D8&quot; name=&quot;N100D8&quot;>&lt;/a>&lt;a id=&quot;Step+8:+Create+a+phase&quot; name=&quot;Step+8:+Create+a+phase&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 8: Create a phase&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_create_phase.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        A Phase is a special type of activity that represents a significant period in a project, ending with a major&#xD;
        management checkpoint, milestone or set of deliverables. An Elaboration phase is created as an example(remeber that&#xD;
        Inception is the first phase).&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N100E2&quot; name=&quot;N100E2&quot;>&lt;/a>&lt;a id=&quot;Step+9:+Create+an+activity&quot; name=&quot;Step+9:+Create+an+activity&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 9: Create an activity&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_create_activity.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            Activities represent the key building blocks for processes. Activities represent a grouping of breakdown&#xD;
            elements such as other activities, task descriptors, role descriptors, work product descriptors, and&#xD;
            milestones.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            In the property view we can change the characteristics of the activity, like if it has multible occurrences, is&#xD;
            repeatable and so on&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;a id=&quot;N100EF&quot; name=&quot;N100EF&quot;>&lt;/a>&lt;a id=&quot;Step+10:+Applying+capability+patterns&quot;&#xD;
    name=&quot;Step+10:+Applying+capability+patterns&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 10: Applying capability patterns&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_pattern_a.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        When developing a process, it is not necessary to develop the process from scratch, adding descriptors one by one.&#xD;
        You can reuse existing capability patterns or even capability pattern parts to individually customize the pattern's&#xD;
        content to the particular situation for which it is applied. A capability pattern must be applied to one specific&#xD;
        activity in a process.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        One of the advantages of EMF Composer is its ability to reuse and extend other methods and plugins. As we described&#xD;
        before since COMET is using some of the concepts included in UP, we are going to structure our example as an&#xD;
        extention of the existing Manage Requirement activity in the Elaboration phase.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        After extending the Elaboration Iteration[n], this activity includes now different other activities described in&#xD;
        OpenUpBasic. This are listed as a break down structure with the names in green color.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_pattern2.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10101&quot; name=&quot;N10101&quot;>&lt;/a>&lt;a id=&quot;Step+11:+Create+a+task+description&quot;&#xD;
    name=&quot;Step+11:+Create+a+task+description&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Step 11: Create a task description&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/method/tutorials_files/method_tut1_create_task_description.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            (1) Task descriptors populate the work breakdown structure’s activity. They are linked to the task created in&#xD;
            the method content. In the same way as with artifacts, roles needs to be assigned to tasks descriptors. Work&#xD;
            products must be set as inputs or outputs and steps be described. This is done through the Roles, Work Products&#xD;
            and Steps tabs.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            (2) In our example the Detail scenario task descriptors is primarly performed by an IFI Student and assisted by&#xD;
            an IFI Assistent Professor&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            (3) As seen in the picture, the System Boundary Model is a mandatory input for this task descriptor. Steps are&#xD;
            defined in the same way as with the artifact editor.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/div></mainDescription>
</org.eclipse.epf.uma:ContentDescription>

<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-e3oD8weJL8RGxE-DkiPoxw" name="new_toolmentor,_IJtVgJBMEeCcDNN8IC9C3w" guid="-e3oD8weJL8RGxE-DkiPoxw">
  <mainDescription>&lt;h2 class=&quot;underlined_10&quot;>&#xD;
    UML profiles&#xD;
&lt;/h2>&#xD;
&lt;div class=&quot;section&quot;>&#xD;
    &lt;p>&#xD;
        UML profiles allow us to adapt the UML language to the needs of the analysts or the application domain. Allows&#xD;
        designers to model using application domain concepts. There are three extension mechanisms:&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            Stereotypes&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Restrictions&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Tagged values&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;a id=&quot;N1001D&quot; name=&quot;N1001D&quot;>&lt;/a>&lt;a id=&quot;Stereotypes&quot; name=&quot;Stereotypes&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Stereotypes&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        A stereotype extends the vocabulary of UML with new construction elements derived from existing UML but specific to&#xD;
        a problem domain. Can have associated restrictions and tagged values. Possibility of assigning an icon for a better&#xD;
        graphical representation.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10023&quot; name=&quot;N10023&quot;>&lt;/a>&lt;a id=&quot;Restrictions&quot; name=&quot;Restrictions&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Restrictions&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        A restriction is a semantical condition represented by a textual expression. It imposes some kind of condition or&#xD;
        requisite on the element to which it is applied. Restrictions are described in the Object Constraint Language&#xD;
        (OCL).&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10029&quot; name=&quot;N10029&quot;>&lt;/a>&lt;a id=&quot;Tagged+values&quot; name=&quot;Tagged+values&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Tagged values&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        A tagged value is a property associated to a model element. It is used to store information about the element such&#xD;
        as management information, documentation, coding parameters, etc. Generally, the tools store this information but&#xD;
        it is not shown in the diagrams.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1002F&quot; name=&quot;N1002F&quot;>&lt;/a>&lt;a id=&quot;How+do+we+create+DSL’s?&quot; name=&quot;How+do+we+create+DSL’s?&quot;>&lt;/a> &#xD;
    &lt;h4>&#xD;
        How do we create DSL’s?&#xD;
    &lt;/h4>&#xD;
    &lt;p>&#xD;
        DSL’s can be realized in two ways, either by customization of pre-existing languages through profiles or by&#xD;
        creating a new language with a standardized meta-data architecture based on Meta Object Facility (Meta Object&#xD;
        Facility).&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The first approach through customization is achieved by marking up UML concepts with existing stereotypes and tags.&#xD;
        For example in PIM4SOA a “Class” is stereotyped to be an “Entity”.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The second approach is based on the idea to create a brand new DSL from scratch. This involves using MDA facilities&#xD;
        and standards to create a model of the DSL which is used to generate a tool for the it on an existing platform.&#xD;
    &lt;/p>&#xD;
&lt;/div>&#xD;
&lt;a id=&quot;N10039&quot; name=&quot;N10039&quot;>&lt;/a>&lt;a id=&quot;Domain-specific+languages+(DSLs)&quot; name=&quot;Domain-specific+languages+(DSLs)&quot;>&lt;/a> &#xD;
&lt;h2 class=&quot;underlined_10&quot;>&#xD;
    Domain-specific languages (DSLs)&#xD;
&lt;/h2>&#xD;
&lt;div class=&quot;section&quot;>&#xD;
    &lt;p>&#xD;
        DSL (Domain Specific Languages) are modelling languages designed for a specific purpose inside a problem domain.&#xD;
        These languages provide abstractions that are tailored to a specific domain and their advantage is their ability to&#xD;
        directly represent domain abstractions that fit the problem domain.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        A DSL can be a programming language or executable specification language that offers, through appropriate notations&#xD;
        and abstractions, expressive power focused on, and usually restricted to, a particular problem domain. For a more&#xD;
        specific definition of DSLs check out &lt;a href=&quot;http://www.homepages.cwi.nl/~arie/papers/dslbib/&quot;>&lt;u>&lt;font&#xD;
        color=&quot;#0066cc&quot;>DSL: An Annotated Bibliography&lt;/font>&lt;/u>&lt;/a>&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        An important aspect of DSL’s is understanding the domain concept. In the software engineering world, a domain&#xD;
        defines a set of common requirements, terminology, and concepts that is specific to a particular application&#xD;
        domain. A DSL can therefore be any language that provides means of expressing these concepts and is created&#xD;
        specifically to solve problems in this particular domain. In difference to general purpose-languages like UML&#xD;
        (Unified Modeling Language ) , a DSL is able to focus on concepts of the domain model and is not intended to be&#xD;
        able to solve problems outside of it.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The main benefit of using a DSL is their ability to provide abstractions that are tailored to a specific problem&#xD;
        domain and thereby a potential increase in productivity and ease of use. While it is also possible to abstract the&#xD;
        concepts of the problem domain in UML, it is obviously more intuitive and efficient to be able to directly capture&#xD;
        the specific domain abstractions used by the language. Some other benefits of DSL’s are the possibility to raise&#xD;
        the level of abstraction and the ability to produce a more precise model , since it is focused in a narrower view&#xD;
        of the problem. This leads to a more flexible and agile product.&#xD;
    &lt;/p>&#xD;
&lt;/div>&#xD;
&lt;a id=&quot;N10048&quot; name=&quot;N10048&quot;>&lt;/a>&lt;a id=&quot;UML+profiles+vs.+DSLs&quot; name=&quot;UML+profiles+vs.+DSLs&quot;>&lt;/a> &#xD;
&lt;h2 class=&quot;underlined_10&quot;>&#xD;
    UML profiles vs. DSLs&#xD;
&lt;/h2>&#xD;
&lt;div class=&quot;section&quot;>&#xD;
    &lt;p>&#xD;
        While the OMG MDA promotes UML as the visual “universal” glue suitable for modelling everything, we are also seeing&#xD;
        a trend towards development and co-existence of several domain-specific modelling languages, e.g. supported by the&#xD;
        Microsoft Domain-Specific Language (DSL) tools (see &lt;a href=&quot;http://msdn.microsoft.com/vstudio/DSLTools/&quot;>&lt;u>&lt;font&#xD;
        color=&quot;#0066cc&quot;>http://msdn.microsoft.com/vstudio/DSLTools/&lt;/font>&lt;/u>&lt;/a>)&lt;br />&#xD;
        &lt;br />&#xD;
        Such approaches are now also being discussed in various OMG forums. UML is seen as a “general-purpose” language&#xD;
        while DSLs may be more expressive for most purposes. DSLs (Domain Specific Languages) are modelling languages&#xD;
        designed for a specific purpose inside a problem domain. These languages provide abstractions that are tailored to&#xD;
        a specific domain and their advantage is their ability to directly represent domain abstractions that fit the&#xD;
        problem domain.&lt;br />&#xD;
        &lt;br />&#xD;
        A DSL can be a programming language or executable specification language that offers, through appropriate notations&#xD;
        and abstractions, expressive power focused on, and usually restricted to, a particular problem domain. An important&#xD;
        aspect of DSL’s is understanding the domain concept. In the software engineering world, a domain defines a set of&#xD;
        common requirements, terminology, and concepts that is specific to a particular application domain. A DSL can&#xD;
        therefore be any language that provides means of expressing these concepts and is created specifically to solve&#xD;
        problems in this particular domain.&lt;br />&#xD;
        &lt;br />&#xD;
        While the MDA approach treats UML, with customization, as the modelling language of choice for most application&#xD;
        modelling, it also acknowledges the value of custom languages in certain specialized circumstances. This is the&#xD;
        purpose of the OMG Meta-Object Facility (MOF) standard that plays an important role in MDD. UML itself is defined&#xD;
        using MOF and there are MOF definitions of many other languages. Thus the MDA approach also allows the creation of&#xD;
        DSLs using MOF as a basis rather than using UML profiles.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1005B&quot; name=&quot;N1005B&quot;>&lt;/a>&lt;a id=&quot;Advantages+of+using+UML+profiles&quot; name=&quot;Advantages+of+using+UML+profiles&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Advantages of using UML profiles&#xD;
    &lt;/h3>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            UML is an open standard modelling language for which there are many available books and training courses.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            UML profiles provide a lightweight approach that is easily implemented using readily available UML tooling.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Models with UML profiles applied can be read by all UML tools even if they do not have any knowledge of the&#xD;
            profile.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Basing all DSLs on UML creates a set of related languages that share common concepts.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            UML can be used for high-level architectural models as well as detailed models from which code can be&#xD;
            generated.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
    &lt;a id=&quot;N1006A&quot; name=&quot;N1006A&quot;>&lt;/a>&lt;a id=&quot;Disadvantages+of+using+UML+profiles&quot;&#xD;
    name=&quot;Disadvantages+of+using+UML+profiles&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        Disadvantages of using UML profiles&#xD;
    &lt;/h3>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            UML profiles only permit a limited amount of customization. &#xD;
            &lt;ul>&#xD;
                &lt;li>&#xD;
                    It is not possible to introduce new modelling concepts that cannot be expressed by extending existing&#xD;
                    UML elements.&#xD;
                &lt;/li>&#xD;
            &lt;/ul>&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            The use of UML does require familiarity with modelling concepts.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/div></mainDescription>
</org.eclipse.epf.uma:ContentDescription>

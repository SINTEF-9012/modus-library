<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-ub4NUfIrmdpEFXsa1_NLtg" name="new_toolmentor,_G0jjcNuBEd-pTLmXJigeaQ" guid="-ub4NUfIrmdpEFXsa1_NLtg">
  <mainDescription>&lt;h2 class=&quot;underlined_10&quot;>&#xD;
    Tutorial #1: GMF editor for PIM4SOA&#xD;
&lt;/h2>&#xD;
&lt;div class=&quot;section&quot;>&#xD;
    &lt;a id=&quot;N10014&quot; name=&quot;N10014&quot;>&lt;/a>&lt;a id=&quot;0.+Editor+generation+overview&quot; name=&quot;0.+Editor+generation+overview&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        0. Editor generation overview&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/language/tutorials_files/language_editor_generation_overview.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        This is a UML2.0 activity diagram showing the steps in the process of creating a GMF editor.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The creation of an editor based on a domain model starts by creating a GMF project. In the same way as with EMF, a&#xD;
        ecore file can be included in the project or created using EMF facilities or GMF features, like initialization of&#xD;
        ecore diagrams, that are put on top of the EMF features.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        In the graphical definition we define figures, nodes, compartments, connections etc. The output of this definition&#xD;
        is a gmfgraph containing the specification of these definitions.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The tooling definition model is used to specify the palette, creation tools, actions, etc. for your graphical&#xD;
        elements.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The mapping definition model will let us bind the three models we have so far: the domain, the graphical&#xD;
        definition, and the tooling definition. To the right is an image of this model. This is a key model to GMF&#xD;
        development and will be used as input to a transformation step which will produce our final model, the generation&#xD;
        model.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10026&quot; name=&quot;N10026&quot;>&lt;/a>&lt;a id=&quot;1.+Create+a+GMF+project&quot; name=&quot;1.+Create+a+GMF+project&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        1. Create a GMF project&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/language/tutorials_files/language_create_a_gmf_project_1.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        If not created before, remember to create the EMF model file(*.genmodel).&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Generate the model code (java interfaces and implementation) which will be placed in the src folder.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Generate the edit code ( a new plug-in f.eks org.eclipse.gmf .examples.pim4soa.edit) that includes adapters that&#xD;
        provide a structured view and perform command-based editing of the model objects. This steps are explained in the&#xD;
        EMF tutorial.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/language/tutorials_files/language_create_a_gmf_project_2.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        In the model folder import the meta-model (ecore file).&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Create the EMF model and generate model and edit code.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1003C&quot; name=&quot;N1003C&quot;>&lt;/a>&lt;a id=&quot;2.+Graphical+definition&quot; name=&quot;2.+Graphical+definition&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        2. Graphical definition&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/language/tutorials_files/language_graphical_definition_1.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        We will create a graphical definition by using the GMFGraph Simple Model wizard that will guide us through this&#xD;
        process. The first two pages of the wizard will ask you to choose a destination folder for the *.gmfgraph that will&#xD;
        be created and locate the ecore file that you are working on.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        On the last page of the wizard we will choose the elements from the meta-model that will be processed. In our&#xD;
        example we choosed to make the package as a diagram element, the document and entitiy as nodes in the diagram(this&#xD;
        can be done by checking out on the first column beside the element name), associations as links(the second column)&#xD;
        and attributes of document, entity and association as labels.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The result shows a tree structure of the graphical definition when we can see definitions of figures and how they&#xD;
        are connected to diagram elements. For a better overview of the graphical definition we advice to change the names&#xD;
        of labels from the default form.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/language/tutorials_files/language_graphical_definition_2.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1004E&quot; name=&quot;N1004E&quot;>&lt;/a>&lt;a id=&quot;3.+Tooling+definition&quot; name=&quot;3.+Tooling+definition&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        3. Tooling definition&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/language/tutorials_files/language_tooling_definition.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        As mentioned before, the tooling definition model is used to specify the palette, creation tools, actions, etc. for&#xD;
        your graphical elements.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The wizard is closely identical to the GMF Graph Simple Model wizard and the first two pages will guide you through&#xD;
        the same requirements.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        In the last page of the tutorial we choose the Package element as the diagram element and document, entity and&#xD;
        association as processing elements.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The result will be a tooling definition file PIM4SOA Info.gmftool that has a tool registry, a palette with a tool&#xD;
        group called PIM4SOA(meta-model name).&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The tool group has three tool creatin elements, one for each processing element that we specified in the last page&#xD;
        of the wizard.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10060&quot; name=&quot;N10060&quot;>&lt;/a>&lt;a id=&quot;4.+Mapping+definition&quot; name=&quot;4.+Mapping+definition&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        4. Mapping definition&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/language/tutorials_files/language_mapping_definition_1.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The mapping definition model will let us bind the three models we have so far: the domain, the graphical&#xD;
        definition, and the tooling definition.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        You will be asked to locate and load these three models in the second page of the Guide GMFMap creation wizard. The&#xD;
        next button will become clear when all the models are loaded.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Choose a package as the diagram root element and go on the last page of the wizard.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        On the last page of the wizard select Entity and Document as nodes and Association as links. Note that you can&#xD;
        adjust the properties for the selected node or link by using the 'Change...' button in the dialog.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        In the Mapping Definition ree structure we can see the mappings that are generated for each our processing&#xD;
        elements. In document mapping we can see from the bottom a Labbel Mapping that is a straight forward mapping with&#xD;
        the Diagram Label property mapped to the 'EAttribute name' feature on our Topic element in the domain model.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        NOTE: The wizard does not set the Diagram Labels so this must be done manually by clicking on the drop down list&#xD;
        beside the Diagram Label property and choosing the appropriate label.(labels are defined in the graphical&#xD;
        definition).&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        In the property view of the Document Node Mapping we can see that the Document Node is mapped to the Document&#xD;
        element of the metamodel and the tool performing this is the Creation Tool Document we defined in the Tooling&#xD;
        definition.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        NOTE: Make sure that the Tool is set to the right creation tool.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/language/tutorials_files/language_mapping_definition_2.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1007C&quot; name=&quot;N1007C&quot;>&lt;/a>&lt;a id=&quot;5.+Code+generation&quot; name=&quot;5.+Code+generation&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        5. Code generation&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/language/tutorials_files/language_code_generation.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Now that the minimal graphical elements and mappings are defined, we can generate the code needed to test our work&#xD;
        so far. To accomplish this, we will first create a generator model (*.gmfgen) in order to set the properties for&#xD;
        code generation, similar to the familiar EMF genmodel.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The next step now is to generate the model code from the PIM4SOA Info.gmfgen. After the code is succesfully&#xD;
        generated you can notice a new plugin org.eclipse.examples.pim4soa.diagram in your workspace.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N10088&quot; name=&quot;N10088&quot;>&lt;/a>&lt;a id=&quot;6.+Run+the+diagram&quot; name=&quot;6.+Run+the+diagram&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        6. Run the diagram&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/language/tutorials_files/language_run_the_diagram_1.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Now that the diagram plug-in is generated we can run a new eclipse application to test our diagram.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        When the new eclipse application is up and running create a new project(general) and in that project create a&#xD;
        PIM4SOA Info Diagram.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        A new editor similar to the ecore editor will appear on the screen. And you can start making your pim4soa&#xD;
        information model. In the palette you can notice the meta-model elements that we processed.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/language/tutorials_files/language_run_the_diagram_2.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N1009A&quot; name=&quot;N1009A&quot;>&lt;/a>&lt;a id=&quot;7.+Refine+the+graphical+definitions&quot;&#xD;
    name=&quot;7.+Refine+the+graphical+definitions&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        7. Refine the graphical definitions&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot;&#xD;
        src=&quot;http://www.modelbased.net/mdi/language/tutorials_files/language_refine_the_graphical_definitions.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The example we just showed was e very simple one and not a completed PIM4SOA editor. In the editor you could see&#xD;
        that there was no differences between a document and an entity and that these did not have any attributes.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Considering to change the color of the Entity and adding attributes to Documents and Entities we can go back to the&#xD;
        PIM4SOA_Info.gmfmap and change the specifications of the graphical, tooling or mapping definitions.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        First we change the figures in the gmfmap under the gmfgraph section(or in the graphical definition). This can be&#xD;
        done by using the tree editor and adding new children by right clicking on the object. This new children in our&#xD;
        case are Background Constant Color. Then we add a Label in the Figure Gallery default which is called Label&#xD;
        AttributeLabel. Also we create a Diagram Label under Canvas which is called attribute. Sett the figure of the&#xD;
        diagram label to be Label AttributeLabel from figures.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        In order to alllow attributes to be added to an entity we must create a &lt;em>compartment&lt;/em>. The figure of the&#xD;
        compartement must be set as the Entity figure.&lt;br />&#xD;
        HINT: ALWAYS validate the file whenever you change something on it.(right click -&amp;gt; validate)&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N100AF&quot; name=&quot;N100AF&quot;>&lt;/a>&lt;a id=&quot;8.+Refine+tooling+definition&quot; name=&quot;8.+Refine+tooling+definition&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        8. Refine tooling definition&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/language/tutorials_files/language_refine_tooling_definition.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        In the tooling definitions we create a new creation tool for attributes. In the creation tool we include a small&#xD;
        and large default image.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N100B9&quot; name=&quot;N100B9&quot;>&lt;/a>&lt;a id=&quot;9.+Refine+the+mapping+definitions&quot;&#xD;
    name=&quot;9.+Refine+the+mapping+definitions&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        9. Refine the mapping definitions&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/language/tutorials_files/language_refine_mapping_definitions.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The mapping refinement is a tricky task, but and the developer must be carefull with choosing the containment&#xD;
        features, elements etc.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        In order to create an attribute we have to mapp it to it correspondent element in the meta-model.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        First we create a compartment mapping for the EntityCompartement in the graphical definition. This will be placed&#xD;
        under Node Mapping &amp;lt;Entity/Entity&amp;gt;. Under the same Node Mapping we create a Child Reference. This Child&#xD;
        Reference needs to be edited in the property view, where the &lt;em>Compartement&lt;/em> have to be set as Compartement&#xD;
        Mapping&amp;lt;EntityCompartement&amp;gt; and &lt;em>Containment Feature&lt;/em> as EReference attribute.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Under the Child Reference we create a Node Mapping from the Diagram Node , Diagram Label Attribute to the Element ,&#xD;
        EClass Attribute. Make sure that the Tool is Creation Tool Attribute.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        After saving the mapping definition the generator code and model code must be regenerated.&#xD;
    &lt;/p>&#xD;
    &lt;a id=&quot;N100D1&quot; name=&quot;N100D1&quot;>&lt;/a>&lt;a id=&quot;10.+The+final+editor&quot; name=&quot;10.+The+final+editor&quot;>&lt;/a> &#xD;
    &lt;h3 class=&quot;underlined_5&quot;>&#xD;
        10. The final editor&#xD;
    &lt;/h3>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;&quot; src=&quot;http://www.modelbased.net/mdi/language/tutorials_files/language_the_final_editor.png&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Here is the new generated editor with a document in a lightGreen rectangle, while the entity is has a lightGray&#xD;
        background. In the entity element you might notice that now they have attributes like name and cone in the product&#xD;
        info.&#xD;
    &lt;/p>&#xD;
&lt;/div></mainDescription>
</org.eclipse.epf.uma:ContentDescription>

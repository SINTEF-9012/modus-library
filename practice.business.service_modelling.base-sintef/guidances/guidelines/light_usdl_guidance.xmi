<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-hiowZ_KfmKm13Uz4hY5wTA" name="light_usdl_guidance,_XJeWQVF0EeGhK6PCw6rfMg" guid="-hiowZ_KfmKm13Uz4hY5wTA" changeDate="2012-11-13T05:25:57.362+0100">
  <mainDescription>&lt;h3>&#xD;
    Light-USDL&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    USDL [Charfi, et al. 2010] is a language to describe services, unifying business, operational and technical&#xD;
    characteristics of a service. The goal is to facilitate interoperability between the different intermediaries involved&#xD;
    in the service provider-consumer paradigm (like service aggregator, service broker, etc.). USDL started in 2007 by SAP,&#xD;
    and gathered since then results from several research projects. The current version 3.0 milestone M5 was released early&#xD;
    2011 [USDL 2011].&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    ServiceML uses a small subset of USDL based on&amp;nbsp;the Functional Module:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Functional Module:&lt;/strong> allows specifying the functionality offered as a service, i.e. what the service&#xD;
        will achieve (in a conceptual way). The main concept is the Function, which is used to capture an informal&#xD;
        description of what the service does. A Function has input and output parameters, as well as faults to specify&#xD;
        possible exceptions. Finally, a Function can also be linked to (technical) interfaces which specify how to access&#xD;
        the service (defined in the Technical Module). A single service can then be accessed via several interfaces (WSDL&#xD;
        and REST for instance).&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Metamodel&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    This section presents the metamodel for Light-USDL, a metamodel for specifying functions of a service that is suitable&#xD;
    for business users. It can be considered as a small subset of USDL.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The metamodel is shown in Figure 8. The main element is the Function. A Function is an activity that can be performed&#xD;
    as part of the execution of the service. Such an activity will be performed by a participant offering the service. A&#xD;
    Function has a name (mandatory), and can have a description that provides additional information on the function&#xD;
    itself. Input and output parameters can be specified, as well as faults that are understood as exceptions that can be&#xD;
    raised during the execution of the function.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A Parameter is a specification of either an argument (input) to pass information to the function, or of the result(s)&#xD;
    of the execution (output). A Parameter has a name (mandatory), and may have a type and a multiplicity (lower and upper&#xD;
    bounds). The type of a Parameter is specified as a MessageType (originally from SoaML). In case the specification of&#xD;
    the service is informal, type and multiplicity can be omitted. Finally, a Parameter has a description which provides&#xD;
    additional information.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A Fault specifies faults / exceptions that may occur during the execution of the Function. A Fault has a name&#xD;
    (mandatory), and may have a type and a description (like Parameters do).&lt;br />&#xD;
    A Description provides additional information in a textual form. It can be an informal description of the element that&#xD;
    is described (what a Function does, what a Parameter represents, what a Fault means), some constraints or any other&#xD;
    information that may be valuable when the service will be refined and implemented at the IT level.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/light_usdl_notation.png&quot; width=&quot;468&quot; height=&quot;359&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Figure 8: Light-USDL metamodel&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The main differences with similar elements of USDL (i.e. Function, Parameter, Description, Fault) is the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        In USDL, a name of an element is given by way of a Description (with a type set to “name”). As we have already a&#xD;
        NamedElement in Business-SoaML, we decided to reuse that element. The disadvantage is the following: only a single&#xD;
        name is allowed, and it is not possible to specify the language used in conjunction with the name (as it can be&#xD;
        done in a USDL Description element). We view this as an acceptable drawback.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        From Function, we kept only the description, inputs/outputs and faults. We believe this is the minimal set in order&#xD;
        for business people to describe functions of a service in a simple way, without focusing on implementation details.&#xD;
        In fact, USDL allows to specify services from a black, grey or white-box point of view, hence allowing for details&#xD;
        like affected variables or resources. We aim more for a black-box description at the business level, that is&#xD;
        further refined at the IT-level.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        From Parameter, we added the multiplicity, although it can be omitted in case the specification is intended to be&#xD;
        informal. Multiplicity will usually be used to express that a function will be executed on a set of documents for&#xD;
        instance.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        From Description, as we use the element as a textual description, we removed all the attributes and kept only the&#xD;
        one used to hold the text to be specified. Our Description corresponds to a USDL Description which type is set to&#xD;
        “freetextLong”.&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>

<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-Bu5Roi-2zrwydh0m_5a8yw" name="new_guideline,_Mad3EC1IEeKyWralSrmW_A" guid="-Bu5Roi-2zrwydh0m_5a8yw" changeDate="2012-11-13T05:18:19.751+0100">
  <mainDescription>&lt;h3>&#xD;
    Business-SoaML&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Business-SoaML is a light-weight domain-specific language (DSL) for modelling the architecture aspects of services. It&#xD;
    captures the key concepts of SoaML [OMG 2012a] relevant to business modellers, concentrating on Services Architecture&#xD;
    and Service Contract. The language targets business and solution architects who want to identify and specify services&#xD;
    from a business perspective, without tackling implementation details.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Metamodel&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A ServicesArchitecture defines how Participants interact with each other via ServiceContracts. In the metamodel, a&#xD;
    ServicesArchitecture is a Collaboration that contains some Property (typed by some Participant) and some&#xD;
    CollaborationUse (typed by some ServiceContract). CollaborationUses specify which roles the Participants are playing in&#xD;
    that architecture.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A ServiceContract is used to model an agreement between two or more parties. We distinguish two kinds of&#xD;
    ServiceContracts: a Simple ServiceContract which contains only two connected roles (usually consumer and provider of&#xD;
    the service), and a Compound ServiceContract which contains more than two roles and composed of other ServiceContracts.&#xD;
    In the metamodel, a ServiceContract is a Collaboration which contains some Property which represent the roles of the&#xD;
    ServiceContract.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In a Compound ServiceContract, the roles have no type (we then speak of aggregated roles), and the ServiceContract&#xD;
    contains also CollaborationUse. In a Simple ServiceContract, the roles are typed by Consumer or Provider. The Provider&#xD;
    and Consumer identify the set of Functions that are specified in &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../practice.business.service_modelling.base-sintef/guidances/guidelines/aligning_service_contracts_and_services_interfaces_as_refinement_130FFCFE.html&quot;&#xD;
     guid=&quot;_XJeWQVF0EeGhK6PCw6rfMg&quot;>Light-USDL&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/business_soaml_metamodel.png&quot; width=&quot;600&quot; height=&quot;595&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Figure 4: Business-SoaML metamodel (revised)&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Notation&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The notation for ServicesArchitecture is presented in Figure 5. A ServicesArchitecture is a high level description of&#xD;
    how participants work together for a purpose by providing and using services expressed as service contracts.&#xD;
    Participants are represented by rectangles, connected with each other by CollaborationUse typed by ServiceContracts.&#xD;
    For instance, the figure shows three Participants (Dealer, Manufacturer, Shipper), who interact with each other by&#xD;
    providing and using the services PurchasingService, Ship and Ship Status. Those services are specified as service&#xD;
    contracts&#xD;
&lt;/p>&#xD;
&lt;img alt=&quot;&quot; src=&quot;resources/business_soaml_notation.png&quot; width=&quot;546&quot; height=&quot;354&quot; />&lt;br />&#xD;
&lt;p>&#xD;
    &lt;strong>Figure 5: Business-SoaML notation&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A ServiceContract represents an agreement between the involved participants for how the service is to be consumed and&#xD;
    provided. The service contract defines the roles each participant plays in the service interaction. We distinguish&#xD;
    between a Simple ServiceContract and a Compound ServiceContract. A Simple ServiceContract contains only two roles, each&#xD;
    typed by an Interface. As stated in section 3.2, such interfaces list the Functions provided by the Interface. A&#xD;
    Compound ServiceContract is composed of other ServiceContracts (Simple or Compound). A Compound ServiceContract&#xD;
    contains two or more aggregated roles (which are not typed). Figure 5b illustrates the notation for ServiceContracts.&#xD;
    Above is a Compound ServiceContract, with two aggregated roles (buyer, seller). Those two aggregated roles interact&#xD;
    with each other by using the services OrderingService and InvoicingService. At the bottom is a Simple ServiceContract&#xD;
    with two roles payer and invoicer. Those two roles are respectively typed by the interfaces Payer and Invoicer.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>

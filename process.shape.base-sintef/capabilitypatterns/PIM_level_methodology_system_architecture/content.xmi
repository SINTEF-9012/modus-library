<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1">
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-aXaoT600T8ZQbadmh2jxTw" name="PIM_level_methodology,_c55IwXXkEd6y559hJOP-yw" guid="-aXaoT600T8ZQbadmh2jxTw">
    <mainDescription>&lt;p>&#xD;
    This process defines the 'methodology logic' for the PIM-level modelling within the SHAPE Methodology.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Here, 'methodology logic' means a reasonable, sense making sequence of the methods (i.e. the creation of models) on the&#xD;
    PIM level. This capability pattern defines a complete PIM level methodology logic where certain aspects are mandatory&#xD;
    and others are optional. The later can be (de)selected by the user, and the respective methods will not be included in&#xD;
    the final EPF delivery process (that defines the final customized methodology).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The basic methdology logic for PIM level modeling with SHAPE is as follows:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        SoaML modeling is done the first, all extensions afterwards&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The extensions (and also some SoaML aspects) are optional. &amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    In particular, the following (preliminary) rules for PIM level modelling in SHAPE are defined here:&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;span style=&quot;mso-ansi-language: DE&quot;>SOAML&lt;/span> &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                &lt;span style=&quot;mso-ansi-language: DE&quot;>&lt;span style=&quot;mso-ansi-language: DE&quot;>The skeletons generated by the&#xD;
                CIM2PIM transformations severe as the basis for further PIM level modeling&lt;/span>&lt;/span>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;span style=&quot;mso-ansi-language: DE&quot;>&lt;span style=&quot;mso-ansi-language: DE&quot;>SoaML basic (= CP: SoaML Service&#xD;
                Modelling) is mandatory, optional: behavior modeling (CP: SoaML Behavior Modelling)&lt;/span>&lt;/span>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;span style=&quot;mso-ansi-language: DE&quot;>&lt;span style=&quot;mso-ansi-language: DE&quot;>SoaML Information is before&lt;span&#xD;
                style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> or concurrent with SoaML basic&lt;/span>&lt;/span>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;span style=&quot;mso-ansi-language: DE&quot;>&lt;span style=&quot;mso-ansi-language: DE&quot;>All other SoaML methods come after&#xD;
                SoaML basic and are optional; these are:&lt;/span>&lt;/span> &#xD;
                &lt;ul>&#xD;
                    &lt;li>&#xD;
                        &lt;span style=&quot;mso-ansi-language: DE&quot;>&lt;span style=&quot;mso-ansi-language: DE&quot;>SoaML Rules &amp;amp;&#xD;
                        Constraints Modelling (Rules)&lt;/span>&lt;/span>&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        &lt;span style=&quot;mso-ansi-language: DE&quot;>&lt;span style=&quot;mso-ansi-language: DE&quot;>SoaML Events Modelling&#xD;
                        (Events)&lt;/span>&lt;/span>&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        &lt;span style=&quot;mso-ansi-language: DE&quot;>&lt;span style=&quot;mso-ansi-language: DE&quot;>SoaML Organiz. Modelling&#xD;
                        (Organization)&lt;/span>&lt;/span>&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        &lt;span style=&quot;mso-ansi-language: DE&quot;>&lt;span style=&quot;mso-ansi-language: DE&quot;>SoaML Goal Modelling&#xD;
                        (Organization) [this one might be before SoaML basic]&lt;/span>&lt;/span>&#xD;
                    &lt;/li>&#xD;
                &lt;/ul>&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;span style=&quot;mso-ansi-language: DE&quot;>&lt;span style=&quot;mso-ansi-language: DE&quot;>If Customization (= CP: Service Variability&#xD;
        Modeling), then after SoaML but before everything else&lt;/span>&lt;/span>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;span style=&quot;mso-ansi-language: DE&quot;>&lt;span style=&quot;mso-ansi-language: DE&quot;>&lt;span style=&quot;mso-ansi-language: DE&quot;>If&#xD;
        Agents, then all agent methods are after SoaML; there might be further options (I don’t not them&#xD;
        yet)&lt;/span>&lt;/span>&lt;/span>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;span style=&quot;mso-ansi-language: DE&quot;>&lt;span style=&quot;mso-ansi-language: DE&quot;>&lt;span style=&quot;mso-ansi-language: DE&quot;>If SWS,&#xD;
        then all SWS methods are after SoaML; there might be further options (I don’t not them yet)&lt;/span>&lt;/span>&lt;/span>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;span style=&quot;mso-ansi-language: DE&quot;>&lt;span style=&quot;mso-ansi-language: DE&quot;>&lt;span style=&quot;mso-ansi-language: DE&quot;>If&#xD;
        Composition, then after SoaML&lt;/span>&lt;/span>&lt;/span>&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ol></mainDescription>
    <purpose>&lt;p>&#xD;
    (1) Define reasonable method sequence for SHAPE PIM-level modelling&lt;br />&#xD;
    (2) Serve as basis for PIM-level wizard of the SHAPE custom methodology tool&#xD;
&lt;/p></purpose>
    <scope>PIM-level methodology logic.</scope>
  </org.eclipse.epf.uma:ProcessDescription>
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-Dw_XEMlWS6kf34s8N5990A" name="SoaML Information Modelling,_iCf_ATMBEd6Xn5oF3XPf8w" guid="-Dw_XEMlWS6kf34s8N5990A">
    <mainDescription>This method defines the guided procedure for modelling the behaviour of SoaML services.</mainDescription>
    <purpose>To define the behaviour of SoaML services.</purpose>
  </org.eclipse.epf.uma:ProcessDescription>
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-B-2uM2WKtzH0c83VzqgJXQ" name="Define_service_interface,_w5quoSYUEd-_-qcazwayRQ" guid="-B-2uM2WKtzH0c83VzqgJXQ">
    <mainDescription>&lt;p align=&quot;left&quot;>&#xD;
    &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>There are several SOA interaction&#xD;
    paradigms in common use including document&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot;&#xD;
    face=&quot;NimbusRomNo9L-Regu&quot;>centric messaging, remote procedure calls (RPC), and publish-subscribe. The&#xD;
    decision&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>depends on&#xD;
    cohesion and coupling, state management, distributed transactions,&lt;/font>&lt;/font> &lt;font size=&quot;2&quot;&#xD;
    face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>performance, granularity, synchronization, ease of&#xD;
    development and maintenance,&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot;&#xD;
    face=&quot;NimbusRomNo9L-Regu&quot;>and best practices. SoaML supports both document-centric messaging and&#xD;
    RPC-style&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>service&#xD;
    data.&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;div align=&quot;left&quot;>&#xD;
            &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Medi&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Medi&quot;>&lt;strong>Document-centric&#xD;
            messaging:&lt;/strong>&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-ReguItal&quot;>&lt;font size=&quot;2&quot;&#xD;
            face=&quot;NimbusRomNo9L-ReguItal&quot;>Message types&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font&#xD;
            size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>specify the information exchanged&lt;/font>&lt;/font> &lt;font size=&quot;2&quot;&#xD;
            face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>between service consumers and providers.&#xD;
            Message types represent ”pure data”&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot;&#xD;
            face=&quot;NimbusRomNo9L-Regu&quot;>that may be communicated between parties – it is then up to the parties,&#xD;
            based&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>on the&#xD;
            SOA specification, to interpret this data and act accordingly. As ”pure&lt;/font>&lt;/font> &lt;font size=&quot;2&quot;&#xD;
            face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>data” message types may not have&#xD;
            dependencies on the environment, location or&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font&#xD;
            size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>information system of either party.&lt;/font>&lt;/font>&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div align=&quot;left&quot;>&#xD;
            &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Medi&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Medi&quot;>&lt;strong>RPC-style service&#xD;
            data:&lt;/strong>&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-ReguItal&quot;>&lt;font size=&quot;2&quot;&#xD;
            face=&quot;NimbusRomNo9L-ReguItal&quot;>Service data&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font&#xD;
            size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>is data that is exchanged between service&lt;/font>&lt;/font> &lt;font size=&quot;2&quot;&#xD;
            face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>consumers and providers. The data types of&#xD;
            parameters for service operations are&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot;&#xD;
            face=&quot;NimbusRomNo9L-Regu&quot;>typed by a data type, primitive type, or message type.&lt;/font>&lt;/font>&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
    <purpose>&lt;ul>&#xD;
    &lt;li>&#xD;
        To&amp;nbsp;specify the interfaces and messages of a service interface.&#xD;
    &lt;/li>&#xD;
&lt;/ul></purpose>
  </org.eclipse.epf.uma:ProcessDescription>
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-EqXhZDkXNIIjpc6wqqZBxg" name="SoaML Information Modelling,_iCf_ATMBEd6Xn5oF3XPf8w" guid="-EqXhZDkXNIIjpc6wqqZBxg">
    <mainDescription>This capability pattern defines the guided procedure for modelling service interfaces and behaviour.</mainDescription>
    <purpose>&lt;ul>&#xD;
    &lt;li>&#xD;
        To model service interfaces and behaviour.&#xD;
    &lt;/li>&#xD;
&lt;/ul></purpose>
    <scope>PIM-level methodology logic.</scope>
  </org.eclipse.epf.uma:ProcessDescription>
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-9TiSbkAVrCOk6wdJdDG0Gg" name="Pattern,_EkOroX0aEd63rfdoUaFg2Q" guid="-9TiSbkAVrCOk6wdJdDG0Gg">
    <mainDescription>This process defines the methodology logic for the service composition activity within the SHAPE methodology.</mainDescription>
    <purpose>&lt;p>&#xD;
    (1) Define a process sequence for the&amp;nbsp;service composition&amp;nbsp;activity within the&amp;nbsp;SHAPE methodology.&lt;br />&#xD;
    (2) Serve as basis for&amp;nbsp;the SHAPE custom methodology tool.&#xD;
&lt;/p></purpose>
    <scope>PIM-level methodology logic.</scope>
  </org.eclipse.epf.uma:ProcessDescription>
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-QNwlF203rUrQnv9kcIviTA" name="JEE_development,_PojNUX0dEd6On6TUtok0Og" guid="-QNwlF203rUrQnv9kcIviTA">
    <mainDescription>This process defines the methodology logic for the PIM2PSM activity within the SHAPE methodology.</mainDescription>
    <purpose>&lt;p>&#xD;
    (1) Define a process sequence for the PIM2PSM activity within the&amp;nbsp;SHAPE methodology.&lt;br />&#xD;
    (2) Serve as basis for&amp;nbsp;the SHAPE custom methodology tool.&#xD;
&lt;/p></purpose>
    <scope>PIM2PSM transformation.</scope>
  </org.eclipse.epf.uma:ProcessDescription>
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-Z3oy7u8oqCn7nLTTLQMzIQ" name="Realize service specification,_Vy7rwTGiEd-AuY0C-_IlYA" guid="-Z3oy7u8oqCn7nLTTLQMzIQ">
    <mainDescription>&lt;p align=&quot;left&quot;>&#xD;
    &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>The component model focuses on&#xD;
    specifying the involved software components that&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot;&#xD;
    face=&quot;NimbusRomNo9L-Regu&quot;>realizes the specified services architecture, either for a community or a&#xD;
    participant.&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>Once the&#xD;
    components are defined a composite structure is used is show how implementations&lt;/font>&lt;/font> &lt;font size=&quot;2&quot;&#xD;
    face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>of these components form a composite service&#xD;
    oriented application.&lt;/font>&lt;/font>&#xD;
&lt;/p></mainDescription>
    <purpose>&lt;ul>&#xD;
    &lt;li>&#xD;
        To&amp;nbsp;specify the software components that implements the IT perspective of an SOA.&#xD;
    &lt;/li>&#xD;
&lt;/ul></purpose>
  </org.eclipse.epf.uma:ProcessDescription>
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-z3gyM1YwsvFdznz8dwFlJw" name="Specify_service_orchestrations,_TY8AwVwvEd-M3aJMD1EArw" guid="-z3gyM1YwsvFdznz8dwFlJw">
    <mainDescription>This capability pattern defines the guided procedure for specifying service orchestrations.</mainDescription>
    <purpose>&lt;ul>&#xD;
    &lt;li>&#xD;
        To&amp;nbsp;specify service orchestrations.&#xD;
    &lt;/li>&#xD;
&lt;/ul></purpose>
  </org.eclipse.epf.uma:ProcessDescription>
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-6nZPCTXs_FTryShYRrIwHg" name="SoaML_Modelling,_Ps5UAXtrEd6pqPlgZ3tDbA" guid="-6nZPCTXs_FTryShYRrIwHg">
    <mainDescription>&lt;p align=&quot;left&quot;>&#xD;
    &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>The&lt;/font>&lt;/font> &lt;font size=&quot;2&quot;&#xD;
    face=&quot;NimbusRomNo9L-ReguItal&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-ReguItal&quot;>Software Architecture Model&#xD;
    (SAM)&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>describes the&#xD;
    overall architecture of the&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot;&#xD;
    face=&quot;NimbusRomNo9L-Regu&quot;>system at the PIM level. It partitions the system into components and defines&#xD;
    the&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>components in terms&#xD;
    of what interfaces they provide, what interfaces they use, and&lt;/font>&lt;/font> &lt;font size=&quot;2&quot;&#xD;
    face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>how these interfaces should be used (protocol). Two&#xD;
    aspects of component collaborations&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot;&#xD;
    face=&quot;NimbusRomNo9L-Regu&quot;>are described: the static model (structure) and dynamic model (behaviour).&lt;/font>&lt;/font>&#xD;
    &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>The structural model describes the&#xD;
    components, their dependencies, and their interfaces;&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font&#xD;
    size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>the dynamic model describes the component interactions and protocols.&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;left&quot;>&#xD;
    &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>We follow a top-down approach that&#xD;
    progresses by refinement, starting from a&lt;/font>&lt;/font>&amp;nbsp;&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot;&#xD;
    face=&quot;NimbusRomNo9L-Regu&quot;>high level specification of the system (the&lt;/font>&lt;/font> &lt;font size=&quot;2&quot;&#xD;
    face=&quot;NimbusRomNo9L-ReguItal&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-ReguItal&quot;>services architecture&lt;/font>&lt;/font>&lt;font&#xD;
    size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>, a composite collaboration&lt;/font>&lt;/font>&#xD;
    &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>representing the service), until a&#xD;
    fine grained specification (components,&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot;&#xD;
    face=&quot;NimbusRomNo9L-Regu&quot;>interfaces and data).&lt;/font>&lt;/font>&#xD;
&lt;/p></mainDescription>
    <purpose>&lt;ul>&#xD;
    &lt;li>&#xD;
        To specify&amp;nbsp;the IT perspective of an SOA.&#xD;
    &lt;/li>&#xD;
&lt;/ul></purpose>
    <scope>PIM-level methodology logic.</scope>
  </org.eclipse.epf.uma:ProcessDescription>
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-0UYF45lRoMe641lQRzLK-w" name="Pattern,_EkOroX0aEd63rfdoUaFg2Q" guid="-0UYF45lRoMe641lQRzLK-w">
    <mainDescription>This capability pattern defines the guided procedure for specifying a service composition.</mainDescription>
    <purpose>&lt;ul>&#xD;
    &lt;li>&#xD;
        To&amp;nbsp;specify a service composition.&#xD;
    &lt;/li>&#xD;
&lt;/ul></purpose>
    <scope>PSM-level methodology logic.</scope>
  </org.eclipse.epf.uma:ProcessDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-GIf0RJWuOOSsDIZlXEHxMA" name="requirements_analyst,_yVy_4UPYEd-ZGKVMvRaOVg" guid="-GIf0RJWuOOSsDIZlXEHxMA">
    <refinedDescription>This role&amp;nbsp;has a very important role at the beginning of the development, because it gathers and analyzes the&#xD;
requirements which the service composition has to fulfil.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-jIjO-yQb2xzUae06ZznfnA" name="SoaML_Information_Diagram,_lA0NhRrPEd-YroTGkGBn_w" guid="-jIjO-yQb2xzUae06ZznfnA">
    <refinedDescription>Class diagram that describes data structure of exchanged messages.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-XtqDJ2SpIYGqe3Wx1GKlPQ" name="SoaML_Architecture_and_Behaviour_Diagram,_lA0NihrPEd-YroTGkGBn_w" guid="-XtqDJ2SpIYGqe3Wx1GKlPQ">
    <refinedDescription>Activity diagram that describes the behaviour (dynamics) of a service architecture. The behaviour represents the business&#xD;
logic of the global service that is being specified &#xD;
&lt;p>&#xD;
    &lt;span lang=&quot;EN-GB&quot;&#xD;
    style=&quot;FONT-SIZE: 10pt; FONT-FAMILY: Arial; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-ansi-language: EN-GB; mso-fareast-language: NO-BOK; mso-bidi-language: AR-SA&quot;>A&#xD;
    choreography is a UML Behaviour such as may be shown on an interaction diagram or activity diagram that is owned by the&#xD;
    ServiceContract. The choreography defines what must go between the contract roles as defined by their service&#xD;
    interfaces—when, and how each party is playing their role in that service without regard for who is participating.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The service contract &lt;i style=&quot;mso-bidi-font-style: normal&quot;>separates the&#xD;
    concerns&lt;/i> of how all parties agree to provide or use the service from how any party implements their role in that&#xD;
    service – or from their internal business process.&lt;/span>&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-iE7N3anBRzjENi47s9LXEw" name="SoaML_Service_Diagram,_lA0NjhrPEd-YroTGkGBn_w" guid="-iE7N3anBRzjENi47s9LXEw">
    <refinedDescription>The purpose of services architecture collaboration is to illustrate how kinds of entities work together for some purpose.&#xD;
Collaborations are based on the concepts of roles to define how entities are involved in that collaboration (how and why&#xD;
they collaborate) without depending on what kind of entity is involved (e.g. a person, organization or system). As such, we&#xD;
can say that an entity “plays a role” in a collaboration. The services architecture serves to define the requirements of&#xD;
each of the participants. The participant roles are filled by participants with service points required of the entities&#xD;
that fill these roles and are then bound by the services architectures in which they participate.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-mwCsHea66-Zo9jNPTh70Ew" name="SoaML_Organization_Diagram,_lA0NkhrPEd-YroTGkGBn_w" guid="-mwCsHea66-Zo9jNPTh70Ew">
    <refinedDescription>&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>Component diagram that describes structure (i.e. static) of a participant architecture.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>A services architecture has components at two levels of granularity: The &lt;i&#xD;
    style=&quot;mso-bidi-font-style: normal&quot;>community&lt;/i> services architecture is a “top level” view of how independent&#xD;
    participants work together for some purpose.&lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The services architecture of&#xD;
    a community does not assume or require any one controlling entity or process.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The services architecture of a community is modelled as collaboration&#xD;
    stereotyped as &amp;lt;&amp;lt;ServicesArchitecture&amp;gt;&amp;gt;.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>A participant may also have services architecture – one that shows how parts of that participant&#xD;
    (e.g., departments within an organization) work together to provide the services of the owning participant.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The services architecture of a participant is shown as a UML structured class&#xD;
    or component with the &amp;lt;&amp;lt;ParticipantArchitecture&amp;gt;&amp;gt; stereotype and frequently has an associated business&#xD;
    process.&lt;/span>&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-AHMKiEyaaqlJ_GgOJpD62A" name="system_architect,_GD_kEmMuEd-2eNPi9l6wMg" guid="-AHMKiEyaaqlJ_GgOJpD62A">
    <refinedDescription>This worker is involved in the design of the components which compose the software system. This worker is involved in the&#xD;
design of the architecture of the system, with its components and their interfaces.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-ii-YlC2b_qOHf-H3L8j4Vw" name="SoaML_Service_Contract_Diagram,_GD_kFWMuEd-2eNPi9l6wMg" guid="-ii-YlC2b_qOHf-H3L8j4Vw">
    <refinedDescription>The purpose of services architecture collaboration is to illustrate how kinds of entities work together for some purpose.&#xD;
Collaborations are based on the concepts of roles to define how entities are involved in that collaboration (how and why&#xD;
they collaborate) without depending on what kind of entity is involved (e.g. a person, organization or system). As such, we&#xD;
can say that an entity “plays a role” in a collaboration. The services architecture serves to define the requirements of&#xD;
each of the participants. The participant roles are filled by participants with service points required of the entities&#xD;
that fill these roles and are then bound by the services architectures in which they participate.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-5C_ZIKe6bc_hKKG-eNQpvg" name="SoaML_Service_Interface_Diagram,_GD_kFmMuEd-2eNPi9l6wMg" guid="-5C_ZIKe6bc_hKKG-eNQpvg">
    <refinedDescription>Component diagram that describes how to interact with a service interface, i.e., which methods can be called at that&#xD;
interface.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-TPKhct1lNlvbUfP8AxsQ3w" name="Specify_interfaces_and_messages,_gzBFuF0GEd-hCNf1x7Sb0w" guid="-TPKhct1lNlvbUfP8AxsQ3w">
    <refinedDescription>&lt;p>&#xD;
    This task defines the guided procedure for specifying the interfaces and messages of a service interface.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-V3yZNT5UMAxtTOP2iPkwRA" name="SoaML_Service_Interface_Diagram,_gzBFuV0GEd-hCNf1x7Sb0w" guid="-V3yZNT5UMAxtTOP2iPkwRA">
    <refinedDescription>Component diagram that describes how to interact with a service interface, i.e., which methods can be called at that&#xD;
interface.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-_XuZTIeCbciNNgPFzs_XUQ" name="system_architect,_gzBFul0GEd-hCNf1x7Sb0w" guid="-_XuZTIeCbciNNgPFzs_XUQ">
    <refinedDescription>This worker is involved in the design of the components which compose the software system. This worker is involved in the&#xD;
design of the architecture of the system, with its components and their interfaces.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Yp21QnBc1zeCMDDuGe-Acw" name="SoaML_Capability_Diagram,_gzBFtV0GEd-hCNf1x7Sb0w" guid="-Yp21QnBc1zeCMDDuGe-Acw">
    <refinedDescription>Class diagram that describes capabilities and goals of the services.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-FWLDxCT7eCumDZvtVcw6Wg" name="SoaML_Message_Diagram,_gzBFtF0GEd-hCNf1x7Sb0w" guid="-FWLDxCT7eCumDZvtVcw6Wg">
    <refinedDescription>Class diagram that describes data structure of exchanged messages.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-KMzMghU-6wKHNQMVAMvokQ" name="Specify_service_interface_behaviour,_gzBFq10GEd-hCNf1x7Sb0w" guid="-KMzMghU-6wKHNQMVAMvokQ">
    <refinedDescription>&lt;p align=&quot;left&quot;>&#xD;
    &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>The behaviour of a service interface&#xD;
    expresses the expected interaction between the&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot;&#xD;
    face=&quot;NimbusRomNo9L-Regu&quot;>consumers and providers of services. It can be specified as any UML behavior,&#xD;
    the&lt;/font>&lt;/font> &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>most common ones&#xD;
    being activity, interaction or state machine. In the modelling&lt;/font>&lt;/font> &lt;font size=&quot;2&quot;&#xD;
    face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>steps below we outline the use of interactions in&#xD;
    the form of sequence diagrams.&lt;/font>&lt;/font>&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-RfalfiLeLZS4lK96JLPjng" name="system_architect,_gzBFql0GEd-hCNf1x7Sb0w" guid="-RfalfiLeLZS4lK96JLPjng">
    <refinedDescription>This worker is involved in the design of the components which compose the software system. This worker is involved in the&#xD;
design of the architecture of the system, with its components and their interfaces.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-uyfszdRj7BP5Aw7oLgkIsg" name="SoaML_Service_Interface_Diagram,_gzBFsF0GEd-hCNf1x7Sb0w" guid="-uyfszdRj7BP5Aw7oLgkIsg">
    <refinedDescription>Component diagram that describes how to interact with a service interface, i.e., which methods can be called at that&#xD;
interface.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-xHXztVQKKhhpwpgsHcKlmA" name="SoaML_Behaviour_BPMN_Diagram,_gzBFsV0GEd-hCNf1x7Sb0w" guid="-xHXztVQKKhhpwpgsHcKlmA">
    <refinedDescription>BPMN&amp;nbsp;diagram that describes the behaviour (dynamics) of a service architecture. The behaviour represents the business&#xD;
logic of the global service that is being specified &#xD;
&lt;p>&#xD;
    &lt;span&#xD;
    style=&quot;FONT-FAMILY: Arial; FONT-SIZE: 10pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-ansi-language: EN-GB; mso-fareast-language: NO-BOK; mso-bidi-language: AR-SA&quot;&#xD;
     lang=&quot;EN-GB&quot;>A choreography is a UML Behaviour such as may be shown on an interaction diagram or activity diagram that&#xD;
    is owned by the ServiceContract. The choreography defines what must go between the contract roles as defined by their&#xD;
    service interfaces—when, and how each party is playing their role in that service without regard for who is&#xD;
    participating.&lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The service contract &lt;i&#xD;
    style=&quot;mso-bidi-font-style: normal&quot;>separates the concerns&lt;/i> of how all parties agree to provide or use the service&#xD;
    from how any party implements their role in that service – or from their internal business process.&lt;/span>&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-vLEecxwOIS42_EIHqhqCoQ" name="SoaML_Behaviour_Sequence_Diagram,_gzBFrV0GEd-hCNf1x7Sb0w" guid="-vLEecxwOIS42_EIHqhqCoQ">
    <refinedDescription>Sequence diagram or statemachine that describes the behaviour of a service contract, i.e. the protocol between the entities&#xD;
(service interfaces) that compose a service contract.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-sCmrpA16m7hPmCwLUXjIjQ" name="SoaML_Behaviour_Activity_Diagram,_gzBFrl0GEd-hCNf1x7Sb0w" guid="-sCmrpA16m7hPmCwLUXjIjQ">
    <refinedDescription>Activity diagram that describes the behaviour (dynamics) of a service architecture. The behaviour represents the business&#xD;
logic of the global service that is being specified &#xD;
&lt;p>&#xD;
    &lt;span lang=&quot;EN-GB&quot;&#xD;
    style=&quot;FONT-SIZE: 10pt; FONT-FAMILY: Arial; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-ansi-language: EN-GB; mso-fareast-language: NO-BOK; mso-bidi-language: AR-SA&quot;>A&#xD;
    choreography is a UML Behaviour such as may be shown on an interaction diagram or activity diagram that is owned by the&#xD;
    ServiceContract. The choreography defines what must go between the contract roles as defined by their service&#xD;
    interfaces—when, and how each party is playing their role in that service without regard for who is participating.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The service contract &lt;i style=&quot;mso-bidi-font-style: normal&quot;>separates the&#xD;
    concerns&lt;/i> of how all parties agree to provide or use the service from how any party implements their role in that&#xD;
    service – or from their internal business process.&lt;/span>&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-LnD2nNNv_AtCgSZJOy2X7Q" name="SoaML2XSD,_gy37rl0GEd-hCNf1x7Sb0w" guid="-LnD2nNNv_AtCgSZJOy2X7Q">
    <refinedDescription>This method defines the guided procedure for transforming SoaML models to&amp;nbsp;XSD files.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-rbjdDJNFY9tl7Hf45Mq3UQ" name="WS_WSDL_Document,_gy37r10GEd-hCNf1x7Sb0w" guid="-rbjdDJNFY9tl7Hf45Mq3UQ">
    <refinedDescription>To define a WSDL document for describing the capabilities of a Web service.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-idVv5GtL0072ftVZ66bkNg" name="SoaML2BPEL,_gzBFkF0GEd-hCNf1x7Sb0w" guid="-idVv5GtL0072ftVZ66bkNg">
    <refinedDescription>This method defines the guided procedure for transforming SoaML models to&amp;nbsp;BPEL files.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-3SGCmC-H7dobeiG1S-VeTg" name="WS_BPEL_Document,_gy37rF0GEd-hCNf1x7Sb0w" guid="-3SGCmC-H7dobeiG1S-VeTg">
    <refinedDescription>To define a BPEL document for&amp;nbsp;process execution.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-l-fcWhSFdx6Vy46LsPLHOA" name="SoaML2WSDL,_gy37sF0GEd-hCNf1x7Sb0w" guid="-l-fcWhSFdx6Vy46LsPLHOA">
    <refinedDescription>This method defines the guided procedure for transforming SoaML models to WSDL files.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-dEuXMPstVYeEty5qto_11Q" name="WS_XSD_Document,_gy37sl0GEd-hCNf1x7Sb0w" guid="-dEuXMPstVYeEty5qto_11Q">
    <refinedDescription>&lt;p>&#xD;
    To define an XSD document for information processing and passing.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-NFnYL3rhsoWltzsmYqm8Xw" name="Specify_software_components,_gy37qF0GEd-hCNf1x7Sb0w" guid="-NFnYL3rhsoWltzsmYqm8Xw">
    <refinedDescription>&lt;p align=&quot;left&quot;>&#xD;
    &lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot;&#xD;
    face=&quot;NimbusRomNo9L-Regu&quot;>&lt;font size=&quot;2&quot; face=&quot;NimbusRomNo9L-Regu&quot;>Software components are modelled as components with&#xD;
    composite structures using class diagrams in UML.&lt;/font>&lt;/font>&lt;/font>&lt;/font>&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-h7ISGWLa6qNs0QGxxaI2Bg" name="system_architect,_gy37pl0GEd-hCNf1x7Sb0w" guid="-h7ISGWLa6qNs0QGxxaI2Bg">
    <refinedDescription>This worker is involved in the design of the components which compose the software system. This worker is involved in the&#xD;
design of the architecture of the system, with its components and their interfaces.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-0YD53O4_IsoBZ9Kxle18MQ" name="SoaML_Capability_Diagram,_gy37o10GEd-hCNf1x7Sb0w" guid="-0YD53O4_IsoBZ9Kxle18MQ">
    <refinedDescription>Class diagram that describes capabilities and goals of the services.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-uEEFZ0jFVNtxJrTV_XOQSQ" name="SoaML_Participant_Diagram,_gzBFnF0GEd-hCNf1x7Sb0w" guid="-uEEFZ0jFVNtxJrTV_XOQSQ">
    <refinedDescription>&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>Component diagram that describes structure (i.e. static) of a participant architecture.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>A services architecture has components at two levels of granularity: The &lt;i&#xD;
    style=&quot;mso-bidi-font-style: normal&quot;>community&lt;/i> services architecture is a “top level” view of how independent&#xD;
    participants work together for some purpose.&lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The services architecture of&#xD;
    a community does not assume or require any one controlling entity or process.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The services architecture of a community is modelled as collaboration&#xD;
    stereotyped as &amp;lt;&amp;lt;ServicesArchitecture&amp;gt;&amp;gt;.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>A participant may also have services architecture – one that shows how parts of that participant&#xD;
    (e.g., departments within an organization) work together to provide the services of the owning participant.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The services architecture of a participant is shown as a UML structured class&#xD;
    or component with the &amp;lt;&amp;lt;ParticipantArchitecture&amp;gt;&amp;gt; stereotype and frequently has an associated business&#xD;
    process.&lt;/span>&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-JT7em5bGjoZc0h4nm9f9WA" name="SoaML_Service_Interface_Diagram,_gy37qV0GEd-hCNf1x7Sb0w" guid="-JT7em5bGjoZc0h4nm9f9WA">
    <refinedDescription>Component diagram that describes how to interact with a service interface, i.e., which methods can be called at that&#xD;
interface.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-QGwyjSDIlUzb9dBvcQf10w" name="SoaML_Services_Architecture_Diagram,_gy37p10GEd-hCNf1x7Sb0w" guid="-QGwyjSDIlUzb9dBvcQf10w">
    <refinedDescription>&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>Component diagram that describes structure (i.e. static) of a participant architecture.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>A services architecture has components at two levels of granularity: The &lt;i&#xD;
    style=&quot;mso-bidi-font-style: normal&quot;>community&lt;/i> services architecture is a “top level” view of how independent&#xD;
    participants work together for some purpose.&lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The services architecture of&#xD;
    a community does not assume or require any one controlling entity or process.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The services architecture of a community is modelled as collaboration&#xD;
    stereotyped as &amp;lt;&amp;lt;ServicesArchitecture&amp;gt;&amp;gt;.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>A participant may also have services architecture – one that shows how parts of that participant&#xD;
    (e.g., departments within an organization) work together to provide the services of the owning participant.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The services architecture of a participant is shown as a UML structured class&#xD;
    or component with the &amp;lt;&amp;lt;ParticipantArchitecture&amp;gt;&amp;gt; stereotype and frequently has an associated business&#xD;
    process.&lt;/span>&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Q58Z5BrX47S0IFiKDOSg_A" name="Specify_services_architecture_community_behaviour,_gzBFol0GEd-hCNf1x7Sb0w" guid="-Q58Z5BrX47S0IFiKDOSg_A">
    <refinedDescription>This task defines the guided procedure for specifying the service orchestration for a community-level services&#xD;
architecture.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-YF5IOyW4JBFwRnKZy6uBog" name="SoaML_Service_Contract_Diagram,_gzBFp10GEd-hCNf1x7Sb0w" guid="-YF5IOyW4JBFwRnKZy6uBog">
    <refinedDescription>The purpose of services architecture collaboration is to illustrate how kinds of entities work together for some purpose.&#xD;
Collaborations are based on the concepts of roles to define how entities are involved in that collaboration (how and why&#xD;
they collaborate) without depending on what kind of entity is involved (e.g. a person, organization or system). As such, we&#xD;
can say that an entity “plays a role” in a collaboration. The services architecture serves to define the requirements of&#xD;
each of the participants. The participant roles are filled by participants with service points required of the entities&#xD;
that fill these roles and are then bound by the services architectures in which they participate.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-aZ1MhJsKJTZeCwloH72FDg" name="SoaML_Behaviour_Activity_Diagram,_gzBFoF0GEd-hCNf1x7Sb0w" guid="-aZ1MhJsKJTZeCwloH72FDg">
    <refinedDescription>Activity diagram that describes the behaviour (dynamics) of a service architecture. The behaviour represents the business&#xD;
logic of the global service that is being specified &#xD;
&lt;p>&#xD;
    &lt;span lang=&quot;EN-GB&quot;&#xD;
    style=&quot;FONT-SIZE: 10pt; FONT-FAMILY: Arial; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-ansi-language: EN-GB; mso-fareast-language: NO-BOK; mso-bidi-language: AR-SA&quot;>A&#xD;
    choreography is a UML Behaviour such as may be shown on an interaction diagram or activity diagram that is owned by the&#xD;
    ServiceContract. The choreography defines what must go between the contract roles as defined by their service&#xD;
    interfaces—when, and how each party is playing their role in that service without regard for who is participating.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The service contract &lt;i style=&quot;mso-bidi-font-style: normal&quot;>separates the&#xD;
    concerns&lt;/i> of how all parties agree to provide or use the service from how any party implements their role in that&#xD;
    service – or from their internal business process.&lt;/span>&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-6bQp7sGnx3HTsLfPtq_9-w" name="Specify_services_architecture_participant_behaviour,_gzBFpV0GEd-hCNf1x7Sb0w" guid="-6bQp7sGnx3HTsLfPtq_9-w">
    <refinedDescription>This task defines the guided procedure for specifying the service orchestration for a participant-level services&#xD;
architecture.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-lMMl4BmdSz_GOROxsLK15g" name="SoaML_Services_Architecture_Diagram,_gzBFo10GEd-hCNf1x7Sb0w" guid="-lMMl4BmdSz_GOROxsLK15g">
    <refinedDescription>&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>Component diagram that describes structure (i.e. static) of a participant architecture.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>A services architecture has components at two levels of granularity: The &lt;i&#xD;
    style=&quot;mso-bidi-font-style: normal&quot;>community&lt;/i> services architecture is a “top level” view of how independent&#xD;
    participants work together for some purpose.&lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The services architecture of&#xD;
    a community does not assume or require any one controlling entity or process.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The services architecture of a community is modelled as collaboration&#xD;
    stereotyped as &amp;lt;&amp;lt;ServicesArchitecture&amp;gt;&amp;gt;.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 0cm 0cm 6pt&quot;>&#xD;
    &lt;span lang=&quot;EN-GB&quot;>A participant may also have services architecture – one that shows how parts of that participant&#xD;
    (e.g., departments within an organization) work together to provide the services of the owning participant.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The services architecture of a participant is shown as a UML structured class&#xD;
    or component with the &amp;lt;&amp;lt;ParticipantArchitecture&amp;gt;&amp;gt; stereotype and frequently has an associated business&#xD;
    process.&lt;/span>&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-RG_myE8Viez09-V0QlGI9A" name="SoaML_Service_Interface_Diagram,_gzBFpF0GEd-hCNf1x7Sb0w" guid="-RG_myE8Viez09-V0QlGI9A">
    <refinedDescription>Component diagram that describes how to interact with a service interface, i.e., which methods can be called at that&#xD;
interface.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-ZVpg3U6t5ATyY3Bxi82nuw" name="SoaML_Behaviour_BPMN_Diagram,_gzBFn10GEd-hCNf1x7Sb0w" guid="-ZVpg3U6t5ATyY3Bxi82nuw">
    <refinedDescription>BPMN&amp;nbsp;diagram that describes the behaviour (dynamics) of a service architecture. The behaviour represents the business&#xD;
logic of the global service that is being specified &#xD;
&lt;p>&#xD;
    &lt;span&#xD;
    style=&quot;FONT-FAMILY: Arial; FONT-SIZE: 10pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-ansi-language: EN-GB; mso-fareast-language: NO-BOK; mso-bidi-language: AR-SA&quot;&#xD;
     lang=&quot;EN-GB&quot;>A choreography is a UML Behaviour such as may be shown on an interaction diagram or activity diagram that&#xD;
    is owned by the ServiceContract. The choreography defines what must go between the contract roles as defined by their&#xD;
    service interfaces—when, and how each party is playing their role in that service without regard for who is&#xD;
    participating.&lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The service contract &lt;i&#xD;
    style=&quot;mso-bidi-font-style: normal&quot;>separates the concerns&lt;/i> of how all parties agree to provide or use the service&#xD;
    from how any party implements their role in that service – or from their internal business process.&lt;/span>&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-6q4r3yS-Ll73-VKdtZPATQ" name="SoaML_Behaviour_Sequence_Diagram,_gzBFoV0GEd-hCNf1x7Sb0w" guid="-6q4r3yS-Ll73-VKdtZPATQ">
    <refinedDescription>Sequence diagram or statemachine that describes the behaviour of a service contract, i.e. the protocol between the entities&#xD;
(service interfaces) that compose a service contract.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-ckGA9XdZXFikhYN7mlCBjg" name="Specify interfaces,_gy37oV0GEd-hCNf1x7Sb0w" guid="-ckGA9XdZXFikhYN7mlCBjg">
    <refinedDescription>&lt;p>&#xD;
    This task defines the guided procedure for specifying the interfaces and messages of a service interface.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
</xmi:XMI>

<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-JIHiEWNm37RZWZPf9W3v2Q" name="new_toolmentor,_HDGdsJzMEeCKMNI98sdLuw" guid="-JIHiEWNm37RZWZPf9W3v2Q">
  <mainDescription>&lt;h2 class=&quot;western&quot;>&#xD;
    Develop web services&#xD;
&lt;/h2>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The next step is to implement the web services, and in this example we will look at ‘MathProvider.java’ for the&#xD;
    Calculation service in particular. This web services offers a Modelica model for users to query or execute.&#xD;
&lt;/p>&#xD;
&lt;h3 class=&quot;western&quot;>&#xD;
    Connecting to OpenModelica&#xD;
&lt;/h3>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    There are a few ways in which a user could interact with OpenModelica through a web service:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
            By interacting directly with the OpenModelica compiler by issuing commands through the servce. This would&#xD;
            enable the user to send any valid command to the compiler, allowing to load self-made Modelica models and&#xD;
            simulate these.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
            By querying the simulation results of a pre-simulated Modelica model residing on the server.&#xD;
        &lt;/p>&#xD;
        &lt;ol>&#xD;
            &lt;li>&#xD;
                &lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
                    Query the .plt file using the ‘val()’ command or request the file for processing or viewing on the&#xD;
                    client.&#xD;
                &lt;/p>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
                    Query the C code generated by the compiler (however, this has not been implemented and would require&#xD;
                    some wrapper around the C code).&#xD;
                &lt;/p>&#xD;
            &lt;/li>&#xD;
        &lt;/ol>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
            A combination of 1 and 2.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    For this tutorial we will be looking at option #1. The first thing that needs to be established is the connection&#xD;
    between web service and the OpenModelica compiler. OpenModelica provides both a CORBA and an untyoed native interface&#xD;
    interaction with the compiler. The latter is faster and useful for high-performance computations but more complex.&#xD;
    Consequently, for this tutorial we will use the CORBA interface, which simply sends and receives String values to and&#xD;
    from the compiler.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    To set up the CORBA interface we add the java files to our project (NOTE: later this library will probably be package&#xD;
    as a plugin and integrated into the SiSaS Studio). The list of files is shown in Figure 1. The only file the web&#xD;
    service developer has to relate to is the ‘OMCProxy.java’ file, which has a method called ‘public String&#xD;
    sendExpression(String expression)’ that takes care of the interaction with the OpenModelica compiler. Also, the files&#xD;
    ‘Main.java’ and ‘OMCPane.java’ are simply used to launch a java GUI that enables you to write commands that are sent to&#xD;
    the compiler and that displays the answer. These files are not necessary and can be removed if desired.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/8c.png&quot; width=&quot;288&quot; height=&quot;332&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure&amp;nbsp;1 - The CORBA interface files.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;h3 class=&quot;western&quot;>&#xD;
    Writing the business logic&#xD;
&lt;/h3>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Now that the CORBA interface is in place, we can implement our service. Figure&amp;nbsp;2 shows ‘MathProvider.java’, a&#xD;
    simple web service that simply forwards commands to the OpenModelica compiler through the CORBA interface and returns&#xD;
    the answer. To deploy this class as a web service, right click the java file then select ‘Web Services -&amp;gt; Create Web&#xD;
    service’ (Figure 3). A new creation wizard will appear, like in Figure 4. Make sure ‘Bottom up Java Bean Web Service’&#xD;
    is selected. The other option is ‘Top down Java Bean Web Service’ which we use when we already have a WSDL and want to&#xD;
    create the java skeleton. Also make sure that the right server is selected as well as Axis2. In this example we move&#xD;
    the slider to the top so that our web service is tested afterwards using the “Web services explorer”. After some steps&#xD;
    you are ready to test your service, see Figure&amp;nbsp;6 (NOTE: the “Web Services Explorer” can later be opened by a&#xD;
    button in the button pane, see Figure 5.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/9c.png&quot; width=&quot;600&quot; height=&quot;525&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure 1 - A simple web service using the CORBA interface to interact with&#xD;
    OpenModelica.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/10c.png&quot; width=&quot;600&quot; height=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure&amp;nbsp;2 - Creating a new web service from a java&#xD;
    implementation.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/11c.png&quot; width=&quot;600&quot; height=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure&amp;nbsp;3 - Creating a web service from a java class.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/12c.png&quot; width=&quot;600&quot; height=&quot;109&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure&amp;nbsp;12 - Opening the Web Service Explorer.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/13c.png&quot; width=&quot;600&quot; height=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure&amp;nbsp;4 - Web Services Explorer for testing your&#xD;
    service.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    From this menu you can browse the service and test it. We can also notice the WSDL address (the WSDL file itself is not&#xD;
    visible in the Eclipse project, so it is wise to copy this link for later use, e.g. when publishing the service or&#xD;
    auto-generating a client for your service), or we can simply ‘Import WSDL to workbench’ if we want to be able to open&#xD;
    it and look at it.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    To test the service we navigate to the ‘MathProvider11SOAPBinding’ link to see the SOAP binidings. The click the&#xD;
    ‘calculate’ operation. Now we can add a parameter to the operation, select ‘Go’ the see the result in the ‘Status’&#xD;
    window. Figure&amp;nbsp;5 shows that the testing of our web service for the ‘cd()’ command is successful.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    This service could now be used to load and simulate models, as well as receiving results on these simulations. Future&#xD;
    version of this tutorial will look into these topics, as well as the use of ModelicaML.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/14c.png&quot; width=&quot;600&quot; height=&quot;405&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;font face=&quot;Times, serif&quot;>&lt;font size=&quot;2&quot;>&lt;b>Figure&amp;nbsp;5 - Testing that the web service is working.&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;br />&#xD;
    &amp;nbsp;&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>

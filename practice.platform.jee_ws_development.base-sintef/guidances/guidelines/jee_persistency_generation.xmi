<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-g800dC6U9GH-18SamMXZuA" name="new_guideline,_9k2pUJzFEeCwZfi5IJDs5w" guid="-g800dC6U9GH-18SamMXZuA" changeDate="2011-06-23T12:21:17.195+0200">
  <mainDescription>&lt;p>&#xD;
    To enable storage and retrieval of persistent data (database and database connectivity), the solution must generate&#xD;
    source code that is capable of communicating with a database to store and retrieve persistent information. This is&#xD;
    achieved through the use of JEE Persistency APIs. By generating Plain Old Java Objects (POJOs) annotated with&#xD;
    persistency annotations, the application server - at deploy time - can generate the database schemas according to the&#xD;
    code. The following sections provide detailed information explaining parts of the developed model to text&#xD;
    transformation specifications and the appurtenant ePP profile.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Entity Object Generation&#xD;
&lt;/h4>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    From a UML class marked with the stereotype &amp;lt;&amp;lt;entity&amp;gt;&amp;gt;, the model transformation will generate a POJO&#xD;
    annotated with persistency annotations. It will also generate several queries based on the properties.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/1.png&quot; width=&quot;191&quot; height=&quot;210&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;strong>Figure 1.&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Running the ePP transformation with the model in&amp;nbsp;Figure 1&amp;nbsp;as input source model, results in the generation of&#xD;
    a complete Java source code file that can be deployed on any JEE compliant application server. Based on only five&#xD;
    properties (&amp;lt;&amp;lt;entity&amp;gt;&amp;gt; stereotype, class name, &amp;lt;&amp;lt;id&amp;gt;&amp;gt; stereotype, property name and property&#xD;
    type) the complete JEE compliant code displayed below is generated.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img style=&quot;WIDTH: 580px; HEIGHT: 696px&quot; alt=&quot;&quot; src=&quot;./resources/2.png&quot; width=&quot;596&quot; height=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    As it can be observed, a Java file annotated with &lt;i>@Entity&lt;/i> followed by two @&lt;i>NamedQuery&lt;/i> annotations and a&#xD;
    &lt;i>@Table&lt;/i> annotation is generated. The property &lt;i>id:String&lt;/i> stereotyped by &lt;i>&amp;lt;&amp;lt;id&amp;gt;&amp;gt;&lt;/i> from the&#xD;
    model has been transformed to &lt;i>private String id&lt;/i> annotated with the @Id annotation and in addition public getter&#xD;
    and setter methods for the property are also generated. Two different constructors are provided, one empty that is&#xD;
    needed by EJB frameworks and one that covers all the simple attributes of the class.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Considering a more realistic scenario, the &lt;i>User&lt;/i> entity will typically consist of several attributes (e.g.&#xD;
    &lt;i>firstName&lt;/i>, &lt;i>lastName&lt;/i>, &lt;i>occupation&lt;/i> and so forth) in addition to the single &lt;i>id&lt;/i> property from&#xD;
    Figure&amp;nbsp;1 this can easily be added to the model. The generated code is also well documented with javadoc comment&#xD;
    tags. This makes it possible to run javadoc on the source code to retrieve html pages that document the code.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    As we have seen in the example above, the JEE Persistency API requires an &lt;i>@id&lt;/i> annotated property to retrieve the&#xD;
    correct entity bean. To simplify the development of the &lt;i>UserModel&lt;/i>, this property can also be automatically&#xD;
    generated. In this way the details and complexity of id properties are hidden from the developer. This generation is&#xD;
    driven by the Tagged Value AutoGenId:Boolean that has been defined on the &amp;lt;&amp;lt;entity&amp;gt;&amp;gt; stereotype. The&#xD;
    default value is true and no changes have to to be preformed after adding the &amp;lt;&amp;lt;entity&amp;gt;&amp;gt; stereotype to the&#xD;
    class. The java code below, shows the added annotations &lt;i>(@Id and @GeneratedValue(Strategy=GenerationType.AUTO)).&lt;/i>&#xD;
    The @GeneratedValue, tells the deployment handler that the id property should be generated according to the automatic&#xD;
    strategy. Still, it is always possible to change this in the code so that some other generation strategy is used.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Enumeration Generation&#xD;
&lt;/h4>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Both Java and UML have support for Enumerations, and when an Enumeration is modelled, this needs to be reflected in the&#xD;
    code. Its declaration differs from those of primitive types because the Enumeration only has a set of legal values. In&#xD;
    UML Enumerations are modelled as the example in Figure 2.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/3.png&quot; width=&quot;247&quot; height=&quot;302&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;strong>Figure 2.&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    As can be observed, the model now contains an additional property &lt;i>userCategory:Category&lt;/i>. The &lt;i>Category&lt;/i>&#xD;
    Enumeration is only allowed to have the values A, B and NULL. The introduction of Enumerations requires special&#xD;
    handling in the transformation rules due to the fact that they are implemented in a different way than primitive&#xD;
    properties. The two rules below show how the properties of type Enumeration are generated.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/4.png&quot; width=&quot;532&quot; height=&quot;190&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The rule &lt;i>entity_genEnum&lt;/i> is responsible for the initialization of the Java attribute. It uses the &lt;i>getEnums&lt;/i>&#xD;
    rule to retrieve the values from the Enumeration class. This rule writes the modelled values separated by a comma (the&#xD;
    &lt;i>between(‘,’)&lt;/i> statement). The additional Java code that is generated from the model is shown below. First the&#xD;
    &lt;i>Category&lt;/i> with the allowed values &lt;i>A, B&lt;/i> and &lt;i>NULL&lt;/i> is created. This is then used as the type of the&#xD;
    property &lt;i>userCategory.&lt;/i> This type declaration also needs the &lt;i>@Enumerated(EnumType.String)&lt;/i> annotation.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/5.png&quot; width=&quot;455&quot; height=&quot;430&quot; />&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    As can be seen from the generated code, the attribute of type &lt;i>Enumeration Category&lt;/i> also results in the&#xD;
    generation of special setter and getters. The getter simply returns the &lt;i>toString()&lt;/i> method of the Enumeration&#xD;
    Category object, while the set method needs to be more complex. This method restricts the user to setting the value of&#xD;
    the &lt;i>userCategory&lt;/i> to a legal value (A, B or NULL) as described in the model, this can be seen in the&#xD;
    &lt;i>if/else&lt;/i> block.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Date Datatype Generation&#xD;
&lt;/h5>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Several properties of a solution model will be of datatype Date. If we want to transform this into an EJB 3.x&#xD;
    implementation, we need to add some special annotations so that the application server knows how to generate/map the&#xD;
    persistency data. This is easily included in the transformation rules by checking the type of the property. If the&#xD;
    property is of type Date, the &lt;i>@Temporal&lt;/i> annotation is added to the generated property.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot; align=&quot;left&quot;>&#xD;
    &lt;font color=&quot;#646464&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot;&#xD;
    size=&quot;1&quot;>@Temporal&lt;/font>&lt;/font>&lt;/font>&lt;font color=&quot;#000000&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font&#xD;
    style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>(&lt;/font>&lt;/font>&lt;/font>&lt;font color=&quot;#0000c0&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font&#xD;
    style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>&lt;i>TIMESTAMP&lt;/i>&lt;/font>&lt;/font>&lt;/font>&lt;font color=&quot;#000000&quot;>&lt;font&#xD;
    face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>)&lt;br />&#xD;
    &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/font>&lt;/font>&lt;/font> &lt;font color=&quot;#7f0055&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font&#xD;
    style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>&lt;b>private&lt;/b>&lt;/font>&lt;/font>&lt;/font>&lt;font color=&quot;#000000&quot;>&lt;font&#xD;
    face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>Date&lt;/font>&lt;/font>&lt;/font> &lt;font&#xD;
    color=&quot;#0000c0&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot;&#xD;
    size=&quot;1&quot;>founded&lt;/font>&lt;/font>&lt;/font>&lt;font color=&quot;#000000&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font&#xD;
    style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>;&lt;/font>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; align=&quot;left&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The model in Figure&amp;nbsp;3 was used as input in the above example.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    This approach is also applicable if the user wants to add a known Java type from a Java library to the generated class.&#xD;
    To achieve this, the modelled data type can be named by the fully qualified Java class name, e.g.&#xD;
    &lt;i>java.util.Currency&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Relationship Annotation Generation&#xD;
&lt;/h5>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The server side business tier of an solution will typically consist of several persistent objects with relations to&#xD;
    each other. This must also be reflected in the generated code to achieve the expected behaviour. Figure&amp;nbsp;3&#xD;
    illustrates a UML model that has two classes with the stereotype &amp;lt;&amp;lt;entity&amp;gt;&amp;gt; applied. The classes also have&#xD;
    properties, but the important elements in this context are the two UML associations that have their origin in the&#xD;
    &lt;i>User&lt;/i> class. The bidirectional OneToOne association between &lt;i>Company&lt;/i> and &lt;i>User&lt;/i> means that a&#xD;
    &lt;i>Company&lt;/i> can have one single manager (&lt;i>theManager&lt;/i>) and that a &lt;i>User&lt;/i> can be the manager of one company&#xD;
    (&lt;i>isManagerOf&lt;/i>). The arrowheads on the association show that both classes should have a reference to the opposite&#xD;
    class. The second association (unidirectional) between &lt;i>Company&lt;/i> and &lt;i>User&lt;/i>, means that one &lt;i>User&lt;/i> can&#xD;
    work in zero or maximum 1 company.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/6.png&quot; width=&quot;600&quot; height=&quot;393&quot; />&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &amp;nbsp;&lt;strong>Figure 3.&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    To provide any value to the application developer, these associations must also be reflected in the generated code as&#xD;
    properties with getter and setter methods. The Java code below shows the additionally generated code for the&#xD;
    &lt;i>User&lt;/i> class relationships. As can be observed, the attributes generated from the relationships have special EJB&#xD;
    3.x annotations (&lt;i>@ManyToOne&lt;/i> and &lt;i>@OneToOne&lt;/i>(&lt;i>mappedBy&lt;/i> = “&lt;i>theManager&lt;/i>” )). This is in&#xD;
    correspondence with the model. The &lt;i>mappedBy&lt;/i> element in the &lt;i>OneToOne&lt;/i> mapping of the &lt;i>isManagerOf&lt;/i>&#xD;
    attribute of the &lt;i>User&lt;/i> class is needed to refer to the &lt;i>theManager&lt;/i> attribute of the &lt;i>Company&lt;/i> class.&#xD;
    The value of the &lt;i>mappedBy&lt;/i> element is the name of the attribute in the owning entity that points back to the&#xD;
    inverse entity. The owner can be specified as a tagged value on the stereotype &lt;i>&amp;lt;&amp;lt;bidirectional&amp;gt;&amp;gt;&lt;/i>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The getter and setter methods are also operating on the correct type from the opposite class (&lt;i>Company&lt;/i>).&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot; align=&quot;left&quot;>&#xD;
    &lt;font face=&quot;Courier New, monospace&quot;>&lt;strong>User.java&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot; align=&quot;left&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/7.png&quot; width=&quot;355&quot; height=&quot;469&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The &lt;i>Company&lt;/i> class also needs to include relationship annotations. In addition it needs to contain a collection&#xD;
    implementation of the attribute &lt;i>employees.&lt;/i> From the model we can see that the relationship has a [*]&#xD;
    multiplicity, this is reflected in the code by a List implemented with Java Generics. Ordinary setter and getter&#xD;
    methods are also generated so that the list attribute can be retrieved or updated. It must also be possible to add and&#xD;
    remove a user from the employees list. This is handled by special add and remove methods that operates on the employees&#xD;
    attribute. The &lt;i>(cascade={CascadeType.PERSIST, CascadeType.REMOVE})&lt;/i>annotation means that the opposite object will&#xD;
    be deleted/persisted automatically.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot; lang=&quot;pt-BR&quot; align=&quot;left&quot;>&#xD;
    &lt;font color=&quot;#000000&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;b>Company.java&lt;/b>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/8.png&quot; width=&quot;455&quot; height=&quot;600&quot; />&lt;br />&#xD;
    &amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    As described in the above section, the transformation rules must be capable of handling the different kinds of&#xD;
    relationships. This means identifying the relationship type and taking the proper action in the code generation. The&#xD;
    four rules below are involved in the generation of corresponding JEE code.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img style=&quot;WIDTH: 600px; HEIGHT: 705px&quot; alt=&quot;&quot; src=&quot;./resources/9.png&quot; width=&quot;600&quot; height=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; align=&quot;left&quot; />&#xD;
&lt;br />&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; align=&quot;left&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The rule &lt;i>entity_generateCardinalityAnnotations&lt;/i> is responsible for generating the correct multiplicity&#xD;
    annotation. This decision is based on multiplicity in the model and is retrieved by calling the&#xD;
    &lt;i>entity_association_getOtherEnd&lt;/i> which returns the UML Property on the opposite end of the association, and then&#xD;
    checking the &lt;i>upper&lt;/i> property. It then makes several different calls to the other rules to get the correct output&#xD;
    in the file. In this case, in order to generate a simple line of annotation, a rather complex transformation is needed.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    ManyToMany relationships are also supported both as bidirectional and unidirectional. In this case, both classes will&#xD;
    have the &lt;i>@ManyToMany&lt;/i> annotation placed over the collection property that corresponds to the opposite class.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Generating Inheritance Hierarchies&#xD;
&lt;/h4>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    One of the most powerful mechanisms in Object Oriented system development is inheritance. This mechanism enables a&#xD;
    subclass to inherit all properties and operations from a superclass. The extensions are specified on the subclass, in&#xD;
    addition to those provided by the superclass - without replicating the specification. This mechanism is present in our&#xD;
    target language Java and also in the UML metamodel (with some minor differences). The model in Figure&amp;nbsp;4&#xD;
    demonstrates an inheritance relation in UML. The &lt;i>Company&lt;/i> class is the superclass of &lt;i>InternationalCompany&lt;/i>,&#xD;
    which means that the &lt;i>InternationalCompany&lt;/i> in addition to its owned elements, it should also provide all the&#xD;
    attributes and operations of &lt;i>Company&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/10.png&quot; width=&quot;600&quot; height=&quot;538&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;strong>Figure 4.&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Modelling inheritance is simple in UML, the only prerequisite needed is the modelling of the generalization association&#xD;
    between two classes. In the Java programming language, the keyword extends followed by the name of a superclass must be&#xD;
    added. From the subclass, the superclass (code), its attributes and methods may be reached by using the &lt;i>super&#xD;
    keyword.&lt;/i>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/11.png&quot; width=&quot;598&quot; height=&quot;292&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The generated Java code shown above depicts the &lt;i>InternationalCompany.java&lt;/i> source code file that is generated&#xD;
    from the model given in Figure 4. In addition to the extend keyword in the class declaration section of the file (that&#xD;
    is common Java syntax), two Java Persistency annotations are generated; &lt;i>@Inheritance&lt;/i> and&#xD;
    &lt;i>@DiscriminatorColumn(name =”company _type”).&lt;/i> These annotations are used by the application server at deploy time&#xD;
    to specify how to generate the database schemas. For instance, the &lt;i>@DiscriminatorColumn&lt;/i> annotation specifies the&#xD;
    name of the column that should hold information regarding the type of the company in a particular instance. These&#xD;
    annotations are also used by the application server when Java Query Language statements are executed and therefore they&#xD;
    are mandatory in a JEE environment.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/12.png&quot; width=&quot;476&quot; height=&quot;416&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The transformation rules illustrated above show two important transformation rules that are involved in the generation&#xD;
    of the source code file &lt;i>InternationalCompany.java&lt;/i> from the model given in Figure 5. The first rule&#xD;
    &lt;i>entity_addInheritanceAnnot&lt;/i> makes a call to the &lt;i>uml_getSuperClassName&lt;/i>; this rule checks if the class in&#xD;
    context &lt;i>uml.Class&lt;/i> has a generalization target element. If this rule returns a string variable&#xD;
    (&lt;i>if(targetName!=null)&lt;/i>) the inheritance annotations are added to the Java file with the values according to the&#xD;
    generalization relationship.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Java Query Language Generation&#xD;
&lt;/h5>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Java Query Language provides (as the Java Persistency API) an annotation extension to POJOs that makes it possible to&#xD;
    implement search and retrieval queries on entity objects in a clean and simple way. These queries can e.g. be exposed&#xD;
    as Web Services.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/13.png&quot; width=&quot;556&quot; height=&quot;264&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The JQL generation, for each property of every class stereotyped with &amp;lt;&amp;lt;entity&amp;gt;&amp;gt; will generate a query to&#xD;
    retrieve all objects matching the value provided as input parameter to the query operation. In the code below, it can&#xD;
    be observed that three queries have been generated, &lt;i>findAll&lt;/i>, &lt;i>findById&lt;/i> and &lt;i>findByName&lt;/i>. All these&#xD;
    queries will be accessible from services accessing the registered EntityManager (persistence unit).&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/14.png&quot; width=&quot;462&quot; height=&quot;182&quot; />&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>

<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-5hK2U14Rw9IBEk0EDF8AfA" name="jee_service_generation,_Dlmq0JzGEeCwZfi5IJDs5w" guid="-5hK2U14Rw9IBEk0EDF8AfA" changeDate="2011-06-23T13:03:44.001+0200">
  <mainDescription>&lt;p>&#xD;
    In&amp;nbsp;order to access persistent data, create, read, update and delete (CRUD) operations on the persistent objects&#xD;
    need to be created i.e. implemented. The framework enables the user to model this in a simple and abstract way by&#xD;
    applying the stereotype &lt;i>&amp;lt;&amp;lt;service&amp;gt;&amp;gt;&lt;/i> to a UML class. The class must then be connected to the&#xD;
    persistent object representation with a bidirectional association stereotyped &lt;i>&amp;lt;&amp;lt;manage&amp;gt;&amp;gt;&lt;/i>. The&#xD;
    service modelling is shown in Figure 1.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;br />&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/b11.png&quot; width=&quot;600&quot; height=&quot;197&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;strong>Figure 1.&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    Running the transformation with the above model as input will result in the generation of a Java Session bean. The&#xD;
    session bean will have a reference to the &lt;i>EntityManager&lt;/i> that can access the persistent objects and several&#xD;
    utility methods such as &lt;i>mergeEntity(Object entity),&lt;/i> &lt;i>persistEntity(Object entity)&lt;/i>,&#xD;
    &lt;i>deleteCompany(Integer id), createCompany(&lt;/i>&lt;font color=&quot;#000000&quot;>&lt;i>Integer taxNumber,Date founded, User&#xD;
    theManager&lt;/i>&lt;/font>&lt;i>),editCompany(&lt;/i>&lt;font color=&quot;#000000&quot;>&lt;i>Integer taxNumber,Date founded, User&#xD;
    theManager&lt;/i>&lt;/font>&lt;i>), createSimpleCompany(Integer cId) and updateEntityObject(Object entity).&lt;/i>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/b3.png&quot; width=&quot;600&quot; height=&quot;600&quot; />&lt;br />&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/b4.png&quot; width=&quot;600&quot; height=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    A small portion of the MOFScript transformation rule &lt;i>generateCRUD()&lt;/i> is shown in the code snippet below (it only&#xD;
    shows the implementation of the Java create method.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/b5.png&quot; width=&quot;600&quot; height=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;br />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The text displayed in blue is inserted directly into the Java file, whereas the other code is navigation or dynamic&#xD;
    content. The CRUD method generation is general and it is reused every time CRUD methods are needed on a service. To&#xD;
    generate the correct output, the rule makes use of several model elements e.g. service class,&#xD;
    &lt;i>&amp;lt;&amp;lt;service&amp;gt;&amp;gt;&lt;/i> stereotype (including tagged values), manage association, &lt;i>&amp;lt;&amp;lt;manage&amp;gt;&amp;gt;&lt;/i>&#xD;
    stereotype (including tagged values) and connected entity classes.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    As we can see from the Java code snippet (&lt;i>CompanyManager&lt;/i> class) above, the session bean has the stateless&#xD;
    annotation meaning that it will not be able to keep information of the session state. But it is also possible to&#xD;
    generate stateful session beans from the model. In order to accomplish this, the application developer would need to&#xD;
    set the tagged value &lt;i>ServiceType&lt;/i> in the &lt;i>service&lt;/i> stereotype to &lt;i>Stateful&lt;/i>. The profile definition of&#xD;
    the service concept is shown in Figure 2.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/b22.png&quot; width=&quot;600&quot; height=&quot;454&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;strong>Figure 2.&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    As we can see in Figure 2 the profile extends the UML metamodel by adding a new concept service that inherits from the&#xD;
    Class concept. In addition to what is already defined three new properties are introduced, &lt;i>BeanType,&lt;/i>&#xD;
    &lt;i>ExposeAsWebService&lt;/i> and &lt;i>GenerateFineGrainedGetSet&lt;/i>. These values are used by the transformation rules to&#xD;
    decide what kind of EJB component that should be generated.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &amp;nbsp;JEE Web Service Generation&#xD;
&lt;/h4>&#xD;
In Figure&amp;nbsp;2 it can be observed that the stereotype &lt;i>&amp;lt;&amp;lt;service&amp;gt;&amp;gt;&lt;/i> also has a Boolean property named&#xD;
&lt;i>ExposeAsWebService&lt;/i>. Setting this property to “&lt;i>true&lt;/i>” will result in the generation of a Web Service&#xD;
implemented as a stateless session bean. &lt;br />&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot; align=&quot;left&quot;>&#xD;
    &lt;font color=&quot;#646464&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot;&#xD;
    size=&quot;1&quot;>@&lt;/font>&lt;/font>&lt;/font>&lt;font color=&quot;#646464&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot;&#xD;
    size=&quot;1&quot;>&lt;span style=&quot;BACKGROUND: #c0c0c0&quot;>WebService&lt;br />&#xD;
    &lt;/span>&lt;/font>&lt;/font>&lt;/font>&lt;font color=&quot;#646464&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot;&#xD;
    size=&quot;1&quot;>@Stateless&lt;/font>&lt;/font>&lt;/font>&lt;font color=&quot;#000000&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font&#xD;
    style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>(mappedName=&lt;/font>&lt;/font>&lt;/font>&lt;font color=&quot;#2a00ff&quot;>&lt;font&#xD;
    face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>&quot;CompanyManager&quot;&lt;/font>&lt;/font>&lt;/font>&lt;font&#xD;
    color=&quot;#000000&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>)&lt;br />&#xD;
    &lt;/font>&lt;/font>&lt;/font>&lt;font color=&quot;#7f0055&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot;&#xD;
    size=&quot;1&quot;>&lt;b>public&lt;/b>&lt;/font>&lt;/font>&lt;/font>&lt;font color=&quot;#7f0055&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font&#xD;
    style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>&lt;b>class&lt;/b>&lt;/font>&lt;/font>&lt;/font>&lt;font color=&quot;#000000&quot;>&lt;font&#xD;
    face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>CompanyManager{&lt;/font>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot; align=&quot;left&quot;>&#xD;
    &lt;font color=&quot;#646464&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xD;
    @PersistenceContext&lt;/font>&lt;/font>&lt;/font>&lt;font color=&quot;#000000&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font&#xD;
    style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>&lt;br />&#xD;
    &lt;/font>&lt;/font>&lt;/font>&lt;font color=&quot;#7f0055&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot;&#xD;
    size=&quot;1&quot;>&lt;b>&amp;nbsp;&amp;nbsp;&amp;nbsp; private&lt;/b>&lt;/font>&lt;/font>&lt;/font>&lt;font color=&quot;#000000&quot;>&lt;font&#xD;
    face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>EntityManager&lt;/font>&lt;/font>&lt;/font> &lt;font&#xD;
    color=&quot;#0000c0&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>em&lt;/font>&lt;/font>&lt;/font>&lt;font&#xD;
    color=&quot;#000000&quot;>&lt;font face=&quot;Courier New, monospace&quot;>&lt;font style=&quot;FONT-SIZE: 8pt&quot; size=&quot;1&quot;>;&lt;/font>&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; align=&quot;left&quot; />&#xD;
&lt;br />&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    From the code snippet above it can be observed that that the stateless session bean apart from being annotated with&#xD;
    &lt;i>@Stateless&lt;/i> it is also annotated with the &lt;i>@WebService&lt;/i>. When deployed on the application server, this will&#xD;
    result in the generation of files that will expose the service through a Java Web Service and automatically generate a&#xD;
    WSDL file in which all the methods stereotyped with &lt;i>@WebMethod&lt;/i> will be included.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/b6.png&quot; width=&quot;580&quot; height=&quot;245&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    For instance the &lt;i>deleteCompany&lt;/i> method is annotated with @&lt;i>WebMethod&lt;/i> and will be exposed as a service&#xD;
    function that can be reached through the Web Service interface. This means that it can be called from a standalone&#xD;
    client, a web page or a BPEL process.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    In addition, it can be observed that there is a call to a web method &lt;i>queryCompanyFindAll()&lt;/i>, which is a call to&#xD;
    the generated query on the entity object and will be explained in detail in &quot;Java Query Language Calls Generation&quot;.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    At the entity object the generated variables also have getter and setter methods. This functionality is also provided&#xD;
    through the service interface. But since the services are managing a collection of entity types (from the manage&#xD;
    relation) it is necessary to identify what object we need to update or retrieve a variable value from. To achieve this,&#xD;
    the generators make use of the already generated Java query that retrieves an entity based on the identification&#xD;
    property. The Java code below shows the generated services that can set and get the type of a given Company object.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;br style=&quot;MARGIN-BOTTOM: 0cm&quot; />&#xD;
    &lt;br />&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/b7.png&quot; width=&quot;600&quot; height=&quot;470&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    As can be seen, the input parameters also have special annotations due to the fact that they will be exposed through&#xD;
    the Web Service. The &lt;i>@WebParam&lt;/i> makes it easier for the developer to identify the correct parameters to use.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    All of this functionality is generated from the models automatically, and no manual updates are required in the&#xD;
    generated Java code.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Java Query Language Calls Generation&#xD;
&lt;/h4>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    In&amp;nbsp;&quot;Java Query Language Generation&quot; it has been described how from an entity object, JQL statements were generated&#xD;
    for each of its properties. In the corresponding service that manages the persistent object, calls to these queries&#xD;
    will also be generated in order for the queries to be accessible to the client application or the BPEL processes. The&#xD;
    following excerpt of the transformation rule &lt;i>generateQueries()&lt;/i> shows the generation of the service methods from&#xD;
    the &lt;i>UserModel&lt;/i>. First the &lt;i>findAll&lt;/i> query is generated, and then the different &lt;i>UserModel&lt;/i> properties&#xD;
    are traversed, and queries that correspond to the ones generated on the entity object are created. The transformation&#xD;
    rule is generic, and can have an arbitrary UML user model as input.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;./resources/b8.png&quot; width=&quot;600&quot; height=&quot;492&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    The code section below shows the generated methods that will be contained in the stateless session bean&#xD;
    &lt;i>CompanyManager&lt;/i> that are using the queries from the entity class that is connected with the&#xD;
    &amp;lt;&amp;lt;manage&amp;gt;&amp;gt; association.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-BOTTOM: 0cm&quot;>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/b9.png&quot; width=&quot;600&quot; height=&quot;273&quot; />&#xD;
&lt;/p>&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>

<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1">
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-r0EQysnFJ92f6SmGbgZ37Q" name="define_as_is_architecture_model,_zrCHIFCrEeCQQoyAiE5Lcw" guid="-r0EQysnFJ92f6SmGbgZ37Q">
    <refinedDescription>&lt;p>&#xD;
    The main purpose of the &quot;as-is&quot; model is to describe all of the features of the legacy application that can be exposed&#xD;
    or re-implemented as services. Structure diagrams, e.g. UML class and component diagram should be used to describe and&#xD;
    document these features.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-19wEBR2_JhZEh2ZOy7EOHw" name="system_architect,_CJNn8VCsEeCQQoyAiE5Lcw" guid="-19wEBR2_JhZEh2ZOy7EOHw">
    <refinedDescription>This worker is involved in the design of the components which compose the software system. This worker is involved in the&#xD;
design of the architecture of the system, with its components and their interfaces.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-c5b1byxSvxSl-aXyncL6RA" name="as_is_architecture_model,_CJO2EFCsEeCQQoyAiE5Lcw" guid="-c5b1byxSvxSl-aXyncL6RA">
    <refinedDescription>&amp;lt;TBD&amp;gt;</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-R6lTDVogOjqVHtIDkWWvBA" name="system_developer,_u-v1YVOkEeCEwfF5AiV8xA" guid="-R6lTDVogOjqVHtIDkWWvBA"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-XnL1qU-oOL1smdHMkqNKmA" name="system_architect,_TrlbpFOjEeCEwfF5AiV8xA" guid="-XnL1qU-oOL1smdHMkqNKmA">
    <refinedDescription>This worker is involved in the design of the components which compose the software system. This worker is involved in the&#xD;
design of the architecture of the system, with its components and their interfaces.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Rdj8FhlnPvYopKhfhYRhgQ" name="tester,_Trlbp1OjEeCEwfF5AiV8xA" guid="-Rdj8FhlnPvYopKhfhYRhgQ">
    <refinedDescription>&lt;p> The person in this role is primarily responsible for the following&amp;nbsp;tasks: 
&lt;/p>
&lt;ul>
  &lt;li> Identifying the tests&amp;nbsp;that need to&amp;nbsp;be performed &lt;/li>
  &lt;li> Identifying the most appropriate implementation approach for a given test 
  &lt;/li>
  &lt;li> Implementing individual tests &lt;/li>
  &lt;li> Setting up and running the tests &lt;/li>
  &lt;li> Logging outcomes and verifying that the tests have been run &lt;/li>
  &lt;li> Analyzing and guiding the recovery from execution errors &lt;/li>
  &lt;li> Communicating test results to the team &lt;/li>
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-sF0X1rFzTv8pHhb8j4af2A" name="as_is_architecture_model,_TrvMpFOjEeCEwfF5AiV8xA" guid="-sF0X1rFzTv8pHhb8j4af2A">
    <refinedDescription>&amp;lt;TBD&amp;gt;</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-TOHUXt7BR-F-VTpk__m2hQ" name="system_developer,_u_MhUVOkEeCEwfF5AiV8xA" guid="-TOHUXt7BR-F-VTpk__m2hQ"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-kbJV9Wq8xn0k5sKs2ha6LQ" name="tester,_Tsn9cVOjEeCEwfF5AiV8xA" guid="-kbJV9Wq8xn0k5sKs2ha6LQ">
    <refinedDescription>&lt;p> The person in this role is primarily responsible for the following&amp;nbsp;tasks: 
&lt;/p>
&lt;ul>
  &lt;li> Identifying the tests&amp;nbsp;that need to&amp;nbsp;be performed &lt;/li>
  &lt;li> Identifying the most appropriate implementation approach for a given test 
  &lt;/li>
  &lt;li> Implementing individual tests &lt;/li>
  &lt;li> Setting up and running the tests &lt;/li>
  &lt;li> Logging outcomes and verifying that the tests have been run &lt;/li>
  &lt;li> Analyzing and guiding the recovery from execution errors &lt;/li>
  &lt;li> Communicating test results to the team &lt;/li>
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-U2ABULUUZEZHLdPrzp1kJw" name="service_interface_and_component_model,_Unaf0VOlEeCEwfF5AiV8xA" guid="-U2ABULUUZEZHLdPrzp1kJw">
    <refinedDescription>&lt;p>&#xD;
    A SoaML model aims to define the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Identifying services, the requirements they are intended to fulfill, and the anticipated dependencies between them.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Specifying services including the functional capabilities they provide, what capabilities consumers are expected to&#xD;
        provide, the protocols or rules for using them, and the service information exchanged between consumers and&#xD;
        providers.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Defining service consumers and providers, what requisition and services they consume and provide, how they are&#xD;
        connected and how the service functional capabilities are used by consumers and implemented by providers in a&#xD;
        manner consistent with both the service specification protocols and fulfilled requirements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The policies for using and providing services.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The ability to define classification schemes having aspects to support a broad range of architectural,&#xD;
        organizational and physical partitioning schemes and constraints.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Defining service and service usage requirements and linking them to related OMG metamodels, such as the BMM&#xD;
        course_of_action, BPDM Process, UPDM OperationalCapability and/or UML UseCase model elements they realize, support&#xD;
        or fulfill.&#xD;
    &lt;/li>&#xD;
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-5MmjTvTsY6oAc7o693RhEQ" name="behavior_diagram,_Unaf1FOlEeCEwfF5AiV8xA" guid="-5MmjTvTsY6oAc7o693RhEQ">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a BPMN example which show the details process of how Temperature Monitoring System get real time temperature and report feedback.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=BPMN src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/BPMN.png&quot; width=600 height=423>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805376&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805376&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>9&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805376&quot;>. BPMN example for Real Time Temperature Report&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-QE6vP1QBL95b1i-M7IoUFA" name="community_services_architecture,_Unaf11OlEeCEwfF5AiV8xA" guid="-QE6vP1QBL95b1i-M7IoUFA">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Because we use the top down approach solution, with the “community services architecture”, we can have the top level view of how participants work together for some purpose. The services architecture of a community does not assume or require any one controlling entity or process. Other services architectures and service contracts may be used here. A community Services Architecture is defined using a UML Collaboration.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>The purpose of collaboration is to illustrate how kinds of entities work together for some purpose. The services architecture serves to define the requirements of each of the participants. . The participant roles are filled by participants with service ports required of the entities that fill these roles and are then bound by the services architectures in which they participate.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>This is a service architecture diagram for Scientific Temperature Monitoring System. It shows the Service Orient Architecture design of how user uses the Temperature Monitoring System.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;IMG alt=&quot;SoaML Service Architecture&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/SoaML Service Architecture.png&quot; width=600 height=365>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805375&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805375&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>8&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805375&quot;>. Service Architecture example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>There are three service participants in this model: Operator, Administrator, and Temperature System. The three participants communicate with each other through different service collaboration services.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-xU4FMqk2do7uHqTtaMsPJg" name="participant_services_architecture,_Unaf2lOlEeCEwfF5AiV8xA" guid="-xU4FMqk2do7uHqTtaMsPJg">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>An example of participant service architecture for “Temperature Monitor” is shown in the following diagram.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;Participant Services Architecture&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Participant Services Architecture.png&quot; width=537 height=277>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805377&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805377&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>10&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805377&quot;>. Participant services architecture Example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-cn7Sd4zarMXWuzqClUw-Eg" name="requirement_diagram_and_use_case_diagram,_Unaf3VOlEeCEwfF5AiV8xA" guid="-cn7Sd4zarMXWuzqClUw-Eg">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a requirement diagram of Temperature Monitoring Scientific software.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>&lt;/FONT>&amp;nbsp;&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>&lt;IMG alt=&quot;Requirement Diagram&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/./resources/Requirement Diagram.png&quot; width=588 height=290>&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 coordsize=&quot;21600,21600&quot; o:spt=&quot;75&quot; o:preferrelative=&quot;t&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; filled=&quot;f&quot; stroked=&quot;f&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;>&lt;/v:path>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:lock v:ext=&quot;edit&quot; aspectratio=&quot;t&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805373&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805373&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>6&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805373&quot;>. MOSiSaS Methodology Requirement Diagram&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>This requirement diagram presents the requirements from two aspects: Functionality and Operating Environment. There are also some sub requirements in each specific aspect.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3>&lt;FONT face=Calibri>The requirement diagram includes all the requirements while use case diagram presents the functional requirements. Use case is considered as a mechanism to capture the functional system requirement.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a use case diagram shows the functional requirement in the scientific temperature monitoring system:&lt;/FONT>&lt;SPAN style=&quot;BORDER-BOTTOM: black 1pt; BORDER-LEFT: black 1pt; PADDING-BOTTOM: 0cm; PADDING-LEFT: 0cm; LAYOUT-GRID-MODE: line; PADDING-RIGHT: 0cm; FONT-FAMILY: 'Times New Roman','serif'; BACKGROUND: black; COLOR: black; FONT-SIZE: 0pt; BORDER-TOP: black 1pt; BORDER-RIGHT: black 1pt; PADDING-TOP: 0cm; mso-fareast-font-family: 'Times New Roman'; mso-border-alt: none black 0cm; mso-font-width: 0%&quot;> &lt;/SPAN>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&amp;nbsp;&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;IMG alt=&quot;Use Case&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/./resources/Use Case.png&quot; width=600 height=420>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;a name=&quot;_Toc238805374&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>7&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>. Use Case example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The system actors, such as Administrator and Operator, have different use cases, which stand for the functional requirements from different actors. The relationship between Use Cases could be include or extend.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-1xiE0_bmgWYcgT9kdjSV6A" name="logical_architecture,_Unaf4FOlEeCEwfF5AiV8xA" guid="-1xiE0_bmgWYcgT9kdjSV6A">
    <refinedDescription>&amp;lt;TBD&amp;gt;</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-RzVjWrf8p7JT3f4ut265KQ" name="matlab_or_modelica_mathematical_model,_Unaf41OlEeCEwfF5AiV8xA" guid="-RzVjWrf8p7JT3f4ut265KQ">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Here we use Temperature Constrains as an example to show how to use Modelica Language. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The temperature checking algorithm Modelica script:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>function temperatureConstrains&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>input&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>Real temperature;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>output&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp; &lt;/SPAN>String feedback;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>protected&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>constant Real max = 2000;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>constant Real min = -200;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>algorithm&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>if temperature &amp;gt; max then&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Dangerous! Temperature too high.&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>elseif temperature &amp;lt; min then&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Dangerous! Temperature too low.&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>else &lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Temperature is in secure range&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>end if;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>end temperatureConstrains;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>If we input the temperature like 500, the algorithm should give output like “Temperature is in secure range”.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-fsnqwC70AM0aUUvs_rtvag" name="service_specification,_Unaf5lOlEeCEwfF5AiV8xA" guid="-fsnqwC70AM0aUUvs_rtvag">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following model is service specification diagram. It shows how Temperature Monitor provides service to and receives service from other participants. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;Service Specfication Example&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Service Specfication Example.png&quot; width=360 height=326>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805379&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805379&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>12&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805379&quot;>. Service Specification Example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>From this model we can see there are two service interfaces for the service provider Temperature Monitor. The required interface “DataReceiverInterface” provides two functions, which allows user to receive and filter temperature data. &lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/SPAN>The provided interface “DataAnalyserInterface” provides two functions, which can check temperature and send the feedback to operators.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-4lxRG0JyinRc0K_aehagiw" name="structure_diagram,_UnkQ0VOlEeCEwfF5AiV8xA" guid="-4lxRG0JyinRc0K_aehagiw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a block model for Temperature Monitor. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;IMG alt=&quot;Block diagram example&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Block.png&quot; width=545 height=270>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805378&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805378&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>11&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805378&quot;>. Block diagram example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>We can see there are two internal blocks inside Temperature Monitor, and they are Data Receiver and Temperature Analyzer. The “Data Receiver” gets the real time temperature data and filters the useless data.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>Then the temperature data is passed to Block “Temperature Analyzer” gets the data and checks whether the data is in safe range. According to the checked result, the feedback result is sent to operator.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-QawBmqUNj2BruZBcoWfWhQ" name="build,_UntawVOlEeCEwfF5AiV8xA" guid="-QawBmqUNj2BruZBcoWfWhQ">
    <refinedDescription>&lt;p>
    This working version of the system or part of the system&amp;nbsp;is the result of putting the implementation through a
    build process (typically an automated build script) that creates an executable version, or one that runs. This
    executable version will typically have a number of supporting files that are also considered part of this artifact.
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Il18KN9oYJIDFrlhA3APkQ" name="developer_test,_UntaxFOlEeCEwfF5AiV8xA" guid="-Il18KN9oYJIDFrlhA3APkQ">
    <refinedDescription>&lt;p>
    This artifact covers all of the steps to validate a specific aspect of an implementation element. For example, a test
    could ensure that the parameters of a method properly accept the uppermost and lowermost required values. A developer
    test specifies test entries, execution conditions, and expected results. These details are identified to evaluate a
    particular aspect of a scenario.
&lt;/p>
&lt;p>
    When you collect developer tests for a specific implementation element, you can validate that the element performs as
    specified.
&lt;/p>
&lt;p>
    The tests be self-documenting so that it is clear upon completion of the test whether the implementation element has
    run correctly.
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-9EqJNkI3jjXWCpT2wPv4JQ" name="implementation,_Untax1OlEeCEwfF5AiV8xA" guid="-9EqJNkI3jjXWCpT2wPv4JQ">
    <refinedDescription>&lt;p> 
   This artifact is the collection of one or more of these elements: &lt;/p> &lt;ul>
&lt;li>         Source code files     &lt;/li>
&lt;li>         Data files     &lt;/li>
&lt;li>         Build scripts     &lt;/li>
&lt;li>         Other files that are transformed into the executable system 
   &lt;/li>
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-YuuJwWf5-KIll3AdWcmnBg" name="service_interface_and_component_model,_UsB6EVOlEeCEwfF5AiV8xA" guid="-YuuJwWf5-KIll3AdWcmnBg">
    <refinedDescription>&lt;p>&#xD;
    A SoaML model aims to define the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Identifying services, the requirements they are intended to fulfill, and the anticipated dependencies between them.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Specifying services including the functional capabilities they provide, what capabilities consumers are expected to&#xD;
        provide, the protocols or rules for using them, and the service information exchanged between consumers and&#xD;
        providers.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Defining service consumers and providers, what requisition and services they consume and provide, how they are&#xD;
        connected and how the service functional capabilities are used by consumers and implemented by providers in a&#xD;
        manner consistent with both the service specification protocols and fulfilled requirements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The policies for using and providing services.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The ability to define classification schemes having aspects to support a broad range of architectural,&#xD;
        organizational and physical partitioning schemes and constraints.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Defining service and service usage requirements and linking them to related OMG metamodels, such as the BMM&#xD;
        course_of_action, BPDM Process, UPDM OperationalCapability and/or UML UseCase model elements they realize, support&#xD;
        or fulfill.&#xD;
    &lt;/li>&#xD;
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Lckbd4Du0g_RMz-Iy7tL5A" name="behavior_diagram,_UsB6FFOlEeCEwfF5AiV8xA" guid="-Lckbd4Du0g_RMz-Iy7tL5A">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a BPMN example which show the details process of how Temperature Monitoring System get real time temperature and report feedback.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=BPMN src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/BPMN.png&quot; width=600 height=423>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805376&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805376&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>9&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805376&quot;>. BPMN example for Real Time Temperature Report&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-nE8AJILQMdBp1Cxhz358kw" name="community_services_architecture,_UsB6F1OlEeCEwfF5AiV8xA" guid="-nE8AJILQMdBp1Cxhz358kw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Because we use the top down approach solution, with the “community services architecture”, we can have the top level view of how participants work together for some purpose. The services architecture of a community does not assume or require any one controlling entity or process. Other services architectures and service contracts may be used here. A community Services Architecture is defined using a UML Collaboration.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>The purpose of collaboration is to illustrate how kinds of entities work together for some purpose. The services architecture serves to define the requirements of each of the participants. . The participant roles are filled by participants with service ports required of the entities that fill these roles and are then bound by the services architectures in which they participate.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>This is a service architecture diagram for Scientific Temperature Monitoring System. It shows the Service Orient Architecture design of how user uses the Temperature Monitoring System.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;IMG alt=&quot;SoaML Service Architecture&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/SoaML Service Architecture.png&quot; width=600 height=365>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805375&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805375&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>8&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805375&quot;>. Service Architecture example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>There are three service participants in this model: Operator, Administrator, and Temperature System. The three participants communicate with each other through different service collaboration services.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-VAt7MoVt9Cv6P3eXUowCAQ" name="participant_services_architecture,_UsB6GlOlEeCEwfF5AiV8xA" guid="-VAt7MoVt9Cv6P3eXUowCAQ">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>An example of participant service architecture for “Temperature Monitor” is shown in the following diagram.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;Participant Services Architecture&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Participant Services Architecture.png&quot; width=537 height=277>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805377&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805377&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>10&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805377&quot;>. Participant services architecture Example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-DGv0TyZDkbidwQ8k9yrY-A" name="requirement_diagram_and_use_case_diagram,_UsB6HVOlEeCEwfF5AiV8xA" guid="-DGv0TyZDkbidwQ8k9yrY-A">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a requirement diagram of Temperature Monitoring Scientific software.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>&lt;/FONT>&amp;nbsp;&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>&lt;IMG alt=&quot;Requirement Diagram&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/./resources/Requirement Diagram.png&quot; width=588 height=290>&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 coordsize=&quot;21600,21600&quot; o:spt=&quot;75&quot; o:preferrelative=&quot;t&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; filled=&quot;f&quot; stroked=&quot;f&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;>&lt;/v:path>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:lock v:ext=&quot;edit&quot; aspectratio=&quot;t&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805373&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805373&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>6&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805373&quot;>. MOSiSaS Methodology Requirement Diagram&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>This requirement diagram presents the requirements from two aspects: Functionality and Operating Environment. There are also some sub requirements in each specific aspect.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3>&lt;FONT face=Calibri>The requirement diagram includes all the requirements while use case diagram presents the functional requirements. Use case is considered as a mechanism to capture the functional system requirement.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a use case diagram shows the functional requirement in the scientific temperature monitoring system:&lt;/FONT>&lt;SPAN style=&quot;BORDER-BOTTOM: black 1pt; BORDER-LEFT: black 1pt; PADDING-BOTTOM: 0cm; PADDING-LEFT: 0cm; LAYOUT-GRID-MODE: line; PADDING-RIGHT: 0cm; FONT-FAMILY: 'Times New Roman','serif'; BACKGROUND: black; COLOR: black; FONT-SIZE: 0pt; BORDER-TOP: black 1pt; BORDER-RIGHT: black 1pt; PADDING-TOP: 0cm; mso-fareast-font-family: 'Times New Roman'; mso-border-alt: none black 0cm; mso-font-width: 0%&quot;> &lt;/SPAN>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&amp;nbsp;&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;IMG alt=&quot;Use Case&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/./resources/Use Case.png&quot; width=600 height=420>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;a name=&quot;_Toc238805374&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>7&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>. Use Case example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The system actors, such as Administrator and Operator, have different use cases, which stand for the functional requirements from different actors. The relationship between Use Cases could be include or extend.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Fi_hTrAbTV-tuUAUwrr7Vw" name="logical_architecture,_UsB6IFOlEeCEwfF5AiV8xA" guid="-Fi_hTrAbTV-tuUAUwrr7Vw">
    <refinedDescription>&amp;lt;TBD&amp;gt;</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-eZQHQLDIl0YOfe2KG6HdHw" name="matlab_or_modelica_mathematical_model,_UsB6I1OlEeCEwfF5AiV8xA" guid="-eZQHQLDIl0YOfe2KG6HdHw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Here we use Temperature Constrains as an example to show how to use Modelica Language. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The temperature checking algorithm Modelica script:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>function temperatureConstrains&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>input&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>Real temperature;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>output&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp; &lt;/SPAN>String feedback;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>protected&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>constant Real max = 2000;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>constant Real min = -200;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>algorithm&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>if temperature &amp;gt; max then&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Dangerous! Temperature too high.&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>elseif temperature &amp;lt; min then&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Dangerous! Temperature too low.&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>else &lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Temperature is in secure range&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>end if;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>end temperatureConstrains;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>If we input the temperature like 500, the algorithm should give output like “Temperature is in secure range”.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-gqfQXNhbjQEMbQxv8DXQgw" name="service_specification,_UsB6JlOlEeCEwfF5AiV8xA" guid="-gqfQXNhbjQEMbQxv8DXQgw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following model is service specification diagram. It shows how Temperature Monitor provides service to and receives service from other participants. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;Service Specfication Example&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Service Specfication Example.png&quot; width=360 height=326>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805379&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805379&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>12&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805379&quot;>. Service Specification Example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>From this model we can see there are two service interfaces for the service provider Temperature Monitor. The required interface “DataReceiverInterface” provides two functions, which allows user to receive and filter temperature data. &lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/SPAN>The provided interface “DataAnalyserInterface” provides two functions, which can check temperature and send the feedback to operators.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-lL7ZdBQqcavnFgL5L1nDmw" name="structure_diagram,_UsLEAVOlEeCEwfF5AiV8xA" guid="-lL7ZdBQqcavnFgL5L1nDmw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a block model for Temperature Monitor. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;IMG alt=&quot;Block diagram example&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Block.png&quot; width=545 height=270>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805378&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805378&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>11&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805378&quot;>. Block diagram example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>We can see there are two internal blocks inside Temperature Monitor, and they are Data Receiver and Temperature Analyzer. The “Data Receiver” gets the real time temperature data and filters the useless data.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>Then the temperature data is passed to Block “Temperature Analyzer” gets the data and checks whether the data is in safe range. According to the checked result, the feedback result is sent to operator.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-awC5XUJ3pSgzsmgdy0FkCQ" name="build,_UsU1AVOlEeCEwfF5AiV8xA" guid="-awC5XUJ3pSgzsmgdy0FkCQ">
    <refinedDescription>&lt;p>
    This working version of the system or part of the system&amp;nbsp;is the result of putting the implementation through a
    build process (typically an automated build script) that creates an executable version, or one that runs. This
    executable version will typically have a number of supporting files that are also considered part of this artifact.
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-A4PRNzVBFA7zOShHYyoWXA" name="developer_test,_UsU1BFOlEeCEwfF5AiV8xA" guid="-A4PRNzVBFA7zOShHYyoWXA">
    <refinedDescription>&lt;p>
    This artifact covers all of the steps to validate a specific aspect of an implementation element. For example, a test
    could ensure that the parameters of a method properly accept the uppermost and lowermost required values. A developer
    test specifies test entries, execution conditions, and expected results. These details are identified to evaluate a
    particular aspect of a scenario.
&lt;/p>
&lt;p>
    When you collect developer tests for a specific implementation element, you can validate that the element performs as
    specified.
&lt;/p>
&lt;p>
    The tests be self-documenting so that it is clear upon completion of the test whether the implementation element has
    run correctly.
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-pJx47-4tfDcXp5bjLrEPWg" name="implementation,_UsU1B1OlEeCEwfF5AiV8xA" guid="-pJx47-4tfDcXp5bjLrEPWg">
    <refinedDescription>&lt;p> 
   This artifact is the collection of one or more of these elements: &lt;/p> &lt;ul>
&lt;li>         Source code files     &lt;/li>
&lt;li>         Data files     &lt;/li>
&lt;li>         Build scripts     &lt;/li>
&lt;li>         Other files that are transformed into the executable system 
   &lt;/li>
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-nCcJXz1xGdGpSECtqtqc9w" name="test_case,_UsU1ClOlEeCEwfF5AiV8xA" guid="-nCcJXz1xGdGpSECtqtqc9w">
    <refinedDescription>&lt;p>A
test case specifies the conditions that must be validated to enable an assessment
of aspects of the system under test.  A test case is more formal than a test
idea; typically, a test case takes the form of a specification. In less formal
environments, you can create test cases by identifying a unique ID, name,
associated test data, and expected results.  &lt;/p> &lt;p> Test cases can be derived
from many sources, and typically include a subset of the requirements (such
as use cases, performance characteristics, and reliability concerns) and other
types of quality attributes. For more  information on types of tests and their
relationships to quality test attributes, see &lt;a class=&quot;elementLinkWithType&quot;
href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/testing_qualitative_rqmts_CAE80710.html&quot;
guid=&quot;_0aJ6cMlgEdmt3adZL5Dmdw&quot;>Concept: Testing Qualitative Requirements&lt;/a>. &lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-6h-LlNIR15SoVCvCkvudnA" name="test_log,_UsU1DVOlEeCEwfF5AiV8xA" guid="-6h-LlNIR15SoVCvCkvudnA">
    <refinedDescription>This
artifact provides a detailed, typically time-based record that both verifies
that a set of tests were run, and provides information that relates to the
success of those tests.  The focus is typically on providing an accurate audit
trail, which enables you to undertake a post-run diagnosis of failures. This
raw data is subsequently analyzed to determine the results of an aspect of
the test effort.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-sWQJPmj-MqICke2bEKve2g" name="test_case,_UwotQVOlEeCEwfF5AiV8xA" guid="-sWQJPmj-MqICke2bEKve2g">
    <refinedDescription>&lt;p>A
test case specifies the conditions that must be validated to enable an assessment
of aspects of the system under test.  A test case is more formal than a test
idea; typically, a test case takes the form of a specification. In less formal
environments, you can create test cases by identifying a unique ID, name,
associated test data, and expected results.  &lt;/p> &lt;p> Test cases can be derived
from many sources, and typically include a subset of the requirements (such
as use cases, performance characteristics, and reliability concerns) and other
types of quality attributes. For more  information on types of tests and their
relationships to quality test attributes, see &lt;a class=&quot;elementLinkWithType&quot;
href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/testing_qualitative_rqmts_CAE80710.html&quot;
guid=&quot;_0aJ6cMlgEdmt3adZL5Dmdw&quot;>Concept: Testing Qualitative Requirements&lt;/a>. &lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Ci7RCDkDJzl9KuzlDOadjA" name="test_log,_UwotRFOlEeCEwfF5AiV8xA" guid="-Ci7RCDkDJzl9KuzlDOadjA">
    <refinedDescription>This
artifact provides a detailed, typically time-based record that both verifies
that a set of tests were run, and provides information that relates to the
success of those tests.  The focus is typically on providing an accurate audit
trail, which enables you to undertake a post-run diagnosis of failures. This
raw data is subsequently analyzed to determine the results of an aspect of
the test effort.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-vV-_RKyMQ3c9fGvqAv3T0g" name="identify_candidate_services,_CjIbCFOlEeCEwfF5AiV8xA" guid="-vV-_RKyMQ3c9fGvqAv3T0g">
    <refinedDescription>Analyse the results from the &quot;as-is&quot; architecture model to find candidates that can be migrated to a service.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-c2z_3G387_SQepHhKSOhQQ" name="service_migration_model,_CjIbDVOlEeCEwfF5AiV8xA" guid="-c2z_3G387_SQepHhKSOhQQ">
    <refinedDescription>&lt;p>&#xD;
    The service migration model describes the IT perspective of an SOA and contains the spesifications of service&#xD;
    interfaces, interfaces and message types, opperation behaviours, service orchestration and software componenst. The&#xD;
    service migration model is built in the two tasks &lt;em>define service interfaces&lt;/em> and &lt;em>define operation&#xD;
    behaviours&lt;/em>.&lt;br />&#xD;
    The model represents a so-called platform-independent model (PIM) according&amp;nbsp;to the MDA approach.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Kvl76zmyHPePJmsV2Zo_1Q" name="service_interface_and_component_model,_mAh0caGIEeC6m4lNxCxazg" guid="-Kvl76zmyHPePJmsV2Zo_1Q">
    <refinedDescription>&lt;p>&#xD;
    A SoaML model aims to define the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Identifying services, the requirements they are intended to fulfill, and the anticipated dependencies between them.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Specifying services including the functional capabilities they provide, what capabilities consumers are expected to&#xD;
        provide, the protocols or rules for using them, and the service information exchanged between consumers and&#xD;
        providers.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Defining service consumers and providers, what requisition and services they consume and provide, how they are&#xD;
        connected and how the service functional capabilities are used by consumers and implemented by providers in a&#xD;
        manner consistent with both the service specification protocols and fulfilled requirements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The policies for using and providing services.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The ability to define classification schemes having aspects to support a broad range of architectural,&#xD;
        organizational and physical partitioning schemes and constraints.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Defining service and service usage requirements and linking them to related OMG metamodels, such as the BMM&#xD;
        course_of_action, BPDM Process, UPDM OperationalCapability and/or UML UseCase model elements they realize, support&#xD;
        or fulfill.&#xD;
    &lt;/li>&#xD;
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-urv4FixUaCmsT7hi-aq9gw" name="behavior_diagram,_mAh0dKGIEeC6m4lNxCxazg" guid="-urv4FixUaCmsT7hi-aq9gw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a BPMN example which show the details process of how Temperature Monitoring System get real time temperature and report feedback.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=BPMN src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/BPMN.png&quot; width=600 height=423>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805376&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805376&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>9&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805376&quot;>. BPMN example for Real Time Temperature Report&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-3dHvVlTLspaX5RPCDCEufg" name="community_services_architecture,_mAh0d6GIEeC6m4lNxCxazg" guid="-3dHvVlTLspaX5RPCDCEufg">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Because we use the top down approach solution, with the “community services architecture”, we can have the top level view of how participants work together for some purpose. The services architecture of a community does not assume or require any one controlling entity or process. Other services architectures and service contracts may be used here. A community Services Architecture is defined using a UML Collaboration.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>The purpose of collaboration is to illustrate how kinds of entities work together for some purpose. The services architecture serves to define the requirements of each of the participants. . The participant roles are filled by participants with service ports required of the entities that fill these roles and are then bound by the services architectures in which they participate.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>This is a service architecture diagram for Scientific Temperature Monitoring System. It shows the Service Orient Architecture design of how user uses the Temperature Monitoring System.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;IMG alt=&quot;SoaML Service Architecture&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/SoaML Service Architecture.png&quot; width=600 height=365>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805375&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805375&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>8&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805375&quot;>. Service Architecture example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>There are three service participants in this model: Operator, Administrator, and Temperature System. The three participants communicate with each other through different service collaboration services.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-q4LdT6vXwWn64uNSD_222w" name="participant_services_architecture,_mAh0eqGIEeC6m4lNxCxazg" guid="-q4LdT6vXwWn64uNSD_222w">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>An example of participant service architecture for “Temperature Monitor” is shown in the following diagram.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;Participant Services Architecture&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Participant Services Architecture.png&quot; width=537 height=277>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805377&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805377&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>10&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805377&quot;>. Participant services architecture Example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-GEpHXtLGDHv-SAa9iBLwHA" name="requirement_diagram_and_use_case_diagram,_mAh0faGIEeC6m4lNxCxazg" guid="-GEpHXtLGDHv-SAa9iBLwHA">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a requirement diagram of Temperature Monitoring Scientific software.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>&lt;/FONT>&amp;nbsp;&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>&lt;IMG alt=&quot;Requirement Diagram&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/./resources/Requirement Diagram.png&quot; width=588 height=290>&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 coordsize=&quot;21600,21600&quot; o:spt=&quot;75&quot; o:preferrelative=&quot;t&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; filled=&quot;f&quot; stroked=&quot;f&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;>&lt;/v:path>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:lock v:ext=&quot;edit&quot; aspectratio=&quot;t&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805373&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805373&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>6&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805373&quot;>. MOSiSaS Methodology Requirement Diagram&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>This requirement diagram presents the requirements from two aspects: Functionality and Operating Environment. There are also some sub requirements in each specific aspect.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3>&lt;FONT face=Calibri>The requirement diagram includes all the requirements while use case diagram presents the functional requirements. Use case is considered as a mechanism to capture the functional system requirement.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a use case diagram shows the functional requirement in the scientific temperature monitoring system:&lt;/FONT>&lt;SPAN style=&quot;BORDER-BOTTOM: black 1pt; BORDER-LEFT: black 1pt; PADDING-BOTTOM: 0cm; PADDING-LEFT: 0cm; LAYOUT-GRID-MODE: line; PADDING-RIGHT: 0cm; FONT-FAMILY: 'Times New Roman','serif'; BACKGROUND: black; COLOR: black; FONT-SIZE: 0pt; BORDER-TOP: black 1pt; BORDER-RIGHT: black 1pt; PADDING-TOP: 0cm; mso-fareast-font-family: 'Times New Roman'; mso-border-alt: none black 0cm; mso-font-width: 0%&quot;> &lt;/SPAN>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&amp;nbsp;&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;IMG alt=&quot;Use Case&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/./resources/Use Case.png&quot; width=600 height=420>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;a name=&quot;_Toc238805374&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>7&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>. Use Case example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The system actors, such as Administrator and Operator, have different use cases, which stand for the functional requirements from different actors. The relationship between Use Cases could be include or extend.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-sugXZRyigxwp2obEENAd2Q" name="logical_architecture,_mAh0gKGIEeC6m4lNxCxazg" guid="-sugXZRyigxwp2obEENAd2Q">
    <refinedDescription>&amp;lt;TBD&amp;gt;</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-FgYBl0c63Cjgq5qs3wkHGg" name="matlab_or_modelica_mathematical_model,_mAq-YaGIEeC6m4lNxCxazg" guid="-FgYBl0c63Cjgq5qs3wkHGg">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Here we use Temperature Constrains as an example to show how to use Modelica Language. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The temperature checking algorithm Modelica script:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>function temperatureConstrains&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>input&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>Real temperature;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>output&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp; &lt;/SPAN>String feedback;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>protected&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>constant Real max = 2000;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>constant Real min = -200;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>algorithm&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>if temperature &amp;gt; max then&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Dangerous! Temperature too high.&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>elseif temperature &amp;lt; min then&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Dangerous! Temperature too low.&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>else &lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Temperature is in secure range&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>end if;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>end temperatureConstrains;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>If we input the temperature like 500, the algorithm should give output like “Temperature is in secure range”.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-ecGJrsERjRTjSftPNnhsNw" name="service_specification,_mAq-ZKGIEeC6m4lNxCxazg" guid="-ecGJrsERjRTjSftPNnhsNw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following model is service specification diagram. It shows how Temperature Monitor provides service to and receives service from other participants. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;Service Specfication Example&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Service Specfication Example.png&quot; width=360 height=326>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805379&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805379&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>12&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805379&quot;>. Service Specification Example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>From this model we can see there are two service interfaces for the service provider Temperature Monitor. The required interface “DataReceiverInterface” provides two functions, which allows user to receive and filter temperature data. &lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/SPAN>The provided interface “DataAnalyserInterface” provides two functions, which can check temperature and send the feedback to operators.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-A0mZor_2HkRQCVG3IUI47w" name="structure_diagram,_mAq-Z6GIEeC6m4lNxCxazg" guid="-A0mZor_2HkRQCVG3IUI47w">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a block model for Temperature Monitor. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;IMG alt=&quot;Block diagram example&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Block.png&quot; width=545 height=270>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805378&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805378&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>11&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805378&quot;>. Block diagram example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>We can see there are two internal blocks inside Temperature Monitor, and they are Data Receiver and Temperature Analyzer. The “Data Receiver” gets the real time temperature data and filters the useless data.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>Then the temperature data is passed to Block “Temperature Analyzer” gets the data and checks whether the data is in safe range. According to the checked result, the feedback result is sent to operator.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-dryJYWUHJAptzIBJg1PqLA" name="build,_mA0vYaGIEeC6m4lNxCxazg" guid="-dryJYWUHJAptzIBJg1PqLA">
    <refinedDescription>&lt;p>
    This working version of the system or part of the system&amp;nbsp;is the result of putting the implementation through a
    build process (typically an automated build script) that creates an executable version, or one that runs. This
    executable version will typically have a number of supporting files that are also considered part of this artifact.
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-kpstgmEMByRFf1HhUy4VyA" name="developer_test,_mA0vZKGIEeC6m4lNxCxazg" guid="-kpstgmEMByRFf1HhUy4VyA">
    <refinedDescription>&lt;p>
    This artifact covers all of the steps to validate a specific aspect of an implementation element. For example, a test
    could ensure that the parameters of a method properly accept the uppermost and lowermost required values. A developer
    test specifies test entries, execution conditions, and expected results. These details are identified to evaluate a
    particular aspect of a scenario.
&lt;/p>
&lt;p>
    When you collect developer tests for a specific implementation element, you can validate that the element performs as
    specified.
&lt;/p>
&lt;p>
    The tests be self-documenting so that it is clear upon completion of the test whether the implementation element has
    run correctly.
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-aJZit8mjH07tIhErJEmVkQ" name="implementation,_mA0vZ6GIEeC6m4lNxCxazg" guid="-aJZit8mjH07tIhErJEmVkQ">
    <refinedDescription>&lt;p> 
   This artifact is the collection of one or more of these elements: &lt;/p> &lt;ul>
&lt;li>         Source code files     &lt;/li>
&lt;li>         Data files     &lt;/li>
&lt;li>         Build scripts     &lt;/li>
&lt;li>         Other files that are transformed into the executable system 
   &lt;/li>
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-nfrAzu1Ku5GUhShOYiBw1A" name="matlab_as_service,_mA0vaqGIEeC6m4lNxCxazg" guid="-nfrAzu1Ku5GUhShOYiBw1A">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The usage of Providing MATLAB as a Service here will mainly satisfy the requirements from “Mathematic Modeling” and “Service Modeling“aspects.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>According to the introduction from MathWorks, there are three ways to deploy MATLAB as a web service currently&lt;?xml:namespace prefix = w ns = &quot;urn:schemas-microsoft-com:office:word&quot; />&lt;w:Sdt id=6082354 Citation=&quot;t&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/SPAN>&lt;/SPAN>&lt;/w:Sdt>.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use MATLAB Builder NE to create a server-side .NET component;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use MATLAB Builder JA to create a server-side Java component;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use COM automation, CGI, or other technologies to access MATLAB through web.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>With MATLAB Builder NE or JA, user can integrate MATLAB application with .NET and COM components, or Java program, and then deployed this application as web service. A .NET, or COM, or Java wrapper is used here to invoke the encrypted MATLAB functions. This wrapper runs against the MATLAB Compiler Runtime (MCR) and can share the MATLAB libraries. The MATLAB function is invoked as Java method or methods of any other COM or .NET class. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>MathWorks gives a mechanism to provide the MATLAB function into a deployable, portable, robust, scalable Web application, which we could see from the diagram below.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/MTALAB.bmp&quot; width=580 height=532>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805380&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805380&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>13&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805380&quot;>. Architecture of Proving MATLAB as a Service&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>For builder NE, users can integrate a MATLAB based .NET or COM component into an existing .NET or COM application by installing both the component and the MCR on the target machine. For Web applications, the builder also provides a .NET custom control that allows zoom, pan, and rotate functionality for figures created in MATLAB. Users can also use the custom control from the toolbox in Visual Studio. With the builder support for the .NET remoting API, users can also run their class as a persistent service or spread their processing across multiple processes. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>For builder JA, MATLAB allows users to present the MATLAB calculation or simulation results into servlets or Java Server Page. Users can integrate a MATLAB based Java class into an existing Java infrastructure by installing the class and the MCR on the target machine. For Web applications that use JSP technology or servlets, the builder provides AJAX-based zoom, pan, and rotate controls for figures created in MATLAB. Using the builder's Remote Method Invocation (RMI) interface, users can also run their class as a persistent service, or spread their processing across multiple processes. Java classes created with the builder can be distributed at no additional charge.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>A typical example of providing MATLAB as web service is shown in the website of MATLAB, which we could see in the following table. This example allows users to input parameters from web browser, then the parameter will be passed to MATLAB service and return the simulation result, the result will be present in client web browser.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/MATLAB2.bmp&quot; width=580 height=488>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805381&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805381&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>14&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805381&quot;>. Calculation Results from MATLAB Web Service&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-uGXQwt8bXzdp8FAzmwObQg" name="modelica_design_time_model,_mA-gYaGIEeC6m4lNxCxazg" guid="-uGXQwt8bXzdp8FAzmwObQg">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The Designing Time Model is the way that the Modelica Complier is integrated with the target system as a server. As a result, the client application can compile the Modelica Model and do simulation dynamically.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>In the context of design time models, we would like to integrate the Modelica Server to our development process. We will have a model-based software development environment which allows interacting between Java program and Modelica Server dynamically. The OpenModelica API would be used here to integrate the Modelica Server with existing Java program. Domain concepts in Eclipse Ecore can also be used as a basis for automatically creating models (classes) in Modelica. The ideal Modelica invoke process would like:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The users can create the models in client side of target system;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The users send the models as required parameters to web server;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The web server interacts with Modelica Server and gets the calculated results or simulations;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The calculated results or simulations are sent to client side dynamically;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 10pt&quot; class=MsoNormal>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following is an architecture diagram we design for Modelica Web Service.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing align=center>&lt;SPAN style=&quot;FONT-SIZE: 12pt; mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/untitled.bmp&quot; width=532 height=492>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805383&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805383&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>16&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805383&quot;>. Modelica Web Service Architecture&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;SPAN style=&quot;FONT-SIZE: 12pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Run time models integration is a simple way of invoking Modelica model and it just support the Modelica functionalities in run time. However, the final target of the methodology is to provide a web service mechanism for design-time interaction, and it can typically used for tool integration. For instants, it can provide integrating editors with the OpenModelica compiler.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&amp;nbsp;&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-T9PcB2bxr6BB3Ave7i0oDw" name="modelica_web_service,_mA-gZKGIEeC6m4lNxCxazg" guid="-T9PcB2bxr6BB3Ave7i0oDw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The Running Time Model is the way that the Modelica Model can be invoked as a program at the operating-system level, which is usually a Java class here.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>We have recognized the OpenModelica Project&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&amp;nbsp; &lt;/SPAN>as a good chance to achieve the above benefits with a reasonable amount of time and effort. The OpenModelica Project is an open source project and the OpenModelica Compiler (OMC) is by default targeted to C code generation. It would be possible to wrap the C code of a model into a Java wrapper code to be used by the Java Web Service with Java Native Interface technology. However, this approach leads to unmanaged native code to be called. More, they are not easily portable because of the need to be compiled separately for each target platform.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following picture shows translation phases of OpenModelica Compiler&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoNormal align=center>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/MOdelica Runtime.bmp&quot; width=512 height=384>&lt;/o:lock>&lt;/v:shapetype>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805382&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805382&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>15&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805382&quot;>. OpenModelica Translation Phases&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>In short description of the translation process of Modelica models, the OMC takes the source code of a model and translates it through several transformations into an internal representation of simulation code. In the last phase, C code is generated, compiled and linked with a simulation runtime into the final executable file. The simulation of the model is done by running the executable.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>In the context of run time models, system architect invoke model in this way:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Model the functionality according to the requirement, present the models as Modelica Script;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>See how these Modelica Script is compiled in Modelica compilers like OpenModelica, get the compiled results. Usually they are some C++ files; &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use pre-compiled Java program units to invoke the executables C++ Modelica method for existing system through Java Native Interface.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-ZwCxvxdXgfoE-6NCilM7UA" name="define_service_migration_model,_CjIbF1OlEeCEwfF5AiV8xA" guid="-ZwCxvxdXgfoE-6NCilM7UA">
    <refinedDescription>&lt;p>&#xD;
    The &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.architecture.model_driven_migration.base-sintef/workproducts/service_migration_model_5EA7017F.html&quot;&#xD;
     guid=&quot;_kbzucFCsEeCQQoyAiE5Lcw&quot;>Service migration model&lt;/a> describes the IT perspective of an SOA and contains the&#xD;
    spesifications of service interfaces, interfaces and message types, opperation behaviours, service orchestration and&#xD;
    software componenst. The &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.architecture.model_driven_migration.base-sintef/workproducts/service_migration_model_5EA7017F.html&quot;&#xD;
     guid=&quot;_kbzucFCsEeCQQoyAiE5Lcw&quot;>Service migration model&lt;/a>&amp;nbsp; is built in the two tasks &lt;em>define service&#xD;
    interfaces&lt;/em> and &lt;em>define operation behaviours&lt;/em>.&lt;br />&#xD;
    The model represents a so-called platform-independent model (PIM) according&amp;nbsp;to the MDA approach.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-7RjRx4iCwIDp1f6h-QreMg" name="define_service_interfaces,_CjIbHlOlEeCEwfF5AiV8xA" guid="-7RjRx4iCwIDp1f6h-QreMg">
    <refinedDescription>&lt;p>&#xD;
    The main purpose of the service interface is to provide structural features, and to specify the interactions between&#xD;
    the software components of the service-oriented architecture.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-uXSbSfwODDxVq0A5MAbdPA" name="define_operation_behaviours,_CjIbG1OlEeCEwfF5AiV8xA" guid="-uXSbSfwODDxVq0A5MAbdPA">
    <refinedDescription>In this task behavioural features are defined&amp;nbsp;and they have to comply with the service interfaces that are defined in&#xD;
the previous task. The behaviours is specified using UML activity models using the behaviour stereotypes defined in the UML&#xD;
profile.&amp;nbsp;</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-6jQ5PBsCOfp8nONAcuqQ2g" name="generate_web_services,_CjIbGFOlEeCEwfF5AiV8xA" guid="-6jQ5PBsCOfp8nONAcuqQ2g">
    <refinedDescription>Generate Web services using model transformation to text that specifies mapping rules from migration models to source code,&#xD;
i.e. structural elements of the models is mapped to structural elements and behavioural elements such as actions are mapped&#xD;
to statements during code generation.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-DZcXyJHFcVp2A3sZETikGQ" name="implement_business_logic,_CjIbI1OlEeCEwfF5AiV8xA" guid="-DZcXyJHFcVp2A3sZETikGQ">
    <refinedDescription>Write business logic that coresponds to the operational behavioural spesifications.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-NZ3hoY0KbpTuuXf9jVikqw" name="service_migration_model,_CjIbFFOlEeCEwfF5AiV8xA" guid="-NZ3hoY0KbpTuuXf9jVikqw">
    <refinedDescription>&lt;p>&#xD;
    The service migration model describes the IT perspective of an SOA and contains the spesifications of service&#xD;
    interfaces, interfaces and message types, opperation behaviours, service orchestration and software componenst. The&#xD;
    service migration model is built in the two tasks &lt;em>define service interfaces&lt;/em> and &lt;em>define operation&#xD;
    behaviours&lt;/em>.&lt;br />&#xD;
    The model represents a so-called platform-independent model (PIM) according&amp;nbsp;to the MDA approach.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-k2obKKZenKLebJTRzpUCHg" name="build,_mBuHQaGIEeC6m4lNxCxazg" guid="-k2obKKZenKLebJTRzpUCHg">
    <refinedDescription>&lt;p>
    This working version of the system or part of the system&amp;nbsp;is the result of putting the implementation through a
    build process (typically an automated build script) that creates an executable version, or one that runs. This
    executable version will typically have a number of supporting files that are also considered part of this artifact.
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-TsfZCDfE4QNPTYXAYhHodA" name="developer_test,_mBuHRKGIEeC6m4lNxCxazg" guid="-TsfZCDfE4QNPTYXAYhHodA">
    <refinedDescription>&lt;p>
    This artifact covers all of the steps to validate a specific aspect of an implementation element. For example, a test
    could ensure that the parameters of a method properly accept the uppermost and lowermost required values. A developer
    test specifies test entries, execution conditions, and expected results. These details are identified to evaluate a
    particular aspect of a scenario.
&lt;/p>
&lt;p>
    When you collect developer tests for a specific implementation element, you can validate that the element performs as
    specified.
&lt;/p>
&lt;p>
    The tests be self-documenting so that it is clear upon completion of the test whether the implementation element has
    run correctly.
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-qKztgbIyCo3YPWr5c7y0Pw" name="implementation,_mBuHR6GIEeC6m4lNxCxazg" guid="-qKztgbIyCo3YPWr5c7y0Pw">
    <refinedDescription>&lt;p> 
   This artifact is the collection of one or more of these elements: &lt;/p> &lt;ul>
&lt;li>         Source code files     &lt;/li>
&lt;li>         Data files     &lt;/li>
&lt;li>         Build scripts     &lt;/li>
&lt;li>         Other files that are transformed into the executable system 
   &lt;/li>
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-F5nEp5cnesBiihu8tUa3Lw" name="matlab_as_service,_mBuHSqGIEeC6m4lNxCxazg" guid="-F5nEp5cnesBiihu8tUa3Lw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The usage of Providing MATLAB as a Service here will mainly satisfy the requirements from “Mathematic Modeling” and “Service Modeling“aspects.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>According to the introduction from MathWorks, there are three ways to deploy MATLAB as a web service currently&lt;?xml:namespace prefix = w ns = &quot;urn:schemas-microsoft-com:office:word&quot; />&lt;w:Sdt id=6082354 Citation=&quot;t&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/SPAN>&lt;/SPAN>&lt;/w:Sdt>.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use MATLAB Builder NE to create a server-side .NET component;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use MATLAB Builder JA to create a server-side Java component;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use COM automation, CGI, or other technologies to access MATLAB through web.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>With MATLAB Builder NE or JA, user can integrate MATLAB application with .NET and COM components, or Java program, and then deployed this application as web service. A .NET, or COM, or Java wrapper is used here to invoke the encrypted MATLAB functions. This wrapper runs against the MATLAB Compiler Runtime (MCR) and can share the MATLAB libraries. The MATLAB function is invoked as Java method or methods of any other COM or .NET class. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>MathWorks gives a mechanism to provide the MATLAB function into a deployable, portable, robust, scalable Web application, which we could see from the diagram below.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/MTALAB.bmp&quot; width=580 height=532>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805380&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805380&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>13&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805380&quot;>. Architecture of Proving MATLAB as a Service&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>For builder NE, users can integrate a MATLAB based .NET or COM component into an existing .NET or COM application by installing both the component and the MCR on the target machine. For Web applications, the builder also provides a .NET custom control that allows zoom, pan, and rotate functionality for figures created in MATLAB. Users can also use the custom control from the toolbox in Visual Studio. With the builder support for the .NET remoting API, users can also run their class as a persistent service or spread their processing across multiple processes. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>For builder JA, MATLAB allows users to present the MATLAB calculation or simulation results into servlets or Java Server Page. Users can integrate a MATLAB based Java class into an existing Java infrastructure by installing the class and the MCR on the target machine. For Web applications that use JSP technology or servlets, the builder provides AJAX-based zoom, pan, and rotate controls for figures created in MATLAB. Using the builder's Remote Method Invocation (RMI) interface, users can also run their class as a persistent service, or spread their processing across multiple processes. Java classes created with the builder can be distributed at no additional charge.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>A typical example of providing MATLAB as web service is shown in the website of MATLAB, which we could see in the following table. This example allows users to input parameters from web browser, then the parameter will be passed to MATLAB service and return the simulation result, the result will be present in client web browser.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/MATLAB2.bmp&quot; width=580 height=488>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805381&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805381&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>14&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805381&quot;>. Calculation Results from MATLAB Web Service&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-yLctdk6skWbYSCnglBLg_A" name="modelica_design_time_model,_mBuHTaGIEeC6m4lNxCxazg" guid="-yLctdk6skWbYSCnglBLg_A">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The Designing Time Model is the way that the Modelica Complier is integrated with the target system as a server. As a result, the client application can compile the Modelica Model and do simulation dynamically.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>In the context of design time models, we would like to integrate the Modelica Server to our development process. We will have a model-based software development environment which allows interacting between Java program and Modelica Server dynamically. The OpenModelica API would be used here to integrate the Modelica Server with existing Java program. Domain concepts in Eclipse Ecore can also be used as a basis for automatically creating models (classes) in Modelica. The ideal Modelica invoke process would like:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The users can create the models in client side of target system;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The users send the models as required parameters to web server;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The web server interacts with Modelica Server and gets the calculated results or simulations;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The calculated results or simulations are sent to client side dynamically;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 10pt&quot; class=MsoNormal>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following is an architecture diagram we design for Modelica Web Service.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing align=center>&lt;SPAN style=&quot;FONT-SIZE: 12pt; mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/untitled.bmp&quot; width=532 height=492>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805383&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805383&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>16&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805383&quot;>. Modelica Web Service Architecture&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;SPAN style=&quot;FONT-SIZE: 12pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Run time models integration is a simple way of invoking Modelica model and it just support the Modelica functionalities in run time. However, the final target of the methodology is to provide a web service mechanism for design-time interaction, and it can typically used for tool integration. For instants, it can provide integrating editors with the OpenModelica compiler.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&amp;nbsp;&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-EM1M-ir6umqd7AMXAqIbog" name="modelica_web_service,_mBuHUKGIEeC6m4lNxCxazg" guid="-EM1M-ir6umqd7AMXAqIbog">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The Running Time Model is the way that the Modelica Model can be invoked as a program at the operating-system level, which is usually a Java class here.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>We have recognized the OpenModelica Project&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&amp;nbsp; &lt;/SPAN>as a good chance to achieve the above benefits with a reasonable amount of time and effort. The OpenModelica Project is an open source project and the OpenModelica Compiler (OMC) is by default targeted to C code generation. It would be possible to wrap the C code of a model into a Java wrapper code to be used by the Java Web Service with Java Native Interface technology. However, this approach leads to unmanaged native code to be called. More, they are not easily portable because of the need to be compiled separately for each target platform.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following picture shows translation phases of OpenModelica Compiler&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoNormal align=center>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/MOdelica Runtime.bmp&quot; width=512 height=384>&lt;/o:lock>&lt;/v:shapetype>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805382&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805382&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>15&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805382&quot;>. OpenModelica Translation Phases&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>In short description of the translation process of Modelica models, the OMC takes the source code of a model and translates it through several transformations into an internal representation of simulation code. In the last phase, C code is generated, compiled and linked with a simulation runtime into the final executable file. The simulation of the model is done by running the executable.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>In the context of run time models, system architect invoke model in this way:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Model the functionality according to the requirement, present the models as Modelica Script;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>See how these Modelica Script is compiled in Modelica compilers like OpenModelica, get the compiled results. Usually they are some C++ files; &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use pre-compiled Java program units to invoke the executables C++ Modelica method for existing system through Java Native Interface.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-8JQuoXB-9MV9jNufZr7TGg" name="service_interface_and_component_model,_mB3RMaGIEeC6m4lNxCxazg" guid="-8JQuoXB-9MV9jNufZr7TGg">
    <refinedDescription>&lt;p>&#xD;
    A SoaML model aims to define the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Identifying services, the requirements they are intended to fulfill, and the anticipated dependencies between them.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Specifying services including the functional capabilities they provide, what capabilities consumers are expected to&#xD;
        provide, the protocols or rules for using them, and the service information exchanged between consumers and&#xD;
        providers.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Defining service consumers and providers, what requisition and services they consume and provide, how they are&#xD;
        connected and how the service functional capabilities are used by consumers and implemented by providers in a&#xD;
        manner consistent with both the service specification protocols and fulfilled requirements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The policies for using and providing services.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The ability to define classification schemes having aspects to support a broad range of architectural,&#xD;
        organizational and physical partitioning schemes and constraints.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Defining service and service usage requirements and linking them to related OMG metamodels, such as the BMM&#xD;
        course_of_action, BPDM Process, UPDM OperationalCapability and/or UML UseCase model elements they realize, support&#xD;
        or fulfill.&#xD;
    &lt;/li>&#xD;
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-XpDqESCLt0fgf7pVhf-TeA" name="behavior_diagram,_mB3RNKGIEeC6m4lNxCxazg" guid="-XpDqESCLt0fgf7pVhf-TeA">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a BPMN example which show the details process of how Temperature Monitoring System get real time temperature and report feedback.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=BPMN src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/BPMN.png&quot; width=600 height=423>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805376&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805376&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>9&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805376&quot;>. BPMN example for Real Time Temperature Report&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-CABHJ1mF7afJmJR0AZ3qlw" name="community_services_architecture,_mCBCMaGIEeC6m4lNxCxazg" guid="-CABHJ1mF7afJmJR0AZ3qlw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Because we use the top down approach solution, with the “community services architecture”, we can have the top level view of how participants work together for some purpose. The services architecture of a community does not assume or require any one controlling entity or process. Other services architectures and service contracts may be used here. A community Services Architecture is defined using a UML Collaboration.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>The purpose of collaboration is to illustrate how kinds of entities work together for some purpose. The services architecture serves to define the requirements of each of the participants. . The participant roles are filled by participants with service ports required of the entities that fill these roles and are then bound by the services architectures in which they participate.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>This is a service architecture diagram for Scientific Temperature Monitoring System. It shows the Service Orient Architecture design of how user uses the Temperature Monitoring System.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;IMG alt=&quot;SoaML Service Architecture&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/SoaML Service Architecture.png&quot; width=600 height=365>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805375&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805375&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>8&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805375&quot;>. Service Architecture example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>There are three service participants in this model: Operator, Administrator, and Temperature System. The three participants communicate with each other through different service collaboration services.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Cg3gzxEntD7o7KzBul9Vyw" name="participant_services_architecture,_mCBCNKGIEeC6m4lNxCxazg" guid="-Cg3gzxEntD7o7KzBul9Vyw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>An example of participant service architecture for “Temperature Monitor” is shown in the following diagram.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;Participant Services Architecture&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Participant Services Architecture.png&quot; width=537 height=277>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805377&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805377&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>10&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805377&quot;>. Participant services architecture Example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-N5x6di3-_jy-ptm86PxmZQ" name="requirement_diagram_and_use_case_diagram,_mCBCN6GIEeC6m4lNxCxazg" guid="-N5x6di3-_jy-ptm86PxmZQ">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a requirement diagram of Temperature Monitoring Scientific software.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>&lt;/FONT>&amp;nbsp;&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>&lt;IMG alt=&quot;Requirement Diagram&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/./resources/Requirement Diagram.png&quot; width=588 height=290>&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 coordsize=&quot;21600,21600&quot; o:spt=&quot;75&quot; o:preferrelative=&quot;t&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; filled=&quot;f&quot; stroked=&quot;f&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;>&lt;/v:path>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:lock v:ext=&quot;edit&quot; aspectratio=&quot;t&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805373&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805373&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>6&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805373&quot;>. MOSiSaS Methodology Requirement Diagram&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>This requirement diagram presents the requirements from two aspects: Functionality and Operating Environment. There are also some sub requirements in each specific aspect.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3>&lt;FONT face=Calibri>The requirement diagram includes all the requirements while use case diagram presents the functional requirements. Use case is considered as a mechanism to capture the functional system requirement.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a use case diagram shows the functional requirement in the scientific temperature monitoring system:&lt;/FONT>&lt;SPAN style=&quot;BORDER-BOTTOM: black 1pt; BORDER-LEFT: black 1pt; PADDING-BOTTOM: 0cm; PADDING-LEFT: 0cm; LAYOUT-GRID-MODE: line; PADDING-RIGHT: 0cm; FONT-FAMILY: 'Times New Roman','serif'; BACKGROUND: black; COLOR: black; FONT-SIZE: 0pt; BORDER-TOP: black 1pt; BORDER-RIGHT: black 1pt; PADDING-TOP: 0cm; mso-fareast-font-family: 'Times New Roman'; mso-border-alt: none black 0cm; mso-font-width: 0%&quot;> &lt;/SPAN>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&amp;nbsp;&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;IMG alt=&quot;Use Case&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/./resources/Use Case.png&quot; width=600 height=420>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;a name=&quot;_Toc238805374&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>7&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>. Use Case example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The system actors, such as Administrator and Operator, have different use cases, which stand for the functional requirements from different actors. The relationship between Use Cases could be include or extend.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-1fo3_wp2OuVFrutKJ_OMMQ" name="logical_architecture,_mCBCOqGIEeC6m4lNxCxazg" guid="-1fo3_wp2OuVFrutKJ_OMMQ">
    <refinedDescription>&amp;lt;TBD&amp;gt;</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-m0wQzmScCC7ZDcKAcT3GFA" name="matlab_or_modelica_mathematical_model,_mCBCPaGIEeC6m4lNxCxazg" guid="-m0wQzmScCC7ZDcKAcT3GFA">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Here we use Temperature Constrains as an example to show how to use Modelica Language. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The temperature checking algorithm Modelica script:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>function temperatureConstrains&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>input&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>Real temperature;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>output&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp; &lt;/SPAN>String feedback;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>protected&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>constant Real max = 2000;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>constant Real min = -200;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>algorithm&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>if temperature &amp;gt; max then&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Dangerous! Temperature too high.&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>elseif temperature &amp;lt; min then&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Dangerous! Temperature too low.&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>else &lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Temperature is in secure range&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>end if;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>end temperatureConstrains;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>If we input the temperature like 500, the algorithm should give output like “Temperature is in secure range”.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-uIzplfaJncVAFWS8EqmZTg" name="service_specification,_mCBCQKGIEeC6m4lNxCxazg" guid="-uIzplfaJncVAFWS8EqmZTg">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following model is service specification diagram. It shows how Temperature Monitor provides service to and receives service from other participants. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;Service Specfication Example&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Service Specfication Example.png&quot; width=360 height=326>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805379&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805379&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>12&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805379&quot;>. Service Specification Example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>From this model we can see there are two service interfaces for the service provider Temperature Monitor. The required interface “DataReceiverInterface” provides two functions, which allows user to receive and filter temperature data. &lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/SPAN>The provided interface “DataAnalyserInterface” provides two functions, which can check temperature and send the feedback to operators.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-peH9PigHAbQjo_Tw3DTVEg" name="structure_diagram,_mCBCQ6GIEeC6m4lNxCxazg" guid="-peH9PigHAbQjo_Tw3DTVEg">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a block model for Temperature Monitor. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;IMG alt=&quot;Block diagram example&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Block.png&quot; width=545 height=270>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805378&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805378&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>11&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805378&quot;>. Block diagram example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>We can see there are two internal blocks inside Temperature Monitor, and they are Data Receiver and Temperature Analyzer. The “Data Receiver” gets the real time temperature data and filters the useless data.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>Then the temperature data is passed to Block “Temperature Analyzer” gets the data and checks whether the data is in safe range. According to the checked result, the feedback result is sent to operator.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-XeqWmT3-JAjp456qm0i8rA" name="test_case,_mCKMIaGIEeC6m4lNxCxazg" guid="-XeqWmT3-JAjp456qm0i8rA">
    <refinedDescription>&lt;p>A
test case specifies the conditions that must be validated to enable an assessment
of aspects of the system under test.  A test case is more formal than a test
idea; typically, a test case takes the form of a specification. In less formal
environments, you can create test cases by identifying a unique ID, name,
associated test data, and expected results.  &lt;/p> &lt;p> Test cases can be derived
from many sources, and typically include a subset of the requirements (such
as use cases, performance characteristics, and reliability concerns) and other
types of quality attributes. For more  information on types of tests and their
relationships to quality test attributes, see &lt;a class=&quot;elementLinkWithType&quot;
href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/testing_qualitative_rqmts_CAE80710.html&quot;
guid=&quot;_0aJ6cMlgEdmt3adZL5Dmdw&quot;>Concept: Testing Qualitative Requirements&lt;/a>. &lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-MBMsbIx6JpFpNNQmSjo6YQ" name="test_log,_mCKMJKGIEeC6m4lNxCxazg" guid="-MBMsbIx6JpFpNNQmSjo6YQ">
    <refinedDescription>This
artifact provides a detailed, typically time-based record that both verifies
that a set of tests were run, and provides information that relates to the
success of those tests.  The focus is typically on providing an accurate audit
trail, which enables you to undertake a post-run diagnosis of failures. This
raw data is subsequently analyzed to determine the results of an aspect of
the test effort.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-IdE_f6o50DLta2h2MG1cWg" name="perform_unit_and_integration_test,_CjIbKVOlEeCEwfF5AiV8xA" guid="-IdE_f6o50DLta2h2MG1cWg">
    <refinedDescription>&lt;p>&#xD;
    There are three different practices to choose from, &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.tech.concurrent_testing.base/guidances/practices/concurrent_testing_AF686531.html&quot;&#xD;
    guid=&quot;_9z1PgJ6NEdyQN-zRFaRrCQ&quot;>Concurrent Testing&lt;/a>, &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.tech.continuous_integration.base/guidances/practices/continous_integration_58673D65.html&quot;&#xD;
    guid=&quot;_rJNiMB4rEd2bS8fFOQ7WWA&quot;>Continuous Integration&lt;/a> and &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.tech.test_driven_development.base/guidances/guidelines/test_driven_development_F581182D.html&quot;&#xD;
    guid=&quot;_5s_DUJ03EdyQ3oTO93enUw&quot;>Test Driven Development&lt;/a>. Choose the practice that suits the project.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-gQKzT0mnkDI_NX65JV4usQ" name="test_case,_mDDkAaGIEeC6m4lNxCxazg" guid="-gQKzT0mnkDI_NX65JV4usQ">
    <refinedDescription>&lt;p>A
test case specifies the conditions that must be validated to enable an assessment
of aspects of the system under test.  A test case is more formal than a test
idea; typically, a test case takes the form of a specification. In less formal
environments, you can create test cases by identifying a unique ID, name,
associated test data, and expected results.  &lt;/p> &lt;p> Test cases can be derived
from many sources, and typically include a subset of the requirements (such
as use cases, performance characteristics, and reliability concerns) and other
types of quality attributes. For more  information on types of tests and their
relationships to quality test attributes, see &lt;a class=&quot;elementLinkWithType&quot;
href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/testing_qualitative_rqmts_CAE80710.html&quot;
guid=&quot;_0aJ6cMlgEdmt3adZL5Dmdw&quot;>Concept: Testing Qualitative Requirements&lt;/a>. &lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-2OqU5rznMHowVw_dWAp2qg" name="test_log,_mDDkBKGIEeC6m4lNxCxazg" guid="-2OqU5rznMHowVw_dWAp2qg">
    <refinedDescription>This
artifact provides a detailed, typically time-based record that both verifies
that a set of tests were run, and provides information that relates to the
success of those tests.  The focus is typically on providing an accurate audit
trail, which enables you to undertake a post-run diagnosis of failures. This
raw data is subsequently analyzed to determine the results of an aspect of
the test effort.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-D5ypqcB5YBvXd-JFz8LdTw" name="model_driven_migration,_Px-uoaGIEeC6m4lNxCxazg" guid="-D5ypqcB5YBvXd-JFz8LdTw"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-aijHD3n4xz8DcDJH1n9ufw" name="define_service_migration_model,_TmT74KGIEeC6m4lNxCxazg" guid="-aijHD3n4xz8DcDJH1n9ufw">
    <refinedDescription>&lt;p>&#xD;
    The &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.architecture.model_driven_migration.base-sintef/workproducts/service_migration_model_5EA7017F.html&quot;&#xD;
     guid=&quot;_kbzucFCsEeCQQoyAiE5Lcw&quot;>Service migration model&lt;/a> describes the IT perspective of an SOA and contains the&#xD;
    spesifications of service interfaces, interfaces and message types, opperation behaviours, service orchestration and&#xD;
    software componenst. The &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.architecture.model_driven_migration.base-sintef/workproducts/service_migration_model_5EA7017F.html&quot;&#xD;
     guid=&quot;_kbzucFCsEeCQQoyAiE5Lcw&quot;>Service migration model&lt;/a>&amp;nbsp; is built in the two tasks &lt;em>define service&#xD;
    interfaces&lt;/em> and &lt;em>define operation behaviours&lt;/em>.&lt;br />&#xD;
    The model represents a so-called platform-independent model (PIM) according&amp;nbsp;to the MDA approach.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="--qPDqYa8l_zB7-eZTzDMaw" name="system_developer,_TmT74aGIEeC6m4lNxCxazg" guid="--qPDqYa8l_zB7-eZTzDMaw"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-GgvDqw-HGfa-9aW_A5LdtQ" name="system_architect,_TmT746GIEeC6m4lNxCxazg" guid="-GgvDqw-HGfa-9aW_A5LdtQ">
    <refinedDescription>This worker is involved in the design of the components which compose the software system. This worker is involved in the&#xD;
design of the architecture of the system, with its components and their interfaces.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-eSueSvquRK8s0ZwzxA5mHQ" name="tester,_TmT75aGIEeC6m4lNxCxazg" guid="-eSueSvquRK8s0ZwzxA5mHQ">
    <refinedDescription>&lt;p> The person in this role is primarily responsible for the following&amp;nbsp;tasks: 
&lt;/p>
&lt;ul>
  &lt;li> Identifying the tests&amp;nbsp;that need to&amp;nbsp;be performed &lt;/li>
  &lt;li> Identifying the most appropriate implementation approach for a given test 
  &lt;/li>
  &lt;li> Implementing individual tests &lt;/li>
  &lt;li> Setting up and running the tests &lt;/li>
  &lt;li> Logging outcomes and verifying that the tests have been run &lt;/li>
  &lt;li> Analyzing and guiding the recovery from execution errors &lt;/li>
  &lt;li> Communicating test results to the team &lt;/li>
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-NB-BMG3esJ3mGbj7_TdKzw" name="service_migration_model,_TmdF0KGIEeC6m4lNxCxazg" guid="-NB-BMG3esJ3mGbj7_TdKzw">
    <refinedDescription>&lt;p>&#xD;
    The service migration model describes the IT perspective of an SOA and contains the spesifications of service&#xD;
    interfaces, interfaces and message types, opperation behaviours, service orchestration and software componenst. The&#xD;
    service migration model is built in the two tasks &lt;em>define service interfaces&lt;/em> and &lt;em>define operation&#xD;
    behaviours&lt;/em>.&lt;br />&#xD;
    The model represents a so-called platform-independent model (PIM) according&amp;nbsp;to the MDA approach.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-KM-5ngsBf1krhBd0uOVfiw" name="as_is_architecture_model,_Tm5xwaGIEeC6m4lNxCxazg" guid="-KM-5ngsBf1krhBd0uOVfiw">
    <refinedDescription>&amp;lt;TBD&amp;gt;</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-y0RTxIgy98lrD32kjOTY4g" name="define_service_interfaces,_UXJi8KGIEeC6m4lNxCxazg" guid="-y0RTxIgy98lrD32kjOTY4g">
    <refinedDescription>&lt;p>&#xD;
    The main purpose of the service interface is to provide structural features, and to specify the interactions between&#xD;
    the software components of the service-oriented architecture.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-UMZEXj2VU8UbAbuFOA9hgQ" name="define_operation_behaviours,_VYlKwKGIEeC6m4lNxCxazg" guid="-UMZEXj2VU8UbAbuFOA9hgQ">
    <refinedDescription>In this task behavioural features are defined&amp;nbsp;and they have to comply with the service interfaces that are defined in&#xD;
the previous task. The behaviours is specified using UML activity models using the behaviour stereotypes defined in the UML&#xD;
profile.&amp;nbsp;</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-1YXEiyPs8mL7Q_WvXagycA" name="test_case,_A0HcoaGSEeC38bl9wJwlEw" guid="-1YXEiyPs8mL7Q_WvXagycA">
    <refinedDescription>&lt;p>A
test case specifies the conditions that must be validated to enable an assessment
of aspects of the system under test.  A test case is more formal than a test
idea; typically, a test case takes the form of a specification. In less formal
environments, you can create test cases by identifying a unique ID, name,
associated test data, and expected results.  &lt;/p> &lt;p> Test cases can be derived
from many sources, and typically include a subset of the requirements (such
as use cases, performance characteristics, and reliability concerns) and other
types of quality attributes. For more  information on types of tests and their
relationships to quality test attributes, see &lt;a class=&quot;elementLinkWithType&quot;
href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/testing_qualitative_rqmts_CAE80710.html&quot;
guid=&quot;_0aJ6cMlgEdmt3adZL5Dmdw&quot;>Concept: Testing Qualitative Requirements&lt;/a>. &lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-tnuT9Zxs9YoSE9iLN5eY7g" name="test_log,_A0HcpKGSEeC38bl9wJwlEw" guid="-tnuT9Zxs9YoSE9iLN5eY7g">
    <refinedDescription>This
artifact provides a detailed, typically time-based record that both verifies
that a set of tests were run, and provides information that relates to the
success of those tests.  The focus is typically on providing an accurate audit
trail, which enables you to undertake a post-run diagnosis of failures. This
raw data is subsequently analyzed to determine the results of an aspect of
the test effort.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-xHQPJJYE_0oLcTu1NTvsLw" name="build,_A0QmkaGSEeC38bl9wJwlEw" guid="-xHQPJJYE_0oLcTu1NTvsLw">
    <refinedDescription>&lt;p>
    This working version of the system or part of the system&amp;nbsp;is the result of putting the implementation through a
    build process (typically an automated build script) that creates an executable version, or one that runs. This
    executable version will typically have a number of supporting files that are also considered part of this artifact.
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-UcOzE67w_Q4QxAprW7vvtQ" name="developer_test,_A0QmlKGSEeC38bl9wJwlEw" guid="-UcOzE67w_Q4QxAprW7vvtQ">
    <refinedDescription>&lt;p>
    This artifact covers all of the steps to validate a specific aspect of an implementation element. For example, a test
    could ensure that the parameters of a method properly accept the uppermost and lowermost required values. A developer
    test specifies test entries, execution conditions, and expected results. These details are identified to evaluate a
    particular aspect of a scenario.
&lt;/p>
&lt;p>
    When you collect developer tests for a specific implementation element, you can validate that the element performs as
    specified.
&lt;/p>
&lt;p>
    The tests be self-documenting so that it is clear upon completion of the test whether the implementation element has
    run correctly.
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-m8R8lWeS6WiEqrKsteMtTw" name="implementation,_A0Qml6GSEeC38bl9wJwlEw" guid="-m8R8lWeS6WiEqrKsteMtTw">
    <refinedDescription>&lt;p> 
   This artifact is the collection of one or more of these elements: &lt;/p> &lt;ul>
&lt;li>         Source code files     &lt;/li>
&lt;li>         Data files     &lt;/li>
&lt;li>         Build scripts     &lt;/li>
&lt;li>         Other files that are transformed into the executable system 
   &lt;/li>
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-IcbNLqLKhvSb_d9DEnQ_ng" name="matlab_as_service,_A0aXkaGSEeC38bl9wJwlEw" guid="-IcbNLqLKhvSb_d9DEnQ_ng">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The usage of Providing MATLAB as a Service here will mainly satisfy the requirements from “Mathematic Modeling” and “Service Modeling“aspects.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>According to the introduction from MathWorks, there are three ways to deploy MATLAB as a web service currently&lt;?xml:namespace prefix = w ns = &quot;urn:schemas-microsoft-com:office:word&quot; />&lt;w:Sdt id=6082354 Citation=&quot;t&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/SPAN>&lt;/SPAN>&lt;/w:Sdt>.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use MATLAB Builder NE to create a server-side .NET component;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use MATLAB Builder JA to create a server-side Java component;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use COM automation, CGI, or other technologies to access MATLAB through web.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>With MATLAB Builder NE or JA, user can integrate MATLAB application with .NET and COM components, or Java program, and then deployed this application as web service. A .NET, or COM, or Java wrapper is used here to invoke the encrypted MATLAB functions. This wrapper runs against the MATLAB Compiler Runtime (MCR) and can share the MATLAB libraries. The MATLAB function is invoked as Java method or methods of any other COM or .NET class. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>MathWorks gives a mechanism to provide the MATLAB function into a deployable, portable, robust, scalable Web application, which we could see from the diagram below.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/MTALAB.bmp&quot; width=580 height=532>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805380&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805380&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>13&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805380&quot;>. Architecture of Proving MATLAB as a Service&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>For builder NE, users can integrate a MATLAB based .NET or COM component into an existing .NET or COM application by installing both the component and the MCR on the target machine. For Web applications, the builder also provides a .NET custom control that allows zoom, pan, and rotate functionality for figures created in MATLAB. Users can also use the custom control from the toolbox in Visual Studio. With the builder support for the .NET remoting API, users can also run their class as a persistent service or spread their processing across multiple processes. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>For builder JA, MATLAB allows users to present the MATLAB calculation or simulation results into servlets or Java Server Page. Users can integrate a MATLAB based Java class into an existing Java infrastructure by installing the class and the MCR on the target machine. For Web applications that use JSP technology or servlets, the builder provides AJAX-based zoom, pan, and rotate controls for figures created in MATLAB. Using the builder's Remote Method Invocation (RMI) interface, users can also run their class as a persistent service, or spread their processing across multiple processes. Java classes created with the builder can be distributed at no additional charge.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>A typical example of providing MATLAB as web service is shown in the website of MATLAB, which we could see in the following table. This example allows users to input parameters from web browser, then the parameter will be passed to MATLAB service and return the simulation result, the result will be present in client web browser.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/MATLAB2.bmp&quot; width=580 height=488>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805381&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805381&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>14&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805381&quot;>. Calculation Results from MATLAB Web Service&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-8hu6At9UMFL2ETdnQoSPNg" name="modelica_design_time_model,_A0aXlKGSEeC38bl9wJwlEw" guid="-8hu6At9UMFL2ETdnQoSPNg">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The Designing Time Model is the way that the Modelica Complier is integrated with the target system as a server. As a result, the client application can compile the Modelica Model and do simulation dynamically.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>In the context of design time models, we would like to integrate the Modelica Server to our development process. We will have a model-based software development environment which allows interacting between Java program and Modelica Server dynamically. The OpenModelica API would be used here to integrate the Modelica Server with existing Java program. Domain concepts in Eclipse Ecore can also be used as a basis for automatically creating models (classes) in Modelica. The ideal Modelica invoke process would like:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The users can create the models in client side of target system;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The users send the models as required parameters to web server;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The web server interacts with Modelica Server and gets the calculated results or simulations;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The calculated results or simulations are sent to client side dynamically;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 10pt&quot; class=MsoNormal>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following is an architecture diagram we design for Modelica Web Service.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing align=center>&lt;SPAN style=&quot;FONT-SIZE: 12pt; mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/untitled.bmp&quot; width=532 height=492>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805383&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805383&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>16&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805383&quot;>. Modelica Web Service Architecture&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;SPAN style=&quot;FONT-SIZE: 12pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Run time models integration is a simple way of invoking Modelica model and it just support the Modelica functionalities in run time. However, the final target of the methodology is to provide a web service mechanism for design-time interaction, and it can typically used for tool integration. For instants, it can provide integrating editors with the OpenModelica compiler.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&amp;nbsp;&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-vT2lXsGcZnRnqa5n69tFNw" name="modelica_web_service,_A0aXl6GSEeC38bl9wJwlEw" guid="-vT2lXsGcZnRnqa5n69tFNw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The Running Time Model is the way that the Modelica Model can be invoked as a program at the operating-system level, which is usually a Java class here.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>We have recognized the OpenModelica Project&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&amp;nbsp; &lt;/SPAN>as a good chance to achieve the above benefits with a reasonable amount of time and effort. The OpenModelica Project is an open source project and the OpenModelica Compiler (OMC) is by default targeted to C code generation. It would be possible to wrap the C code of a model into a Java wrapper code to be used by the Java Web Service with Java Native Interface technology. However, this approach leads to unmanaged native code to be called. More, they are not easily portable because of the need to be compiled separately for each target platform.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following picture shows translation phases of OpenModelica Compiler&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoNormal align=center>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/MOdelica Runtime.bmp&quot; width=512 height=384>&lt;/o:lock>&lt;/v:shapetype>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805382&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805382&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>15&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805382&quot;>. OpenModelica Translation Phases&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>In short description of the translation process of Modelica models, the OMC takes the source code of a model and translates it through several transformations into an internal representation of simulation code. In the last phase, C code is generated, compiled and linked with a simulation runtime into the final executable file. The simulation of the model is done by running the executable.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>In the context of run time models, system architect invoke model in this way:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Model the functionality according to the requirement, present the models as Modelica Script;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>See how these Modelica Script is compiled in Modelica compilers like OpenModelica, get the compiled results. Usually they are some C++ files; &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use pre-compiled Java program units to invoke the executables C++ Modelica method for existing system through Java Native Interface.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-N7SVMNUJOC-nirblBmxk2g" name="service_interface_and_component_model,_A0jhgaGSEeC38bl9wJwlEw" guid="-N7SVMNUJOC-nirblBmxk2g">
    <refinedDescription>&lt;p>&#xD;
    A SoaML model aims to define the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Identifying services, the requirements they are intended to fulfill, and the anticipated dependencies between them.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Specifying services including the functional capabilities they provide, what capabilities consumers are expected to&#xD;
        provide, the protocols or rules for using them, and the service information exchanged between consumers and&#xD;
        providers.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Defining service consumers and providers, what requisition and services they consume and provide, how they are&#xD;
        connected and how the service functional capabilities are used by consumers and implemented by providers in a&#xD;
        manner consistent with both the service specification protocols and fulfilled requirements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The policies for using and providing services.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The ability to define classification schemes having aspects to support a broad range of architectural,&#xD;
        organizational and physical partitioning schemes and constraints.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Defining service and service usage requirements and linking them to related OMG metamodels, such as the BMM&#xD;
        course_of_action, BPDM Process, UPDM OperationalCapability and/or UML UseCase model elements they realize, support&#xD;
        or fulfill.&#xD;
    &lt;/li>&#xD;
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-sNDM_35du8xgoMnKXoXKng" name="behavior_diagram,_A0jhhKGSEeC38bl9wJwlEw" guid="-sNDM_35du8xgoMnKXoXKng">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a BPMN example which show the details process of how Temperature Monitoring System get real time temperature and report feedback.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=BPMN src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/BPMN.png&quot; width=600 height=423>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805376&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805376&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>9&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805376&quot;>. BPMN example for Real Time Temperature Report&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-6PaLVJCRNjAmaNXo_rY2tw" name="community_services_architecture,_A0jhh6GSEeC38bl9wJwlEw" guid="-6PaLVJCRNjAmaNXo_rY2tw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Because we use the top down approach solution, with the “community services architecture”, we can have the top level view of how participants work together for some purpose. The services architecture of a community does not assume or require any one controlling entity or process. Other services architectures and service contracts may be used here. A community Services Architecture is defined using a UML Collaboration.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>The purpose of collaboration is to illustrate how kinds of entities work together for some purpose. The services architecture serves to define the requirements of each of the participants. . The participant roles are filled by participants with service ports required of the entities that fill these roles and are then bound by the services architectures in which they participate.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>This is a service architecture diagram for Scientific Temperature Monitoring System. It shows the Service Orient Architecture design of how user uses the Temperature Monitoring System.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;IMG alt=&quot;SoaML Service Architecture&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/SoaML Service Architecture.png&quot; width=600 height=365>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805375&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805375&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>8&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805375&quot;>. Service Architecture example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>There are three service participants in this model: Operator, Administrator, and Temperature System. The three participants communicate with each other through different service collaboration services.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-IzUFYvCcCkNdVlTnClwkTg" name="participant_services_architecture,_A0jhiqGSEeC38bl9wJwlEw" guid="-IzUFYvCcCkNdVlTnClwkTg">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>An example of participant service architecture for “Temperature Monitor” is shown in the following diagram.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;Participant Services Architecture&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Participant Services Architecture.png&quot; width=537 height=277>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805377&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805377&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>10&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805377&quot;>. Participant services architecture Example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-_Wle2hP5GQsc4Pi93Qu50w" name="requirement_diagram_and_use_case_diagram,_A0tSgaGSEeC38bl9wJwlEw" guid="-_Wle2hP5GQsc4Pi93Qu50w">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a requirement diagram of Temperature Monitoring Scientific software.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>&lt;/FONT>&amp;nbsp;&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>&lt;IMG alt=&quot;Requirement Diagram&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/./resources/Requirement Diagram.png&quot; width=588 height=290>&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 coordsize=&quot;21600,21600&quot; o:spt=&quot;75&quot; o:preferrelative=&quot;t&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; filled=&quot;f&quot; stroked=&quot;f&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;>&lt;/v:path>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:lock v:ext=&quot;edit&quot; aspectratio=&quot;t&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805373&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805373&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>6&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805373&quot;>. MOSiSaS Methodology Requirement Diagram&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>This requirement diagram presents the requirements from two aspects: Functionality and Operating Environment. There are also some sub requirements in each specific aspect.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3>&lt;FONT face=Calibri>The requirement diagram includes all the requirements while use case diagram presents the functional requirements. Use case is considered as a mechanism to capture the functional system requirement.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a use case diagram shows the functional requirement in the scientific temperature monitoring system:&lt;/FONT>&lt;SPAN style=&quot;BORDER-BOTTOM: black 1pt; BORDER-LEFT: black 1pt; PADDING-BOTTOM: 0cm; PADDING-LEFT: 0cm; LAYOUT-GRID-MODE: line; PADDING-RIGHT: 0cm; FONT-FAMILY: 'Times New Roman','serif'; BACKGROUND: black; COLOR: black; FONT-SIZE: 0pt; BORDER-TOP: black 1pt; BORDER-RIGHT: black 1pt; PADDING-TOP: 0cm; mso-fareast-font-family: 'Times New Roman'; mso-border-alt: none black 0cm; mso-font-width: 0%&quot;> &lt;/SPAN>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&amp;nbsp;&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;IMG alt=&quot;Use Case&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/./resources/Use Case.png&quot; width=600 height=420>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;a name=&quot;_Toc238805374&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>7&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>. Use Case example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The system actors, such as Administrator and Operator, have different use cases, which stand for the functional requirements from different actors. The relationship between Use Cases could be include or extend.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-KxNftqU7BHB-zsy1CdfLkA" name="logical_architecture,_A0tShKGSEeC38bl9wJwlEw" guid="-KxNftqU7BHB-zsy1CdfLkA">
    <refinedDescription>&amp;lt;TBD&amp;gt;</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-HqwV9OeyrjAM4OBK941k7g" name="matlab_or_modelica_mathematical_model,_A0tSh6GSEeC38bl9wJwlEw" guid="-HqwV9OeyrjAM4OBK941k7g">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Here we use Temperature Constrains as an example to show how to use Modelica Language. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The temperature checking algorithm Modelica script:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>function temperatureConstrains&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>input&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>Real temperature;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>output&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp; &lt;/SPAN>String feedback;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>protected&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>constant Real max = 2000;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>constant Real min = -200;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>algorithm&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>if temperature &amp;gt; max then&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Dangerous! Temperature too high.&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>elseif temperature &amp;lt; min then&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Dangerous! Temperature too low.&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>else &lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Temperature is in secure range&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>end if;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>end temperatureConstrains;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>If we input the temperature like 500, the algorithm should give output like “Temperature is in secure range”.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Ol9h_DUkd9fTcLq6IbCrlg" name="service_specification,_A0tSiqGSEeC38bl9wJwlEw" guid="-Ol9h_DUkd9fTcLq6IbCrlg">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following model is service specification diagram. It shows how Temperature Monitor provides service to and receives service from other participants. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;Service Specfication Example&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Service Specfication Example.png&quot; width=360 height=326>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805379&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805379&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>12&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805379&quot;>. Service Specification Example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>From this model we can see there are two service interfaces for the service provider Temperature Monitor. The required interface “DataReceiverInterface” provides two functions, which allows user to receive and filter temperature data. &lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/SPAN>The provided interface “DataAnalyserInterface” provides two functions, which can check temperature and send the feedback to operators.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-3IuIrB5-3zhmqmXMrStDAw" name="structure_diagram,_A0tSjaGSEeC38bl9wJwlEw" guid="-3IuIrB5-3zhmqmXMrStDAw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a block model for Temperature Monitor. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;IMG alt=&quot;Block diagram example&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Block.png&quot; width=545 height=270>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805378&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805378&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>11&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805378&quot;>. Block diagram example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>We can see there are two internal blocks inside Temperature Monitor, and they are Data Receiver and Temperature Analyzer. The “Data Receiver” gets the real time temperature data and filters the useless data.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>Then the temperature data is passed to Block “Temperature Analyzer” gets the data and checks whether the data is in safe range. According to the checked result, the feedback result is sent to operator.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-DKyq2WTKE8_b7C57iq9bOw" name="test_case,_5ZHG0aGVEeC38bl9wJwlEw" guid="-DKyq2WTKE8_b7C57iq9bOw">
    <refinedDescription>&lt;p>A
test case specifies the conditions that must be validated to enable an assessment
of aspects of the system under test.  A test case is more formal than a test
idea; typically, a test case takes the form of a specification. In less formal
environments, you can create test cases by identifying a unique ID, name,
associated test data, and expected results.  &lt;/p> &lt;p> Test cases can be derived
from many sources, and typically include a subset of the requirements (such
as use cases, performance characteristics, and reliability concerns) and other
types of quality attributes. For more  information on types of tests and their
relationships to quality test attributes, see &lt;a class=&quot;elementLinkWithType&quot;
href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/testing_qualitative_rqmts_CAE80710.html&quot;
guid=&quot;_0aJ6cMlgEdmt3adZL5Dmdw&quot;>Concept: Testing Qualitative Requirements&lt;/a>. &lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-dAe8B3ehjhLIdTtJeiTT5Q" name="test_log,_5ZHG1KGVEeC38bl9wJwlEw" guid="-dAe8B3ehjhLIdTtJeiTT5Q">
    <refinedDescription>This
artifact provides a detailed, typically time-based record that both verifies
that a set of tests were run, and provides information that relates to the
success of those tests.  The focus is typically on providing an accurate audit
trail, which enables you to undertake a post-run diagnosis of failures. This
raw data is subsequently analyzed to determine the results of an aspect of
the test effort.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-yfYKfbygwbV_1892DS01vA" name="service_interface_and_component_model,_5ZQ30aGVEeC38bl9wJwlEw" guid="-yfYKfbygwbV_1892DS01vA">
    <refinedDescription>&lt;p>&#xD;
    A SoaML model aims to define the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Identifying services, the requirements they are intended to fulfill, and the anticipated dependencies between them.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Specifying services including the functional capabilities they provide, what capabilities consumers are expected to&#xD;
        provide, the protocols or rules for using them, and the service information exchanged between consumers and&#xD;
        providers.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Defining service consumers and providers, what requisition and services they consume and provide, how they are&#xD;
        connected and how the service functional capabilities are used by consumers and implemented by providers in a&#xD;
        manner consistent with both the service specification protocols and fulfilled requirements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The policies for using and providing services.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The ability to define classification schemes having aspects to support a broad range of architectural,&#xD;
        organizational and physical partitioning schemes and constraints.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Defining service and service usage requirements and linking them to related OMG metamodels, such as the BMM&#xD;
        course_of_action, BPDM Process, UPDM OperationalCapability and/or UML UseCase model elements they realize, support&#xD;
        or fulfill.&#xD;
    &lt;/li>&#xD;
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-iycwEMF5iOS0qo8Ahq9FWw" name="behavior_diagram,_5ZQ31KGVEeC38bl9wJwlEw" guid="-iycwEMF5iOS0qo8Ahq9FWw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a BPMN example which show the details process of how Temperature Monitoring System get real time temperature and report feedback.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=BPMN src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/BPMN.png&quot; width=600 height=423>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805376&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805376&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>9&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805376&quot;>. BPMN example for Real Time Temperature Report&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-BQyxx8b9wiCaGex1uR-oUA" name="community_services_architecture,_5ZQ316GVEeC38bl9wJwlEw" guid="-BQyxx8b9wiCaGex1uR-oUA">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Because we use the top down approach solution, with the “community services architecture”, we can have the top level view of how participants work together for some purpose. The services architecture of a community does not assume or require any one controlling entity or process. Other services architectures and service contracts may be used here. A community Services Architecture is defined using a UML Collaboration.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>The purpose of collaboration is to illustrate how kinds of entities work together for some purpose. The services architecture serves to define the requirements of each of the participants. . The participant roles are filled by participants with service ports required of the entities that fill these roles and are then bound by the services architectures in which they participate.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>This is a service architecture diagram for Scientific Temperature Monitoring System. It shows the Service Orient Architecture design of how user uses the Temperature Monitoring System.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;IMG alt=&quot;SoaML Service Architecture&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/SoaML Service Architecture.png&quot; width=600 height=365>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805375&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805375&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>8&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805375&quot;>. Service Architecture example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>There are three service participants in this model: Operator, Administrator, and Temperature System. The three participants communicate with each other through different service collaboration services.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Us5SX6QMZtwEjpDSHa3BjQ" name="participant_services_architecture,_5ZaBwaGVEeC38bl9wJwlEw" guid="-Us5SX6QMZtwEjpDSHa3BjQ">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>An example of participant service architecture for “Temperature Monitor” is shown in the following diagram.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;Participant Services Architecture&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Participant Services Architecture.png&quot; width=537 height=277>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805377&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805377&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>10&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805377&quot;>. Participant services architecture Example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-dHGA0YfZnWfZ-hdbuzlLLg" name="requirement_diagram_and_use_case_diagram,_5ZaBxKGVEeC38bl9wJwlEw" guid="-dHGA0YfZnWfZ-hdbuzlLLg">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a requirement diagram of Temperature Monitoring Scientific software.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>&lt;/FONT>&amp;nbsp;&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>&lt;IMG alt=&quot;Requirement Diagram&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/./resources/Requirement Diagram.png&quot; width=588 height=290>&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 coordsize=&quot;21600,21600&quot; o:spt=&quot;75&quot; o:preferrelative=&quot;t&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; filled=&quot;f&quot; stroked=&quot;f&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;>&lt;/v:path>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:lock v:ext=&quot;edit&quot; aspectratio=&quot;t&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805373&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805373&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>6&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805373&quot;>. MOSiSaS Methodology Requirement Diagram&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>This requirement diagram presents the requirements from two aspects: Functionality and Operating Environment. There are also some sub requirements in each specific aspect.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3>&lt;FONT face=Calibri>The requirement diagram includes all the requirements while use case diagram presents the functional requirements. Use case is considered as a mechanism to capture the functional system requirement.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a use case diagram shows the functional requirement in the scientific temperature monitoring system:&lt;/FONT>&lt;SPAN style=&quot;BORDER-BOTTOM: black 1pt; BORDER-LEFT: black 1pt; PADDING-BOTTOM: 0cm; PADDING-LEFT: 0cm; LAYOUT-GRID-MODE: line; PADDING-RIGHT: 0cm; FONT-FAMILY: 'Times New Roman','serif'; BACKGROUND: black; COLOR: black; FONT-SIZE: 0pt; BORDER-TOP: black 1pt; BORDER-RIGHT: black 1pt; PADDING-TOP: 0cm; mso-fareast-font-family: 'Times New Roman'; mso-border-alt: none black 0cm; mso-font-width: 0%&quot;> &lt;/SPAN>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&amp;nbsp;&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;IMG alt=&quot;Use Case&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/./resources/Use Case.png&quot; width=600 height=420>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;a name=&quot;_Toc238805374&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>7&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805374&quot;>. Use Case example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The system actors, such as Administrator and Operator, have different use cases, which stand for the functional requirements from different actors. The relationship between Use Cases could be include or extend.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-BDC7cakAjNKCP4gjZVuTzw" name="logical_architecture,_5ZaBx6GVEeC38bl9wJwlEw" guid="-BDC7cakAjNKCP4gjZVuTzw">
    <refinedDescription>&amp;lt;TBD&amp;gt;</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-99LcR5Sw3foPTQQqK_1GMw" name="matlab_or_modelica_mathematical_model,_5ZaByqGVEeC38bl9wJwlEw" guid="-99LcR5Sw3foPTQQqK_1GMw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Here we use Temperature Constrains as an example to show how to use Modelica Language. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The temperature checking algorithm Modelica script:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>function temperatureConstrains&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>input&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>Real temperature;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>output&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp; &lt;/SPAN>String feedback;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>protected&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>constant Real max = 2000;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>constant Real min = -200;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>algorithm&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>if temperature &amp;gt; max then&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Dangerous! Temperature too high.&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>elseif temperature &amp;lt; min then&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Dangerous! Temperature too low.&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>else &lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 2&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>feedback := &quot;Temperature is in secure range&quot;;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-tab-count: 1&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>end if;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;COLOR: #0070c0; FONT-SIZE: 11pt&quot;>&lt;FONT face=Calibri>end temperatureConstrains;&lt;o:p>&lt;/o:p>&lt;/FONT>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>If we input the temperature like 500, the algorithm should give output like “Temperature is in secure range”.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-1yPriQ62u5Z1Z23PTlVCcA" name="service_specification,_5ZaBzaGVEeC38bl9wJwlEw" guid="-1yPriQ62u5Z1Z23PTlVCcA">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following model is service specification diagram. It shows how Temperature Monitor provides service to and receives service from other participants. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain align=center>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;Service Specfication Example&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Service Specfication Example.png&quot; width=360 height=326>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805379&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805379&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>12&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805379&quot;>. Service Specification Example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>From this model we can see there are two service interfaces for the service provider Temperature Monitor. The required interface “DataReceiverInterface” provides two functions, which allows user to receive and filter temperature data. &lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/SPAN>The provided interface “DataAnalyserInterface” provides two functions, which can check temperature and send the feedback to operators.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Y97x0qrt-pm3bAC2k0Ad7Q" name="structure_diagram,_5ZaB0KGVEeC38bl9wJwlEw" guid="-Y97x0qrt-pm3bAC2k0Ad7Q">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following diagram is a block model for Temperature Monitor. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;IMG alt=&quot;Block diagram example&quot; src=&quot;./../../practice.architecture.mathematical_systems_engineering.base-sintef/workproducts/resources/Block.png&quot; width=545 height=270>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805378&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805378&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>11&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805378&quot;>. Block diagram example&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>We can see there are two internal blocks inside Temperature Monitor, and they are Data Receiver and Temperature Analyzer. The “Data Receiver” gets the real time temperature data and filters the useless data.&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp; &lt;/SPAN>Then the temperature data is passed to Block “Temperature Analyzer” gets the data and checks whether the data is in safe range. According to the checked result, the feedback result is sent to operator.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Y31X-n7uma2AkygrSKBY4Q" name="build,_5ZjywaGVEeC38bl9wJwlEw" guid="-Y31X-n7uma2AkygrSKBY4Q">
    <refinedDescription>&lt;p>
    This working version of the system or part of the system&amp;nbsp;is the result of putting the implementation through a
    build process (typically an automated build script) that creates an executable version, or one that runs. This
    executable version will typically have a number of supporting files that are also considered part of this artifact.
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-CgXhQrsJOHmEn3YE1ubnHA" name="developer_test,_5ZjyxKGVEeC38bl9wJwlEw" guid="-CgXhQrsJOHmEn3YE1ubnHA">
    <refinedDescription>&lt;p>
    This artifact covers all of the steps to validate a specific aspect of an implementation element. For example, a test
    could ensure that the parameters of a method properly accept the uppermost and lowermost required values. A developer
    test specifies test entries, execution conditions, and expected results. These details are identified to evaluate a
    particular aspect of a scenario.
&lt;/p>
&lt;p>
    When you collect developer tests for a specific implementation element, you can validate that the element performs as
    specified.
&lt;/p>
&lt;p>
    The tests be self-documenting so that it is clear upon completion of the test whether the implementation element has
    run correctly.
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-DtlEYqYTOu2V0KQEkYWbLw" name="implementation,_5Zjyx6GVEeC38bl9wJwlEw" guid="-DtlEYqYTOu2V0KQEkYWbLw">
    <refinedDescription>&lt;p> 
   This artifact is the collection of one or more of these elements: &lt;/p> &lt;ul>
&lt;li>         Source code files     &lt;/li>
&lt;li>         Data files     &lt;/li>
&lt;li>         Build scripts     &lt;/li>
&lt;li>         Other files that are transformed into the executable system 
   &lt;/li>
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-8jkGtWl8Gm-Kyp4f3MEnQQ" name="matlab_as_service,_5ZtjyqGVEeC38bl9wJwlEw" guid="-8jkGtWl8Gm-Kyp4f3MEnQQ">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The usage of Providing MATLAB as a Service here will mainly satisfy the requirements from “Mathematic Modeling” and “Service Modeling“aspects.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>According to the introduction from MathWorks, there are three ways to deploy MATLAB as a web service currently&lt;?xml:namespace prefix = w ns = &quot;urn:schemas-microsoft-com:office:word&quot; />&lt;w:Sdt id=6082354 Citation=&quot;t&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/SPAN>&lt;/SPAN>&lt;/w:Sdt>.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use MATLAB Builder NE to create a server-side .NET component;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use MATLAB Builder JA to create a server-side Java component;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use COM automation, CGI, or other technologies to access MATLAB through web.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>With MATLAB Builder NE or JA, user can integrate MATLAB application with .NET and COM components, or Java program, and then deployed this application as web service. A .NET, or COM, or Java wrapper is used here to invoke the encrypted MATLAB functions. This wrapper runs against the MATLAB Compiler Runtime (MCR) and can share the MATLAB libraries. The MATLAB function is invoked as Java method or methods of any other COM or .NET class. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>MathWorks gives a mechanism to provide the MATLAB function into a deployable, portable, robust, scalable Web application, which we could see from the diagram below.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/MTALAB.bmp&quot; width=580 height=532>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805380&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805380&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>13&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805380&quot;>. Architecture of Proving MATLAB as a Service&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>For builder NE, users can integrate a MATLAB based .NET or COM component into an existing .NET or COM application by installing both the component and the MCR on the target machine. For Web applications, the builder also provides a .NET custom control that allows zoom, pan, and rotate functionality for figures created in MATLAB. Users can also use the custom control from the toolbox in Visual Studio. With the builder support for the .NET remoting API, users can also run their class as a persistent service or spread their processing across multiple processes. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>For builder JA, MATLAB allows users to present the MATLAB calculation or simulation results into servlets or Java Server Page. Users can integrate a MATLAB based Java class into an existing Java infrastructure by installing the class and the MCR on the target machine. For Web applications that use JSP technology or servlets, the builder provides AJAX-based zoom, pan, and rotate controls for figures created in MATLAB. Using the builder's Remote Method Invocation (RMI) interface, users can also run their class as a persistent service, or spread their processing across multiple processes. Java classes created with the builder can be distributed at no additional charge.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>A typical example of providing MATLAB as web service is shown in the website of MATLAB, which we could see in the following table. This example allows users to input parameters from web browser, then the parameter will be passed to MATLAB service and return the simulation result, the result will be present in client web browser.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/MATLAB2.bmp&quot; width=580 height=488>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805381&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805381&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>14&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805381&quot;>. Calculation Results from MATLAB Web Service&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-AyzSmPdDs0bnCqDFu6xD5g" name="modelica_design_time_model,_5ZtjzaGVEeC38bl9wJwlEw" guid="-AyzSmPdDs0bnCqDFu6xD5g">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The Designing Time Model is the way that the Modelica Complier is integrated with the target system as a server. As a result, the client application can compile the Modelica Model and do simulation dynamically.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>In the context of design time models, we would like to integrate the Modelica Server to our development process. We will have a model-based software development environment which allows interacting between Java program and Modelica Server dynamically. The OpenModelica API would be used here to integrate the Modelica Server with existing Java program. Domain concepts in Eclipse Ecore can also be used as a basis for automatically creating models (classes) in Modelica. The ideal Modelica invoke process would like:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The users can create the models in client side of target system;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The users send the models as required parameters to web server;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The web server interacts with Modelica Server and gets the calculated results or simulations;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The calculated results or simulations are sent to client side dynamically;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 10pt&quot; class=MsoNormal>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following is an architecture diagram we design for Modelica Web Service.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing align=center>&lt;SPAN style=&quot;FONT-SIZE: 12pt; mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/untitled.bmp&quot; width=532 height=492>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805383&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805383&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>16&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805383&quot;>. Modelica Web Service Architecture&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;SPAN style=&quot;FONT-SIZE: 12pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Run time models integration is a simple way of invoking Modelica model and it just support the Modelica functionalities in run time. However, the final target of the methodology is to provide a web service mechanism for design-time interaction, and it can typically used for tool integration. For instants, it can provide integrating editors with the OpenModelica compiler.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&amp;nbsp;&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-3jPphuAXQjF8IlfsWtz-5A" name="modelica_web_service,_5Ztj0KGVEeC38bl9wJwlEw" guid="-3jPphuAXQjF8IlfsWtz-5A">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The Running Time Model is the way that the Modelica Model can be invoked as a program at the operating-system level, which is usually a Java class here.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>We have recognized the OpenModelica Project&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&amp;nbsp; &lt;/SPAN>as a good chance to achieve the above benefits with a reasonable amount of time and effort. The OpenModelica Project is an open source project and the OpenModelica Compiler (OMC) is by default targeted to C code generation. It would be possible to wrap the C code of a model into a Java wrapper code to be used by the Java Web Service with Java Native Interface technology. However, this approach leads to unmanaged native code to be called. More, they are not easily portable because of the need to be compiled separately for each target platform.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following picture shows translation phases of OpenModelica Compiler&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoNormal align=center>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/MOdelica Runtime.bmp&quot; width=512 height=384>&lt;/o:lock>&lt;/v:shapetype>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805382&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805382&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>15&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805382&quot;>. OpenModelica Translation Phases&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>In short description of the translation process of Modelica models, the OMC takes the source code of a model and translates it through several transformations into an internal representation of simulation code. In the last phase, C code is generated, compiled and linked with a simulation runtime into the final executable file. The simulation of the model is done by running the executable.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>In the context of run time models, system architect invoke model in this way:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Model the functionality according to the requirement, present the models as Modelica Script;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>See how these Modelica Script is compiled in Modelica compilers like OpenModelica, get the compiled results. Usually they are some C++ files; &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use pre-compiled Java program units to invoke the executables C++ Modelica method for existing system through Java Native Interface.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-XtryWr3QhItmr6y7XZIsFA" name="jee_ws_development,_7lYMQZzCEeCwZfi5IJDs5w" guid="-XtryWr3QhItmr6y7XZIsFA"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-OmePzCdWuYfQ8CJgh5KsMg" name="implement_web_service,_-pNJoJzCEeCwZfi5IJDs5w" guid="-OmePzCdWuYfQ8CJgh5KsMg">
    <refinedDescription>This task describes how to implement a Web service using JEE technologies.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Ktlg9jjbwniqzRxFf868DQ" name="system_developer,_-pOXwJzCEeCwZfi5IJDs5w" guid="-Ktlg9jjbwniqzRxFf868DQ"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-CDBruluNGb0TmAviIe8PVQ" name="deploy_web_service,_TKhRkJzDEeCwZfi5IJDs5w" guid="-CDBruluNGb0TmAviIe8PVQ">
    <refinedDescription>This task defines the guided procedure for deploying a Web service using JEE technologies.</refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-VPgEMvStcyxvzsEvk3RL_Q" name="generate_web_service_files,_Ie6M0KGMEeC6m4lNxCxazg" guid="-VPgEMvStcyxvzsEvk3RL_Q">
    <refinedDescription>&lt;p>&#xD;
    This task describes how to generate a skeleton Web service to be used in the implementation task. The current practice&#xD;
    has two tool mentors to support two different alternatives:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Annotated Java source files using MOFScript.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        XSD, WSDL and/or BPEL files using Modelio.&#xD;
    &lt;/li>&#xD;
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-3Doj_o1fhsAZ84sdv2wYMA" name="architecture_model.rename,_AgA04aGSEeC38bl9wJwlEw" guid="-3Doj_o1fhsAZ84sdv2wYMA">
    <refinedDescription>&lt;p>&#xD;
    The &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.default.cat_def.extend_mdse-sintef/workproducts/architecture_model_5B0FB7A.html&quot;&#xD;
    guid=&quot;_vIqTYOG2Ed-AyrTFSpVP8g&quot;>Architecture model&lt;/a> describes the overall architecture of the system and its&#xD;
    partitioning into components in terms of collaborations of components and subsystems, component structures, component&#xD;
    interactions, and component interfaces and protocols. It describes two aspects of the component collaboration, namely&#xD;
    the static (structure) and dynamic (behaviour). The structural model describes the components, their dependencies, and&#xD;
    their interfaces; the dynamic model describes the component interactions and protocols. The result is to define&#xD;
    components in terms of what interfaces they provide, what interfaces they use, and how these interfaces should be used&#xD;
    (protocol).&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-FVL0h3QePNuYXHsXDvUgYg" name="build,_AgKl4aGSEeC38bl9wJwlEw" guid="-FVL0h3QePNuYXHsXDvUgYg">
    <refinedDescription>&lt;p>
    This working version of the system or part of the system&amp;nbsp;is the result of putting the implementation through a
    build process (typically an automated build script) that creates an executable version, or one that runs. This
    executable version will typically have a number of supporting files that are also considered part of this artifact.
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-PmUgJ4G34N4OfTPspbjtYg" name="developer_test,_AgKl5KGSEeC38bl9wJwlEw" guid="-PmUgJ4G34N4OfTPspbjtYg">
    <refinedDescription>&lt;p>
    This artifact covers all of the steps to validate a specific aspect of an implementation element. For example, a test
    could ensure that the parameters of a method properly accept the uppermost and lowermost required values. A developer
    test specifies test entries, execution conditions, and expected results. These details are identified to evaluate a
    particular aspect of a scenario.
&lt;/p>
&lt;p>
    When you collect developer tests for a specific implementation element, you can validate that the element performs as
    specified.
&lt;/p>
&lt;p>
    The tests be self-documenting so that it is clear upon completion of the test whether the implementation element has
    run correctly.
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-fLQtABeUib3-1qj2BWkUgg" name="implementation,_AgKl56GSEeC38bl9wJwlEw" guid="-fLQtABeUib3-1qj2BWkUgg">
    <refinedDescription>&lt;p> 
   This artifact is the collection of one or more of these elements: &lt;/p> &lt;ul>
&lt;li>         Source code files     &lt;/li>
&lt;li>         Data files     &lt;/li>
&lt;li>         Build scripts     &lt;/li>
&lt;li>         Other files that are transformed into the executable system 
   &lt;/li>
&lt;/ul></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-VkjU9QvSd4-bmli7GVTTtA" name="service_migration_model,_AgKl6qGSEeC38bl9wJwlEw" guid="-VkjU9QvSd4-bmli7GVTTtA">
    <refinedDescription>&lt;p>&#xD;
    The service migration model describes the IT perspective of an SOA and contains the spesifications of service&#xD;
    interfaces, interfaces and message types, opperation behaviours, service orchestration and software componenst. The&#xD;
    service migration model is built in the two tasks &lt;em>define service interfaces&lt;/em> and &lt;em>define operation&#xD;
    behaviours&lt;/em>.&lt;br />&#xD;
    The model represents a so-called platform-independent model (PIM) according&amp;nbsp;to the MDA approach.&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-he7PIGThEGUA6W88hL82kA" name="matlab_as_service,_AgKl86GSEeC38bl9wJwlEw" guid="-he7PIGThEGUA6W88hL82kA">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The usage of Providing MATLAB as a Service here will mainly satisfy the requirements from “Mathematic Modeling” and “Service Modeling“aspects.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>According to the introduction from MathWorks, there are three ways to deploy MATLAB as a web service currently&lt;?xml:namespace prefix = w ns = &quot;urn:schemas-microsoft-com:office:word&quot; />&lt;w:Sdt id=6082354 Citation=&quot;t&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/SPAN>&lt;/SPAN>&lt;/w:Sdt>.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use MATLAB Builder NE to create a server-side .NET component;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use MATLAB Builder JA to create a server-side Java component;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use COM automation, CGI, or other technologies to access MATLAB through web.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>With MATLAB Builder NE or JA, user can integrate MATLAB application with .NET and COM components, or Java program, and then deployed this application as web service. A .NET, or COM, or Java wrapper is used here to invoke the encrypted MATLAB functions. This wrapper runs against the MATLAB Compiler Runtime (MCR) and can share the MATLAB libraries. The MATLAB function is invoked as Java method or methods of any other COM or .NET class. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>MathWorks gives a mechanism to provide the MATLAB function into a deployable, portable, robust, scalable Web application, which we could see from the diagram below.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/MTALAB.bmp&quot; width=580 height=532>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805380&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805380&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>13&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805380&quot;>. Architecture of Proving MATLAB as a Service&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>For builder NE, users can integrate a MATLAB based .NET or COM component into an existing .NET or COM application by installing both the component and the MCR on the target machine. For Web applications, the builder also provides a .NET custom control that allows zoom, pan, and rotate functionality for figures created in MATLAB. Users can also use the custom control from the toolbox in Visual Studio. With the builder support for the .NET remoting API, users can also run their class as a persistent service or spread their processing across multiple processes. &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>For builder JA, MATLAB allows users to present the MATLAB calculation or simulation results into servlets or Java Server Page. Users can integrate a MATLAB based Java class into an existing Java infrastructure by installing the class and the MCR on the target machine. For Web applications that use JSP technology or servlets, the builder provides AJAX-based zoom, pan, and rotate controls for figures created in MATLAB. Using the builder's Remote Method Invocation (RMI) interface, users can also run their class as a persistent service, or spread their processing across multiple processes. Java classes created with the builder can be distributed at no additional charge.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>A typical example of providing MATLAB as web service is shown in the website of MATLAB, which we could see in the following table. This example allows users to input parameters from web browser, then the parameter will be passed to MATLAB service and return the simulation result, the result will be present in client web browser.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/MATLAB2.bmp&quot; width=580 height=488>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805381&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805381&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>14&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805381&quot;>. Calculation Results from MATLAB Web Service&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-xz65-VOD1328tIK5rl3dMA" name="modelica_design_time_model,_AgKl9qGSEeC38bl9wJwlEw" guid="-xz65-VOD1328tIK5rl3dMA">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The Designing Time Model is the way that the Modelica Complier is integrated with the target system as a server. As a result, the client application can compile the Modelica Model and do simulation dynamically.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>In the context of design time models, we would like to integrate the Modelica Server to our development process. We will have a model-based software development environment which allows interacting between Java program and Modelica Server dynamically. The OpenModelica API would be used here to integrate the Modelica Server with existing Java program. Domain concepts in Eclipse Ecore can also be used as a basis for automatically creating models (classes) in Modelica. The ideal Modelica invoke process would like:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The users can create the models in client side of target system;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The users send the models as required parameters to web server;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The web server interacts with Modelica Server and gets the calculated results or simulations;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>The calculated results or simulations are sent to client side dynamically;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 10pt&quot; class=MsoNormal>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following is an architecture diagram we design for Modelica Web Service.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing align=center>&lt;SPAN style=&quot;FONT-SIZE: 12pt; mso-no-proof: yes&quot;>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;/o:lock>&lt;/v:shapetype>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/untitled.bmp&quot; width=532 height=492>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805383&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805383&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>16&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805383&quot;>. Modelica Web Service Architecture&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=MsoNoSpacing>&lt;SPAN style=&quot;FONT-SIZE: 12pt&quot;>&lt;o:p>&lt;FONT face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/SPAN>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>Run time models integration is a simple way of invoking Modelica model and it just support the Modelica functionalities in run time. However, the final target of the methodology is to provide a web service mechanism for design-time interaction, and it can typically used for tool integration. For instants, it can provide integrating editors with the OpenModelica compiler.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&amp;nbsp;&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-w6HY606nXZRRd67UDKPYYw" name="modelica_web_service,_AgKl-aGSEeC38bl9wJwlEw" guid="-w6HY606nXZRRd67UDKPYYw">
    <refinedDescription>&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The Running Time Model is the way that the Modelica Model can be invoked as a program at the operating-system level, which is usually a Java class here.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;?xml:namespace prefix = o ns = &quot;urn:schemas-microsoft-com:office:office&quot; />&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>We have recognized the OpenModelica Project&lt;SPAN style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&amp;nbsp; &lt;/SPAN>as a good chance to achieve the above benefits with a reasonable amount of time and effort. The OpenModelica Project is an open source project and the OpenModelica Compiler (OMC) is by default targeted to C code generation. It would be possible to wrap the C code of a model into a Java wrapper code to be used by the Java Web Service with Java Native Interface technology. However, this approach leads to unmanaged native code to be called. More, they are not easily portable because of the need to be compiled separately for each target platform.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>The following picture shows translation phases of OpenModelica Compiler&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;PAGE-BREAK-AFTER: avoid; TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoNormal align=center>&lt;?xml:namespace prefix = v ns = &quot;urn:schemas-microsoft-com:vml&quot; />&lt;v:shapetype id=_x0000_t75 stroked=&quot;f&quot; filled=&quot;f&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; o:spt=&quot;75&quot; coordsize=&quot;21600,21600&quot;>&lt;v:stroke joinstyle=&quot;miter&quot;>&lt;/v:stroke>&lt;v:formulas>&lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 1 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum 0 0 @1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @2 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @3 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @0 0 1&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @6 1 2&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelWidth&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @8 21600 0&quot;>&lt;/v:f>&lt;v:f eqn=&quot;prod @7 21600 pixelHeight&quot;>&lt;/v:f>&lt;v:f eqn=&quot;sum @10 21600 0&quot;>&lt;/v:f>&lt;/v:formulas>&lt;v:path o:connecttype=&quot;rect&quot; gradientshapeok=&quot;t&quot; o:extrusionok=&quot;f&quot;>&lt;/v:path>&lt;o:lock aspectratio=&quot;t&quot; v:ext=&quot;edit&quot;>&lt;IMG alt=&quot;&quot; src=&quot;./../../practice.platform.matlab_modelica_development.base-sintef/workproducts/resources/MOdelica Runtime.bmp&quot; width=512 height=384>&lt;/o:lock>&lt;/v:shapetype>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-ALIGN: center; MARGIN: 0cm 0cm 10pt&quot; class=MsoCaption align=center>&lt;a name=&quot;_Toc238805382&quot;>&lt;STRONG>&lt;FONT color=#4f81bd face=Calibri>Figure &lt;/FONT>&lt;/STRONG>&lt;/a>&lt;STRONG>&lt;FONT color=#4f81bd>&lt;FONT face=Calibri>&lt;SPAN style=&quot;mso-bookmark: _Toc238805382&quot;>&lt;SPAN style=&quot;mso-no-proof: yes&quot;>15&lt;/SPAN>&lt;/SPAN>&lt;SPAN style=&quot;mso-bookmark: _Toc238805382&quot;>. OpenModelica Translation Phases&lt;/SPAN>&lt;/FONT>&lt;/FONT>&lt;/STRONG>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>In short description of the translation process of Modelica models, the OMC takes the source code of a model and translates it through several transformations into an internal representation of simulation code. In the last phase, C code is generated, compiled and linked with a simulation runtime into the final executable file. The simulation of the model is done by running the executable.&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;o:p>&lt;FONT size=3 face=Calibri>&amp;nbsp;&lt;/FONT>&lt;/o:p>&lt;/P>&#xD;
&lt;P style=&quot;MARGIN: 0cm 0cm 0pt&quot; class=BodyMain>&lt;FONT size=3 face=Calibri>In the context of run time models, system architect invoke model in this way:&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Model the functionality according to the requirement, present the models as Modelica Script;&lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>See how these Modelica Script is compiled in Modelica compilers like OpenModelica, get the compiled results. Usually they are some C++ files; &lt;/FONT>&lt;/P>&#xD;
&lt;P style=&quot;TEXT-INDENT: -18pt; MARGIN: 0cm 0cm 0pt 36pt; mso-list: l0 level1 lfo1&quot; class=BodyMain>&lt;SPAN style=&quot;FONT-FAMILY: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol&quot;>&lt;SPAN style=&quot;mso-list: Ignore&quot;>&lt;FONT size=3>·&lt;/FONT>&lt;SPAN style=&quot;FONT: 7pt 'Times New Roman'&quot;>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN>&lt;/SPAN>&lt;/SPAN>&lt;FONT size=3 face=Calibri>Use pre-compiled Java program units to invoke the executables C++ Modelica method for existing system through Java Native Interface.&lt;/FONT>&lt;/P></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
</xmi:XMI>
